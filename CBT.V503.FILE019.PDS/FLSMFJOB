         TITLE 'JOB RESOURCE UTILIZATION REPORT - &SYSDATE'
***********************************************************************
*                                                                     *
*                         F L S M F J O B                             *
*                                                                     *
*        THIS PROGRAM WAS WRITTEN TO FORMAT A REPORT OF SELECTED      *
*        SMF TYPE 30 INTERVAL, STEP, OR JOB STATISTICS RECORDS.       *
*                                                                     *
*        IT WAS DEVELOPED TO PROVIDE A REPORT TO THE LARGEST          *
*        RESOURCE USERS OF THE SYSTEM.  BY PRODUCING A LIST           *
*        SORTED IN CPUTIME SEQUENCE OR EXCP COUNT SEQUENCE,           *
*        OR TAPE MOUNTS SEQUENCE, THE TOP GROUP OF JOBS IN            *
*        EACH CATAGORY CAN BE DETERMINED.  BY PRODUCING A             *
*        REPORT WITH NODETAIL AND AVERAGES REQUESTED, A               *
*        PROFILE CAN BE DETERMINED FOR THE SELECTED GROUP             *
*        OF JOBS.  THIS PROGRAM WAS USED TO SIGNIFICANTLY             *
*        REDUCE THE CPU RESOURCES OF OUR PRODUCTION BATCH             *
*        JOBS BY POINTING OUT OUR BIGGEST 'HOGS'.                     *
*                                                                     *
*                                                                     *
*                                                                     *
*        THE FOLLOWING INFORMATION CAN BE WRITTEN IN THE REPORT:      *
*                                                                     *
*        1)  JOB NAME                                                 *
*        2)  JOB NUMBER                                               *
*        3)  JOB STEP NAME                                            *
*        4)  PROC STEP NAME                                           *
*        5)  PROGRAM NAME                                             *
*        6)  SMF SYSTEM-ID                                            *
*        7)  SECURITY USERID                                          *
*        8)  COMPLETION CODE                                          *
*        9)  START DATE                                               *
*        10) START TIME                                               *
*        11) START DAY OF THE WEEK                                    *
*        12) END DATE                                                 *
*        13) END TIME                                                 *
*        14) END DAY OF THE WEEK                                      *
*        15) STEP ELAPSED TIME                                        *
*        16) TOTAL CPU FOR STEP                                       *
*        17) STEP AVERAGE CPU PERCENT                                 *
*        18) TOTAL EXCPS FOR STEP                                     *
*        19) JOB TYPE (PRODUCTION OR TEST)                            *
*        20) PAGING ACTIVITY TO AUXILLARY STORAGE                     *
*        21) PAGING ACTIVITY TO EXPANDED STORAGE                      *
*        22) VIO PAGING                                               *
*        23) NON-SCRATCH TAPE MOUNTS                                  *
*        24) SCRATCH TAPE MOUNTS                                      *
*        25) TOTAL TAPE MOUNTS                                        *
*        26) TOTAL REGION ABOVE 16 MEG                                *
*        27) TOTAL REGION BELOW 16 MEG                                *
*        28) TOTAL SERVICE UNITS                                      *
*        29) CPU SERVICE UNITS                                        *
*        30) I/O SERVICE UNITS                                        *
*        31) MSO SERVICE UNITS                                        *
*        32) SRB SERVICE UNITS                                        *
*        33) ZAAP ENGINE CPU TIME FOR THE STEP                        *
*        34) ZIIP ENGINE CPU TIME FOR THE STEP                        *
*        35) SPECIALTY ENGINE (ZAAP+ZAAP) CPU TIME FOR THE STEP       *
*                                                                     *
***********************************************************************
*                                                                     *
*                           NOTE                                      *
*                                                                     *
*                                                                     *
*        DAY OF THE WEEK SELECTION CAN BE MADE ON THE ACCORDING       *
*        TO THE DAY OF THE WEEK ACCORDING TO THE DATE THE STEP        *
*        STARTED OR ENDED.  THE KEYWORD SDAY IS USED TO SPECIFY       *
*        WHICH DAYS WILL BE SELECTED BASED UPON START DATE.           *
*        THE KEYWORD EDAY IS USED FOR SELECTION BASED ON STOP         *
*        DATE.  ONE OR MORE SUBPARAMETERS CAN BE SPECIFIED ON         *
*        THE SDAY OR EDAY STATEMENT OR MULTIPLE STATEMENTS            *
*        CAN BE USED.  IN EITHER CASE, THE SUBPARAMETERS ARE          *
*        PROCESSED IN THE ORDER SPECIFIED.  SOME SUBPARAMETERS        *
*        "INCLUDE" ONE OR MORE DAYS WHILE OTHERS "EXCLUDE".           *
*        BECAUSE OF THIS THE ORDER OF ENTRY IS CRITICAL.  AT          *
*        LEAST 1 "INCLUDING" STATEMENT MUST BE USED OR NO DAYS        *
*        WILL BE SELECTED.  THE "INCLUDING' STATEMENTS ARE AS         *
*        FOLLOWS:                                                     *
*                                                                     *
*        1)  SUNDAY           INCLUDE SUNDAY DATA                     *
*        2)  MONDAY           INCLUDE MONDAY DATA                     *
*        3)  TUESDAY          INCLUDE TUESDAY DATA                    *
*        4)  WEDNESDAY        INCLUDE WEDNESDAY DATA                  *
*        5)  THURSDAY         INCLUDE THURSDAY DATA                   *
*        6)  FRIDAY           INCLUDE FRIDAY DATA                     *
*        7)  SATURDAY         INCLUDE SATURDAY DATA                   *
*        8)  WEEKDAY          INCLUDE SAT AND SUN DATA                *
*        9)  WEEKEND          INCLUDE MON THROUGH FRI DATA            *
*        10) ALLDAYS/EVERYDAY INCLUDE DATA FOR ALL DAYS               *
*                                                                     *
*        AFTER "INCLUDING" DATA FOR SOME DAYS OF THE WEEK, ONE        *
*        OR MORE CAN THEN BE "EXCLUDED".  THE "EXCLUDING"             *
*        SUBPARAMETERS ARE AS FOLLOWS:                                *
*                                                                     *
*        1)  NOSUNDAY         EXCLUDE SUNDAY DATA                     *
*        2)  NOMONDAY         EXCLUDE MONDAY DATA                     *
*        3)  NOTUESDAY        EXCLUDE TUESDAY DATA                    *
*        4)  NOWEDNESDAY      EXCLUDE WEDNESDAY DATA                  *
*        5)  NOTHURSDAY       EXCLUDE THURSDAY DATA                   *
*        6)  NOFRIDAY         EXCLUDE FRIDAY DATA                     *
*        7)  NOSATURDAY       EXCLUDE SATURDAY DATA                   *
*        8)  NOWEEKDAY        EXCLUDE SAT AND SUN DATA                *
*        9)  NOWEEKEND        EXCLUDE MON THROUGH FRI DATA            *
*                                                                     *
*        IF NEITHER THE SDAY OR EDAY STATEMENT IS ENTERED, THEN       *
*        ALL DAYS ARE INCLUDED.                                       *
*                                                                     *
*        IT IS POSSIBLE THAT THROUGH AN INVALID COMBINATION OF        *
*        PARAMETERS THAT NO DATA SELECTION MAY OCCUR.  THE            *
*        PARAMETERS ARE PROCESSED IN THE ORDER ENTERED.  FOR          *
*        INSTANCE:                                                    *
*                                                                     *
*        WEEKEND                                                      *
*        NOSATURDAY                                                   *
*        NOSUNDAY                                                     *
*                                                                     *
*        THIS COMBINATION WOULD LOGICALLY EXCLUDE ALL DATA.           *
*                                                                     *
*        LIKEWISE:                                                    *
*                                                                     *
*        NOMONDAY                                                     *
*                                                                     *
*        THIS COMBINATION WOULD LOGICALLY EXCLUDE ALL DATA.           *
*        IF ONLY EXCLUDING PARAMETERS ARE ENTERED, NO SELECTION       *
*        CAN OCCUR.  IT IS PROBABLY SAFER TO ONLY USE INCLUDING       *
*        STATEMENTS.                                                  *
*                                                                     *
***********************************************************************
*                                                                     *
*                       SPECIAL DATE/TIME ISSUES                      *
*                                                                     *
*        SELECTION OF DATA BY DATE AND TIME IS, BY NECESSITY,         *
*        A LITTLE CONVOLUTED.  THE SMF DATA FOR THE INFORMATION       *
*        FORMATTED BY THIS UTILITY HAS TWO DIFFERENT DATES AND        *
*        TIMES.  THERE IS THE START DATE AND TIME FOR THE JOB,        *
*        STEP OR INTERVAL.  THERE IS ALSO THE END DATE AND TIME       *
*        THAT IS THE TIME WHEN THE SMF RECORD WAS CREATED.            *
*        BEING ABLE TO SELECT BY EITHER IS DESIRABLE.                 *
*                                                                     *
*        THERE ARE ALSO TWO DIFFERENT DATE AND TIME CONDITIONS        *
*        THAT ARISE:                                                  *
*                                                                     *
*        1)  NEED FOR ALL DATA FOR THE SAME TIME RANGE FOR            *
*            SEVERAL DAYS.  THE EXAMPLE THAT COMES TO MIND            *
*            IS WANTING ALL ACTIVITY FROM 8:00AM TO 5:00PM            *
*            FOR A DATE RANGE.  FOLLOWING IS HOW TO ACCOMPLISH        *
*            THIS:                                                    *
*                                                                     *
*            DATE=2003/07/07:2003/07/11                               *
*            STIME=08.00:17.00                                        *
*                                                                     *
*            THIS WOULD DISPLAY ONLY ACTIVITY THAT STARTED            *
*            DURING PRIME SHIFT ON THE SPECIFIED DATES.               *
*                                                                     *
*        2)  NEED FOR ALL DATA FROM A SPECIFIC TIME ON A              *
*            GIVEN DAY UNTIL A SPECIFIC TIME ON ANOTHER DAY.          *
*            THIS ALLOWS PROCESSING AN INVERVAL THAT CROSSES          *
*            THE MIDNIGHT TIME LINE.  FOLLOWING IS HOW TO             *
*            ACCOMPLISH THIS:                                         *
*                                                                     *
*            DATE=2003/07/09:2003/07/10                               *
*            STIME=11.00                                              *
*            ETIME=13.00                                              *
*            TIMEINCLUSIVE                                            *
*                                                                     *
*            THIS WOULD DISPLAY ALL ACTIVITY FROM 11:00AM ON          *
*            THE FIRST DAY UNTIL 01:00PM ON THE SECOND DAY.           *
*                                                                     *
*                                                                     *
*        SEE THE ADDITIONAL DOCUMENTATION FOR DATE, STIME,            *
*        ETIME, AND TIMEINCLUSIVE FOR DETAILS.  WITH THE              *
*        FLEXABILITY PROVIDED BY THIS UTILITY IT REALLY CAN           *
*        GET A LITTLE CONFUSING.                                      *
*                                                                     *
***********************************************************************
*                                                                     *
*                       SPECIAL SUBTOTAL ISSUES                       *
*                                                                     *
*        THE GENERATION OF SUBTOTALS ALMOST CERTAINLY REQUIRES        *
*        THAT THE DATA BE SORTED IN THE SAME WAY THAT THE             *
*        SUBTOTAL STATEMENT IS CODED.  IF NOT THEN A HUGE             *
*        NUMBER OF SUBTOTALS COULD BE GENERATED BECAUSE EVERY         *
*        RECORD WOULD PROBABLY BE A SEQUENCE CHANGE.                  *
*                                                                     *
*        FOR EXAMPLE:                                                 *
*                                                                     *
*            SUBTOTAL=JOBNAME(1,3),DATE,HOUR                          *
*                                                                     *
*                WOULD REQUIRE A SORT STATEMENT AS FOLLOWS:           *
*                                                                     *
*            SORT=JOBNAME(1,3),DATE,TIME                              *
*                                                                     *
***********************************************************************
*                                                                     *
*                                                                     *
*        RECORD SELECTION AND CONTROL IS BY SYSIN CONTROL             *
*        STATEMENTS (IF ANY).  ANY NUMBER OF STATEMENTS CAN           *
*        BE ENTERED WITH THE KEYWORD STARTING IN COLUMN 1             *
*        OF EACH STATEMENT.                                           *
*                                                                     *
*                                                                     *
*        ALLOWABLE INPUT RECORD KEYWORDS ARE AS FOLLOWS:              *
*                                                                     *
*        1)  INTERVAL                                                 *
*                                                                     *
*            REQUESTS THAT THE REPORT BE GENERATED FROM INTERVAL      *
*            RECORDS INSTEAD OF STEP OR JOBLEVEL RECORDS.             *
*            THE SMF TYPE 30 SUBTYPES 2 AND 3 RECORDS WILL            *
*            BE USED INSTEAD OF THE SUBTYPE 4 OR 5 RECORDS.           *
*            NOTE THAT SOME OF THE INFORMATION WILL NOW BE            *
*            MEANINGLESS SUCH AS RETURN CODE.                         *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        2)  JOBLEVEL                                                 *
*                                                                     *
*            REQUESTS THAT A JOBLEVEL REPORT BE GENERATED             *
*            INSTEAD OF THE STEPLEVEL VERSION.  THE SMF               *
*            TYPE 30 SUBTYPE 5 RECORD WILL BE USED INSTEAD OF         *
*            THE TYPE 30 SUBTYPE 4 RECORD.  NOTE THAT SOME OF         *
*            THE INFORMATION WILL NOW BE BLANK SUCH AS THE STEP       *
*            NAME AND PROGRAM NAME.  SOME INFORMATION WILL BE         *
*            CUMULATIVE AND OTHERS MAXIMUM VALUES DEPENDING ON        *
*            THE FIELD.                                               *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        3)  JOBNAME=JJJJJJJJ(NN)                                     *
*            WHERE JJJJJJJJ IS A 1 TO 8 CHARACTER JOBNAME             *
*                  N IS THE STARTING POSITION WITHIN THE FULL         *
*                  JOBNAME TO BE USED FOR SELECTION                   *
*                                                                     *
*            ALIASES JOBNM                                            *
*                                                                     *
*            UP TO 1000 JOBNAME CONTROL STATEMENTS MAY BE             *
*            ENTERED                                                  *
*                                                                     *
*        4)  EXJOBNAME=JJJJJJJJ(NN)                                   *
*            WHERE JJJJJJJJ IS A 1 TO 8 CHARACTER JOBNAME             *
*                  N IS THE STARTING POSITION WITHIN THE FULL         *
*                  JOBNAME TO BE EXCLUDED FROM SELECTION              *
*                                                                     *
*            ALIASES XJOBNAME, EXJOBNM, XJOBNM                        *
*                                                                     *
*            UP TO 1000 EXJOBNAME CONTROL STATEMENTS MAY BE           *
*            ENTERED                                                  *
*                                                                     *
*        5)  JOBNO=IIIIIIII                                           *
*            WHERE IIIIIIII IS AN 8 CHARCTER JES2 JOBID IN THE        *
*                  FOLLOWING FORMAT TO BE USED FOR SELECTION:         *
*                                                                     *
*                  JOB..... OR STC..... OR TSU..... OR                *
*                  J0 ..... OR S0 ..... OR T0 .....                   *
*                                                                     *
*            ALIASES JOBNUMBER, JOBID                                 *
*                                                                     *
*            UP TO 1000 JOBNUMBER CONTROL STATEMENTS MAY BE           *
*            ENTERED                                                  *
*                                                                     *
*        6)  EXJOBNO=IIIIIIII                                         *
*            WHERE IIIIIIII IS AN 8 CHARCTER JES2 JOBID IN THE        *
*                  FOLLOWING FORMAT TO BE EXCLUDED FROM SELECTION:    *
*                                                                     *
*                  JOB..... OR STC..... OR TSU..... OR                *
*                  J0 ..... OR S0 ..... OR T0 .....                   *
*                                                                     *
*            ALIASES XJOBNO, EXJOBNUMBER, EXJOBID, XJOBID             *
*                                                                     *
*            UP TO 1000 EXJOBNUMBER CONTROL STATEMENTS MAY BE         *
*            ENTERED                                                  *
*                                                                     *
*        7)  DATE=SDATE:EDATE                                         *
*            WHERE SDATE IS THE START DATE AND EDATE IS THE           *
*                  OPTIONAL END DATE.                                 *
*                                                                     *
*             NOTE IF THE TIMEINCLUSIVE OPTION IS ENTERED THEN        *
*                  THE LOWEST START DATE OF ANY AND ALL DATE          *
*                  SPECIFICATIONS WILL BE USED FOR THE                *
*                  START DATE OF THE INCLUSIVE INTERVAL.              *
*                  THE HIGHEST END DATE OF ANY AND ALL DATE           *
*                  SPECIFICATIONS WILL BE USED FOR THE END            *
*                  DATE OF THE INCLUSIVE INTERVAL.  ALL               *
*                  OTHER DATES WILL BE IGNORED WHEN THE               *
*                  TIMEINCLUSIVE OPTION IS ENTERED.                   *
*                                                                     *
*                  THE TWO DATES MUST HAVE ONE OF THE FOLLOWING       *
*                  FORMATS:                                           *
*                                                                     *
*                  YY.DDD                                             *
*                  YYYY.DDD                                           *
*                  MM/DD/YY                                           *
*                  YYYY/MM/DD                                         *
*                                                                     *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*            UP TO 1000 DATE RANGE CONTROL STATEMENTS MAY BE          *
*            ENTERED                                                  *
*                                                                     *
*        8)  STIME=HH.MM:HH.MM                                        *
*            WHERE HH.MM       IS THE BEGINNING TIME OF THE           *
*                              STEP START TIME RANGE                  *
*                  HH.MM:HH.MM IS THE BEGINNING:END TIME OF THE       *
*                              STEP START TIME RANGE                  *
*                                                                     *
*             NOTE IF THE TIMEINCL OPTION IS ENTERED THEN THE         *
*                  LOWEST START TIME OF ANY AND ALL STIME             *
*                  OR ETIME SPECIFICATIONS WILL BE USED FOR           *
*                  THE START TIME OF THE INCLUSIVE INTERVAL.          *
*                  THE HIGHEST END TIME OF ANY AND ALL STIME          *
*                  OR ETIME SPECIFICATIONS WILL BE USED FOR           *
*                  THE END TIME OF THE INCLUSIVE INTERVAL.            *
*                  THE EXCEPTION TO THIS IS WHEN AN ETIME             *
*                  IS SPECIFIED WITH A SINGLE TIME.  THIS             *
*                  TIME WILL BE CONSIDERED BOTH THE START             *
*                  AND END TIME FOR THAT ETIME RANGE.                 *
*                  ALL OTHER TIMES WILL BE IGNORED WHEN THE           *
*                  TIMEINCL OPTION IS ENTERED.                        *
*                                                                     *
*            ALIASES STARTTIME, TIME                                  *
*                                                                     *
*            UP TO 1000 START TIME RANGE CONTROL STATEMENTS MAY       *
*            BE ENTERED                                               *
*                                                                     *
*        9)  ETIME=HH.MM:HH.MM                                        *
*            WHERE HH.MM       IS THE BEGINNING TIME OF THE           *
*                              STEP STOP TIME RANGE                   *
*                  HH.MM:HH.MM IS THE BEGINNING:END TIME OF THE       *
*                              STEP STOP TIME RANGE                   *
*                                                                     *
*             NOTE IF THE TIMEINCL OPTION IS ENTERED THEN THE         *
*                  LOWEST START TIME OF ANY AND ALL STIME             *
*                  OR ETIME SPECIFICATIONS WILL BE USED FOR           *
*                  THE START TIME OF THE INCLUSIVE INTERVAL.          *
*                  THE HIGHEST END TIME OF ANY AND ALL STIME          *
*                  OR ETIME SPECIFICATIONS WILL BE USED FOR           *
*                  THE END TIME OF THE INCLUSIVE INTERVAL.            *
*                  THE EXCEPTION TO THIS IS WHEN AN ETIME             *
*                  IS SPECIFIED WITH A SINGLE TIME.  THIS             *
*                  TIME WILL BE CONSIDERED BOTH THE START             *
*                  AND END TIME FOR THAT ETIME RANGE.                 *
*                  ALL OTHER TIMES WILL BE IGNORED WHEN THE           *
*                  TIMEINCL OPTION IS ENTERED.                        *
*                                                                     *
*            ALIASES ENDTIME                                          *
*                                                                     *
*            UP TO 1000 STOP TIME RANGE CONTROL STATEMENTS MAY        *
*            BE ENTERED                                               *
*                                                                     *
*        10) TIMEINCLUSIVE                                            *
*                                                                     *
*            REQUESTS THAT ANY TIME RANGES THAT ARE SPECIFIED         *
*            BY THE STIME OR ETIME KEYWORDS ARE INCLUSIVE.            *
*            THAT IS, THE EARLIEST TIME OF ANY RANGE WILL BE          *
*            USED AS THE START TIME OF THE REPORT ON THE FIRST        *
*            DAY OF THE DATE RANGE AND THAT THE LATEST TIME           *
*            OF ANY RANGE WILL BE USED AS THE END TIME OF THE         *
*            REPORT ON THE LAST DAY OF THE REPORT.  THE               *
*            EXCEPTION TO THIS IS IF THE ETIME VALUE ONLY             *
*            SPECIFIES A SINGLE TIME IN WHICH CASE IT WILL            *
*            BE USED AS IF IT WAS THE END TIME OF THE RANGE.          *
*            NOTE THAT THIS KEYWORD INDICATES THAT AT LEAST           *
*            ONE DATE RANGE AND ONE STIME OR ETIME RANGE MUST         *
*            BE SPECIFIED.                                            *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        11) SYSTEM=SSSS                                              *
*            WHERE SSSS IS THE 4 CHARACTER SMF SYSTEM ID TO BE        *
*                  USED FOR SELECTION                                 *
*                                                                     *
*            ALIASES SYSID                                            *
*                                                                     *
*            UP TO 1000 SYSTEM ID CONTROL STATEMENTS MAY BE           *
*            ENTERED                                                  *
*                                                                     *
*        12) EXSYSTEM=SSSS                                            *
*            WHERE SSSS IS THE 4 CHARACTER SMF SYSTEM ID TO BE        *
*                  EXCLUDED FROM SELECTION                            *
*                                                                     *
*            ALIASES XSYSTEM, EXSYSID, XSYSID                         *
*                                                                     *
*            UP TO 1000 EXSYSTEM ID CONTROL STATEMENTS MAY BE         *
*            ENTERED                                                  *
*                                                                     *
*        13) PROCSTEP=SSSSSSSS                                        *
*            WHERE SSSSSSSS IS THE STEP NAME ON THE EXECUTE           *
*                  STATEMENT WITHIN A CALLED CATALOGED                *
*                  PROCEDURE TO BE USED FOR SELECTION.                *
*                                                                     *
*            ALIASES PSTEP                                            *
*                                                                     *
*            UP TO 1000 PROCSTEP CONTROL STATEMENTS MAY BE            *
*            ENTERED                                                  *
*                                                                     *
*        14) EXPROCSTEP=SSSSSSSS                                      *
*            WHERE SSSSSSSS IS THE STEP NAME ON THE EXECUTE           *
*                  STATEMENT WITHIN A CALLED CATALOGED                *
*                  PROCEDURE TO BE EXCLUDED FROM SELECTION.           *
*                                                                     *
*            ALIASES XPROCSTEP, EXPSTEP, XPSTEP                       *
*                                                                     *
*            UP TO 1000 EXPROCSTEP CONTROL STATEMENTS MAY BE          *
*            ENTERED                                                  *
*                                                                     *
*        15) JOBSTEP=SSSSSSSS                                         *
*            WHERE SSSSSSSS IS THE STEP NAME ON THE EXECUTE           *
*                  WITHIN THE JOB WHICH EXECUTES THE PROGRAM          *
*                  OR CATALOGED PROCEDURE TO BE USED FOR              *
*                  SELECTION.                                         *
*                                                                     *
*            ALIASES JSTEP                                            *
*                                                                     *
*            UP TO 1000 JOBSTEP CONTROL STATEMENTS MAY BE             *
*            ENTERED                                                  *
*                                                                     *
*        16) EXJOBSTEP=SSSSSSSS                                       *
*            WHERE SSSSSSSS IS THE STEP NAME ON THE EXECUTE           *
*                  WITHIN THE JOB WHICH EXECUTES THE PROGRAM          *
*                  OR CATALOGED PROCEDURE TO BE EXCLUDED FROM         *
*                  SELECTION.                                         *
*                                                                     *
*            ALIASES XJOBSTEP, EXJSTEP, XJSTEP                        *
*                                                                     *
*            UP TO 1000 EXJOBSTEP CONTROL STATEMENTS MAY BE           *
*            ENTERED                                                  *
*                                                                     *
*        17) PROGRAM=PPPPPPPP                                         *
*            WHERE PPPPPPPP IS THE 1 TO 8 CHARACTER PROGRAM NAME      *
*                  TO BE USED FOR SELECTION                           *
*                                                                     *
*            ALIASES PGM                                              *
*                                                                     *
*            UP TO 1000 PROGRAM NAME STATEMENTS MAY BE                *
*            ENTERED                                                  *
*                                                                     *
*        18) EXPROGRAM=PPPPPPPP                                       *
*            WHERE PPPPPPPP IS THE 1 TO 8 CHARACTER PROGRAM NAME      *
*                  TO BE EXCLUDED FROM SELECTION.                     *
*                                                                     *
*            ALIASES XPROGRAM, EXPGM, XPGM                            *
*                                                                     *
*            UP TO 1000 EXPROGRAM NAME STATEMENTS MAY BE              *
*            ENTERED                                                  *
*                                                                     *
*        19) USERID=UUUUUUUU                                          *
*            WHERE UUUUUUUU IS THE 1 TO 8 CHARACTER SECURITY          *
*                  USERID TO BE USED FOR SELECTION                    *
*                                                                     *
*            ALIASES UID                                              *
*                                                                     *
*            UP TO 1000 JOB USERID STATEMENTS MAY BE                  *
*            ENTERED                                                  *
*                                                                     *
*        20) EXUSERID=UUUUUUUU                                        *
*            WHERE UUUUUUUU IS THE 1 TO 8 CHARACTER SECURITY          *
*                  USERID TO BE EXCLUDED FROM SELECTION.              *
*                                                                     *
*            ALIASES XUSERID, EXUID, XUID                             *
*                                                                     *
*            UP TO 1000 JOB EXUSERID STATEMENTS MAY BE                *
*            ENTERED                                                  *
*                                                                     *
*        21) CCODE=CCCCC                                              *
*            WHERE CCCCC IS THE STEP COMPLETION CODE IN THE           *
*                  FOLLOWING FORMAT TO BE USED FOR SELECTION:         *
*                                                                     *
*                  S...   - SYSTEM ABEND CODE                         *
*                  U....  - USER ABEND CODE                           *
*                  ....   - NUMERIC RETURN CODE                       *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*            UP TO 1000 CCODE STATEMENTS MAY BE                       *
*            ENTERED                                                  *
*                                                                     *
*        22) EXCCODE=CCCCC                                            *
*            WHERE CCCCC IS THE STEP COMPLETION CODE IN THE           *
*                  FOLLOWING FORMAT TO BE EXCLUDED FROM SELECTION:    *
*                                                                     *
*                  S...   - SYSTEM ABEND CODE                         *
*                  U....  - USER ABEND CODE                           *
*                  ....   - NUMERIC RETURN CODE                       *
*                                                                     *
*            ALIASES XCCODE                                           *
*                                                                     *
*            UP TO 1000 EXCCODE STATEMENTS MAY BE                     *
*            ENTERED                                                  *
*                                                                     *
*        23) ELAPTIME>HHH.MM.SS                                       *
*            ELAPTIME<HHH.MM.SS                                       *
*            WHERE HHH.MM.SS IS THE ELAPSED TIME FOR THE STEP         *
*                  TO BE USED FOR SELECTION                           *
*                                                                     *
*            ALIASES ELAPSED/ET                                       *
*                                                                     *
*        24) EXCPS>NNNNNNNNN                                          *
*            EXCPS<NNNNNNNNN                                          *
*            WHERE NNNNNNNNN IS THE I/O COUNT FOR THE STEP TO BE      *
*                  USED FOR SELECTION                                 *
*                                                                     *
*            ALIASES BLOCKCOUNT/BLOCKCNT/BLOCKS                       *
*                                                                     *
*        25) CPUTIME>TTTTTTT                                          *
*            CPUTIME<TTTTTTT                                          *
*                                                                     *
*            THE "CPUTIME" SELECTION KEYWORD EXPECTS CPU TIME         *
*            ARGUMENT. THIS ARGUMENT IS EITHER THE NUMBER OF          *
*            MINUTES (MMMMMM) WHEN THE "CPUTIMEFRACTS" IS             *
*            NOT PRESENT OR THE NUMBER OF HUNDREDTHS OF A             *
*            SECOND (HHHHHHHH) IF "CPUTIMEFRACTS" IS                  *
*            SPECIFIED.                                               *
*                                                                     *
*            WHERE TTTTTTT IS THE CPU TIME TO BE USED FOR             *
*                  SELECTION EITHER IN MINUTES OR HUNDREDTHS          *
*                  OF A SECOND DEPENDING ON WHETHER OR NOT            *
*                  THE CPUTIMEFRACTS HAS BEEN PREVIOUSLY              *
*                  SPECIFIED.                                         *
*                                                                     *
*                                                                     *
*            NOTE: THAT "CPUTIMEFRACTS" MUST BE SPECIFIED             *
*                  BEFORE "CPUTIME" IN THE INPUT STREAM.              *
*                                                                     *
*            ALIASES CPUTM/CT                                         *
*                                                                     *
*        26) CPUTIMEFRACTS                                            *
*            ALL CPU TIME RELATED FIELDS WILL DISPLAY THE CPU         *
*            TIME WITH FRACTIONS OF A SECOND, I.E. TENTHS AND         *
*            HUNDREDTHS.                                              *
*                                                                     *
*            WITHOUT THIS KEYWORD, THE PROGRAM ONLY DISPLAYS          *
*            CPU TIMES WITH SECONDS.                                  *
*                                                                     *
*            NOTE: THAT "CPUTIMEFRACTS" MUST BE SPECIFIED             *
*                  BEFORE ANY "CPUTIME" AND "PRINT" IN THE            *
*                  INPUT STREAM.                                      *
*                                                                     *
*            ALIASES CTFRACTS                                         *
*                                                                     *
*        27) REGIONBELOW>NNNN                                         *
*            REGIONBELOW<NNNN                                         *
*            WHERE NNNN IS THE REGION BELOW THE 16 MEG LIST IN        *
*                  MEGABYTES USED FOR SELECTION                       *
*                                                                     *
*            ALIASES RGNBELOW                                         *
*                                                                     *
*        28) REGIONABOVE>NNNN                                         *
*            REGIONABOVE<NNNN                                         *
*            WHERE NNNN IS THE REGION ABOVE THE 16 MEG LIST IN        *
*                  MEGABYTES USED FOR SELECTION                       *
*                                                                     *
*            ALIASES RGNABOVE                                         *
*                                                                     *
*        29) PERMTAPES>NNNNNN                                         *
*            PERMTAPES<NNNNNN                                         *
*            WHERE NNNNNN IS THE NUMBER OF NON-SCRATCH TAPE           *
*                  MOUNTS TO BE USED FOR SELECTION                    *
*                                                                     *
*            ALIASES NONSCRATCHTP/NONSCRTAPES                         *
*                                                                     *
*        30) SCRTAPES>NNNNNN                                          *
*            SCRTAPES<NNNNNN                                          *
*            WHERE NNNNNN IS THE NUMBER OF SCRATCH TAPE MOUNTS        *
*                  TO BE USED FOR SELECTION                           *
*                                                                     *
*            ALIASES SCRATCHTAPES/SCRATCHTPS                          *
*                                                                     *
*        31) MOUNTS>NNNNNN                                            *
*            MOUNTS<NNNNNN                                            *
*            WHERE NNNNNN IS THE NUMBER OF TAPE MOUNTS TO BE          *
*                  USED FOR SELECTION                                 *
*                                                                     *
*            ALIASES TAPEMOUNTS/TAPES/TOTTAPES                        *
*                                                                     *
*        32) CPUPCT>NNN                                               *
*            CPUPCT<NNN                                               *
*            WHERE NNN IS THE AVERAGE PERCENT CPU BUSY FOR THE        *
*                  STEP TO BE USED FOR SELECTION                      *
*                                                                     *
*            ALIASES CPUPERCENT/CPU%                                  *
*                                                                     *
*        33) JOBTYPE=X                                                *
*            WHERE X IS EITHER A T FOR TEST JOBS OR A P FOR           *
*                  PRODUCTION JOBS TO BE USED FOR SELECTION.          *
*                                                                     *
*            ALIASES JTYPE/TYPE                                       *
*                                                                     *
*        34) STOPAFTER=NNNNNNNNN                                      *
*                                                                     *
*            WHERE NNNNNNNNN IS THE NUMBER OF ITEMS TO INCLUDE        *
*                  ON THE REPORT.  IT WILL THE BE FIRST NNNNNN        *
*                  INPUT TYPE 30 RECORDS IF THE SORT OPTION IS        *
*                  NOT TAKEN OR THE FIRST NNNNNN RECORDS OF THE       *
*                  REQUESTED SORT SEQUENCE.                           *
*                                                                     *
*            ALIASES STOPCOUNT/STOPCNT                                *
*                                                                     *
*        35) NOFLUSH                                                  *
*                                                                     *
*            REQUESTS THAT ALL RECORDS FOR STEPS WHICH WHERE          *
*                  FLUSHED (DID NOT EXECUTE) WILL BE ELIMINATED       *
*                  FROM THE REPORT.                                   *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        36) NOABEND                                                  *
*                                                                     *
*            REQUESTS THAT ALL RECORDS FOR STEPS WHICH ABENDED        *
*                  WITH EITHER A SYSTEM OR A USER ABEND WILL BE       *
*                  ELIMINATED FROM THE REPORT.                        *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        37) NOTEST                                                   *
*                                                                     *
*            REQUESTS THAT ALL RECORDS FOR TEST JOBS BE ELIMINATED    *
*                  FROM THE REPORT.                                   *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        38) NOPRODUCTION                                             *
*                                                                     *
*            REQUESTS THAT ALL RECORDS FOR PRODUCTION JOBS BE         *
*                  ELIMINATED FROM THE REPORT.                        *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        39) NOJOB                                                    *
*                                                                     *
*            REQUESTS THAT ALL RECORDS FOR BATCH JOBS BE              *
*                  ELIMINATED FROM THE REPORT.                        *
*                                                                     *
*            ALIASES NOBATCH                                          *
*                                                                     *
*        40) NOSTC                                                    *
*                                                                     *
*            REQUESTS THAT ALL RECORDS FOR STARTED TASKS BE           *
*                  ELIMINATED FROM THE REPORT.                        *
*                                                                     *
*            ALIASES NOSTARTED                                        *
*                                                                     *
*        41) NOTSU                                                    *
*                                                                     *
*            REQUESTS THAT ALL RECORDS FOR TSO USERS BE               *
*                  ELIMINATED FROM THE REPORT.                        *
*                                                                     *
*            ALIASES NOTSO/NOUSERS                                    *
*                                                                     *
*        42) TOTALS                                                   *
*                                                                     *
*            REQUESTS THAT REPORT TOTALS FOR ALL SELECTED             *
*                  NUMERIC FIELDS BE GENERATED AT THE END             *
*                  OF THE REPORT.                                     *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        43) AVERAGES                                                 *
*                                                                     *
*            REQUESTS THAT REPORT TOTALS AND AVERAGES FOR             *
*                  ALL SELECTED NUMERIC FIELDS BE GENERATED           *
*                  AT THE END OF THE REPORT.                          *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        44) NODETAIL                                                 *
*                                                                     *
*            REQUESTS THAT THE DETAIL LINES FOR EACH SELECTED         *
*                  STEP NOT BE PRINTED.  ONLY ANY TOTALS AND/OR       *
*                  AVERAGES WILL BE PRINTED.                          *
*                                                                     *
*            ALIASES NOREPORT                                         *
*                                                                     *
*        45) EXPPAGING>NNNNNNNNN                                      *
*            EXPPAGING<NNNNNNNNN                                      *
*            WHERE NNNNNNNNN IS THE TOTAL PAGES TO OR FROM            *
*                  EXPANDED STORAGE FOR THE STEP TO BE USED           *
*                  FOR SELECTION                                      *
*                                                                     *
*            ALIASES EXPANDED                                         *
*                                                                     *
*        46) AUXPAGING>NNNNNNNNN                                      *
*            AUXPAGING<NNNNNNNNN                                      *
*            WHERE NNNNNNNNN IS THE TOTAL PAGES TO OR FROM            *
*                  AUXILLARY STORAGE FOR THE STEP TO BE USED          *
*                  FOR SELECTION                                      *
*                                                                     *
*            ALIASES AUXILLARY                                        *
*                                                                     *
*        47) SERVUNITS>NNNNNNNNN                                      *
*            SERVUNITS<NNNNNNNNN                                      *
*            WHERE NNNNNNNNN IS THE TOTAL NUMBER OF TOTAL SERVICE     *
*                  UNITS FOR THE STEP (IN K) TO BE USED FOR           *
*                  SELECTION                                          *
*                                                                     *
*            ALIASES SERVICEUNITS/SUS/TSERVUNITS/TSERVICEUNITS/       *
*                    TSUS                                             *
*                                                                     *
*        48) CSERVUNITS>NNNNNNNNN                                     *
*            CSERVUNITS<NNNNNNNNN                                     *
*            WHERE NNNNNNNNN IS THE TOTAL NUMBER OF CPU SERVICE       *
*                  UNITS FOR THE STEP (IN K) TO BE USED FOR           *
*                  SELECTION                                          *
*                                                                     *
*            ALIASES CSERVICEUNITS/CSUS/CSERVUNITS/CSUS               *
*                                                                     *
*        49) ISERVUNITS>NNNNNNNNN                                     *
*            ISERVUNITS<NNNNNNNNN                                     *
*            WHERE NNNNNNNNN IS THE TOTAL NUMBER OF I/O SERVICE       *
*                  UNITS FOR THE STEP (IN K) TO BE USED FOR           *
*                  SELECTION                                          *
*                                                                     *
*            ALIASES ISERVICEUNITS/ISUS/ISERVUNITS/ISUS               *
*                                                                     *
*        50) MSERVUNITS>NNNNNNNNN                                     *
*            MSERVUNITS<NNNNNNNNN                                     *
*            WHERE NNNNNNNNN IS THE TOTAL NUMBER OF MSO SERVICE       *
*                  UNITS FOR THE STEP (IN K) TO BE USED FOR           *
*                  SELECTION                                          *
*                                                                     *
*            ALIASES MSERVICEUNITS/MSUS/MSERVUNITS/MSUS               *
*                                                                     *
*        51) SSERVUNITS>NNNNNNNNN                                     *
*            SSERVUNITS<NNNNNNNNN                                     *
*            WHERE NNNNNNNNN IS THE TOTAL NUMBER OF SRB SERVICE       *
*                  UNITS FOR THE STEP (IN K) TO BE USED FOR           *
*                  SELECTION                                          *
*                                                                     *
*            ALIASES SSERVICEUNITS/SSUS/SSERVUNITS/SSUS               *
*                                                                     *
*        52) VIOPAGING>NNNNNNNNN                                      *
*            VIOPAGING<NNNNNNNNN                                      *
*            WHERE NNNNNNNNN IS THE TOTAL NUMBER OF VIO               *
*                  PAGE IN OR OUT OPERATIONS TO BE USED FOR           *
*                  SELECTION                                          *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*        53) IRANGE=SDATE,STIME:EDATE,ETIME                           *
*            WHERE SDATE IS THE START DATE OF AN INCLUSIVE            *
*                  RANGE, STIME IS THE START TIME OF AN               *
*                  INCLUSIVE RANGE AND EDATE AND ETIME ARE            *
*                  THE END DATE AND TIME FOR THAT RANGE.              *
*                                                                     *
*             NOTE ANY RECORD THAT RUNS PARTIALLY WITHIN THIS         *
*                  INCLUSIVE DATE AND TIME RANGE WILL BE ALTERED      *
*                  TO BE, EFFECTIVELY, AN INTERVAL RECORD.  THE       *
*                  DATES AND TIMES AS WELL AS ANY COUNTS WILL BE      *
*                  ADJUSTED FOR THE PERCENT OF THE COUNTS THAT        *
*                  FELL WITHIN THE RANGE.  THUS ANY DETAIL            *
*                  INFORMATION FOR THESE JOBS WILL LOOK LIKE THEY     *
*                  RAN LESS TIME THAN THEY DID SINCE THEY WERE        *
*                  MODIFIED TO REFLECT THE PERCENT THAT THEY RAN      *
*                  WITHIN THE SPECIFIED WINDOW.                       *
*                                                                     *
*                  THE TWO DATES MUST HAVE ONE OF THE FOLLOWING       *
*                  FORMATS:                                           *
*                                                                     *
*                  YY.DDD                                             *
*                  YYYY.DDD                                           *
*                  MM/DD/YY                                           *
*                  YYYY/MM/DD                                         *
*                                                                     *
*                  THE TWO TIMES MUST HAVE THE FOLLOWING FORMAT:      *
*                                                                     *
*                  HH.MM                                              *
*                                                                     *
*            ALIASES *NONE*                                           *
*                                                                     *
*            ONLY 1 IRANGE CONTROL STATEMENT WILL BE HONORED.  IF     *
*            MORE THAN ONE IS ENTERED, THE LAST WILL BE USED.         *
*                                                                     *
*        54) SDAY=OPT1,OPT2,OPT3,OPT4                                 *
*                                                                     *
*            WHERE OPT1 ETC IS A LIST OF OPTIONS WHICH, WHEN          *
*            USED IN COMBINATION, WILL SELECT DATA BASED UPON         *
*            DAY(S) OF THE WHEN WHEN THE JOB OR STEP BEGAN            *
*            EXECUTION                                                *
*                                                                     *
*            SUNDAY/NOSUNDAY                                          *
*            MONDAY/NOMONDAY                                          *
*            TUESDAY/NOTUESDAY                                        *
*            WEDNESDAY/NOWEDNESDAY                                    *
*            THURSDAY/NOTHURSDAY                                      *
*            FRIDAY/NOFRIDAY                                          *
*            SATURDAY/NOSATURDAY                                      *
*            WEEKDAY/NOWEEKDAY                                        *
*            WEEKEND/NOWEEKEND                                        *
*            ALLDAYS/EVERYDAY                                         *
*                                                                     *
*            ALIASES STARTDAY                                         *
*                                                                     *
*            THESE CONTROL STATEMENTS, WHEN USED IN COMBINATION,      *
*            WILL SELECT DATA BASED UPON THE DAY OF THE WEEK          *
*            WHEN THE JOB OR STEP BEGAN EXECUTION.  THE OPTIONS       *
*            ARE PROCESSED IN THE ORDER RECEIVED.  NO DATA IS         *
*            AUTOMATICALLY INCLUDED.  AT LEAST ONE "INCLUDING"        *
*            STATEMENT MUST BE ENTERED IF ANY OF THESE STATEMENTS     *
*            ARE ENTERED.  IF NONE OF THESE STATEMENTS ARE USED,      *
*            ALL DAYS ARE SELECTED.                                   *
*                                                                     *
*        55) EDAY=OPT1,OPT2,OPT3,OPT4                                 *
*                                                                     *
*            WHERE OPT1 ETC IS A LIST OF OPTIONS WHICH, WHEN          *
*            USED IN COMBINATION, WILL SELECT DATA BASED UPON         *
*            DAY(S) OF THE WHEN WHEN THE JOB OR STEP ENDED            *
*            EXECUTION                                                *
*                                                                     *
*            SUNDAY/NOSUNDAY                                          *
*            MONDAY/NOMONDAY                                          *
*            TUESDAY/NOTUESDAY                                        *
*            WEDNESDAY/NOWEDNESDAY                                    *
*            THURSDAY/NOTHURSDAY                                      *
*            FRIDAY/NOFRIDAY                                          *
*            SATURDAY/NOSATURDAY                                      *
*            WEEKDAY/NOWEEKDAY                                        *
*            WEEKEND/NOWEEKEND                                        *
*            ALLDAYS/EVERYDAY                                         *
*                                                                     *
*            ALIASES STARTDAY                                         *
*                                                                     *
*            THESE CONTROL STATEMENTS, WHEN USED IN COMBINATION,      *
*            WILL SELECT DATA BASED UPON THE DAY OF THE WEEK          *
*            WHEN THE JOB OR STEP ENDED EXECUTION.  THE OPTIONS       *
*            ARE PROCESSED IN THE ORDER RECEIVED.  NO DATA IS         *
*            AUTOMATICALLY INCLUDED.  AT LEAST ONE "INCLUDING"        *
*            STATEMENT MUST BE ENTERED IF ANY OF THESE STATEMENTS     *
*            ARE ENTERED.  IF NONE OF THESE STATEMENTS ARE USED,      *
*            ALL DAYS ARE SELECTED.                                   *
*                                                                     *
*        56) SDAY=OPT1,OPT2,OPT3,OPT4                                 *
*                                                                     *
*            WHERE OPT1 ETC IS A LIST OF OPTIONS WHICH, WHEN          *
*            USED IN COMBINATION, WILL SELECT DATA BASED UPON         *
*            DAY(S) OF THE WHEN WHEN THE JOB OR STEP BEGAN            *
*            EXECUTION                                                *
*                                                                     *
*            SUNDAY/NOSUNDAY                                          *
*            MONDAY/NOMONDAY                                          *
*            TUESDAY/NOTUESDAY                                        *
*            WEDNESDAY/NOWEDNESDAY                                    *
*            THURSDAY/NOTHURSDAY                                      *
*            FRIDAY/NOFRIDAY                                          *
*            SATURDAY/NOSATURDAY                                      *
*            WEEKDAY/NOWEEKDAY                                        *
*            WEEKEND/NOWEEKEND                                        *
*            ALLDAYS/EVERYDAY                                         *
*                                                                     *
*            ALIASES STARTDAY                                         *
*                                                                     *
*            THESE CONTROL STATEMENTS, WHEN USED IN COMBINATION,      *
*            WILL SELECT DATA BASED UPON THE DAY OF THE WEEK.         *
*            THEY ARE PROCESSED IN THE ORDER RECEIVED.  NO DATA       *
*            IS AUTOMATICALLY INCLUDED.  AT LEAST ONE "INCLUDING"     *
*            STATEMENT MUST BE ENTERED IF ANY OF THESE STATEMENTS     *
*            ARE ENTERED.  IF NONE OF THESE STATEMENTS ARE USED,      *
*            ALL DAYS ARE SELECTED.                                   *
*                                                                     *
*        57) SORT=OPT1,OPT2,OPT3,OPT4,OPT5                            *
*            WHERE SORTING OF THE INPUT DATA IS REQUESTED IN THE      *
*            ORDER IN WHICH THE FOLLOWING OPTIONS ARE LISTED:         *
*                                                                     *
*            A)  AUXPAGING/AUXILLARY                                  *
*            B)  CCODE                                                *
*            C)  CPUPERCENT/CPUPCT/CPU%                               *
*            D)  CPUTIME/CPUTM/CT                                     *
*            E)  ELAPTIME/ELAPSED/ET                                  *
*            F)  EDATE/ENDDATE/EGDATE/ENDGDATE                        *
*            G)  EDAY/ENDDAY/EDAYOFWEEK                               *
*            H)  ETIME/ENDTIME                                        *
*            I)  EXCPS/BLOCKCOUNT/BLOCKCNT/BLOCKS                     *
*            J)  EXPPAGING/EXPANDED                                   *
*            K)  JOBNAME/JOBNM(OFFSET,LENGTH,A/D)                     *
*            L)  JOBNO/JOBNUMBER/JOBID                                *
*            M)  JOBSTEP/JSTEP                                        *
*            N)  MOUNTS/TAPEMOUNTS/TOTAPES/TAPES                      *
*            O)  PERMTAPES/NONSCRATCHTP/NONSCRTAPES                   *
*            P)  PROCSTEP/PSTEP                                       *
*            Q)  PROGRAM/PGM                                          *
*            R)  REGIONABOVE/RGNABOVE                                 *
*            S)  REGIONBELOW/RGNBELOW                                 *
*            T)  SCRTAPES/SCRATCHTAPES/SCRATCHTPS                     *
*            U)  SERVUNITS/SERVICEUNITS/SUS/TSERVUNITS/               *
*                TSERVICEUNITS/TSUS                                   *
*            V)  CSERVUNITS/CSERVICEUNITS/CSUS                        *
*            W)  ISERVUNITS/ISERVICEUNITS/ISUS                        *
*            X)  MSERVUNITS/MSERVICEUNITS/MSUS                        *
*            Y)  SSERVUNITS/SSERVICEUNITS/SSUS                        *
*            Z)  SDATE/STARTDATE/DATE/SGDATE/STARTGDATE               *
*            AA) SDAY/STARTDAY/SDAYOFWEEK/DAYOFTHEWEEK                *
*            BB) STIME/STARTTIME/TIME                                 *
*            CC) SYSTEM/SYSID                                         *
*            DD) TYPE/JOBTYPE/JTYPE                                   *
*            EE) USERID/UID                                           *
*            FF) VIOPAGING                                            *
*                                                                     *
*            NOTE THAT EACH KEYWORD CAN BE SUFFIXED BY "(A)" OR       *
*            "(D)" FOR ASCENDING OR DESCENDING SORT SEQUENCE.         *
*            THE DEFAULT IS "(A)" FOR ASCENDING                       *
*                                                                     *
*            NOTE THAT THE JOBNAME KEYWORD CAN ALSO HAVE A            *
*            STARTING OFFSET AND LENGTH SPECIFICATION WITHIN          *
*            PARENTHESES SO THAT ONLY A PORTION OF THE JOBNAME        *
*            WILL BE USED FOR SORTING.  THUS A SPECIFICATION          *
*            OF JOBNAME(1,3) WOULD ONLY USE THE FIRST 3               *
*            CHARACTERS OF THE JOBNAME FOR SORTING.  IF THE           *
*            ASCENDING OR DESCENDING SPECIFICATION IS MADE            *
*            IN ADDITION TO THE OFFSET AND LENGTH THEN IT MUST        *
*            BE THE THIRD PARAMETER WITHIN PARENTHESES.               *
*                                                                     *
*            A MAXIMUM OF FIVE OF THE ABOVE OPTIONS MAY BE MADE       *
*            ON A GIVEN RUN.                                          *
*                                                                     *
*            IF AN OPTION IS NOT SPECIFIED, NO SORTING ON THAT        *
*            FIELD WILL BE MADE.                                      *
*                                                                     *
*        58) PRINT=FIELD1,FIELD2,FIELD3,FIELD4, ... FIELD.            *
*            WHERE CUSTOM SELECTION OF THE FIELDS TO BE INCLUDED      *
*            ON THE OUTPUT REPORT IS BEING MADE.  THE FIELDS          *
*            WILL BE PRINTED IN THE ORDER SPECIFIED AND INCLUDE       *
*            THE FOLLOWING VALUES:                                    *
*                                                                     *
*            A)  AUXPAGING/AUXILLARY                                  *
*            B)  CCODE                                                *
*            C)  CPUPERCENT/CPUPCT/CPU%                               *
*            D)  CPUTIME/CPUTM/CT                                     *
*            E)  ELAPTIME/ELAPSED/ET                                  *
*            F)  EDATE/ENDDATE                                        *
*            G)  EGDATE/ENDGDATE                                      *
*            H)  EDAY/ENDDAY/EDAYOFWEEK                               *
*            I)  ETIME/ENDTIME                                        *
*            J)  EXCPS/BLOCKCOUNT/BLOCKCNT/BLOCKS                     *
*            K)  EXPPAGING/EXPANDED                                   *
*            L)  JOBNAME/JOBNM                                        *
*            M)  JOBNO/JOBNUMBER/JOBID                                *
*            N)  JOBSTEP/JSTEP                                        *
*            O)  MOUNTS/TAPEMOUNTS/TOTAPES/TAPES                      *
*            P)  PERMTAPES/NONSCRATCHTP/NONSCRTAPES                   *
*            Q)  PROCSTEP/PSTEP                                       *
*            R)  PROGRAM/PGM                                          *
*            S)  REGIONABOVE/RGNABOVE                                 *
*            T)  REGIONBELOW/RGNBELOW                                 *
*            U)  SCRTAPES/SCRATCHTAPES/SCRATCHTPS                     *
*            V)  SERVUNITS/SERVICEUNITS/SUS/TSERVUNITS/               *
*                TSERVICEUNITS/TSUS                                   *
*            W)  CSERVUNITS/CSERVICEUNITS/CSUS                        *
*            X)  ISERVUNITS/ISERVICEUNITS/ISUS                        *
*            Y)  MSERVUNITS/MSERVICEUNITS/MSUS                        *
*            Z)  SSERVUNITS/SSERVICEUNITS/SSUS                        *
*            AA) SDATE/STARTDATE/DATE                                 *
*            BB) SGDATE/STARTGDATE                                    *
*            CC) SDAY/STARTDAY/SDAYOFWEEK/DAYOFTHEWEEK                *
*            DD) STIME/STARTTIME/TIME                                 *
*            EE) SYSTEM/SYSID                                         *
*            FF) TYPE/JOBTYPE/JTYPE                                   *
*            GG) USERID/UID                                           *
*            HH) VIOPAGING                                            *
*                                                                     *
*            AS MANY FIELDS MAY BE SELECTED AS WILL FIT IN THE        *
*            133 CHARACTER PRINT LINE.                                *
*                                                                     *
*            MULTIPLE PRINT STATEMENTS CAN BE USED IF THE NUMBER      *
*            OR FIELDS NAMES IS EXCESSIVE.                            *
*                                                                     *
*        59) SUBTOTAL=FIELD1,FIELD2,FIELD3,FIELD4                     *
*            WHERE SUBTOTALS FOR THE REPORT ARE GENERATED BY          *
*            CHANGES IN ANY OF THE LISTED FIELDS.  THE FIELDS         *
*            MUST BE ENTERED IN ORDER FROM THE MAJOR TO MINOR         *
*            CONTROL BREAK.                                           *
*                                                                     *
*            A)  JOBNAME/JOBNM(OFFSET,LENGTH)                         *
*            B)  DATE,SDATE/STARTDATE                                 *
*            C)  EDATE/ENDDATE                                        *
*            D)  HOUR/SHOUR                                           *
*            E)  EHOUR                                                *
*            F)  SYSTEM/SYSID                                         *
*            G)  PROGRAM/PGM                                          *
*            H)  USERID/UID                                           *
*            I)  DAYOFTHEWEEK/SDAYOFWEEK/STARTDAY                     *
*            J)  EDAYOFWEEK/ENDDAY                                    *
*                                                                     *
*            NOTE THAT THE JOBNAME KEYWORD CAN ALSO PROVIDE A         *
*            STARTING OFFSET AND LENGTH SPECIFICATION WITHIN          *
*            PARENTHESIS SO THAT ONLY A PORTION OF THE JOBNAME        *
*            WILL BE USED FOR SEQUENCE CHECKING.  THUS A              *
*            SPECIFICATION OF JOBNAME(1,3) WOULD ONLY USE THE         *
*            FIRST 3 CHARACTERS OF JOBNAME FOR THE SEQUENCE           *
*            PROCESSING.                                              *
*                                                                     *
*            A MAXIMUM OF FOUR OF THE ABOVE FIELDS MAY BE ENTERED     *
*            ON A GIVEN RUN.                                          *
*                                                                     *
*                                                                     *
*                             *** NOTE ***                            *
*                                                                     *
*        THIS UTILITY HAS ONE SECTION OF CODE THAT IS                 *
*        INSTALLATION DEPENDENT.  BETWEEN THE LABELS SETTYPE          *
*        AND ENDTYPE, CODE MUST BE CUSTOMIZED TO DETERMINE            *
*        WHETHER THIS IS A PRODUCTION OR A TEST JOB.                  *
*                                                                     *
*                                                                     *
*                                                                     *
*        L I N K A G E    E D I T O R    I N F O R M A T I O N        *
*                                                                     *
*        SIZE - 59K                                                   *
*        ATTR - NORENT, NOREUS, NOREFR, AMODE24, RMODE24              *
*                                                                     *
*                                                                     *
*                                                                     *
*        WRITTEN BY:   JOHN V. HOOPER                                 *
*                      SALISBURY, N.C.                                *
*                                                                     *
*        SUPPORT   :   SBGOLOB@CBTTAPE.ORG                            *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*                            SAMPLE JCL                               *
*                                                                     *
*       //JOBNAME  JOB ....                                           *
*       //STEP1    EXEC PGM=FLSMFJOB                                  *
*       //SMFIN    DD  DSN=SMF.INPUT.FILE,DISP=SHR                    *
*       //SYSPRINT DD  SYSOUT=*                                       *
*       //SYSOUT   DD  SYSOUT=*                                       *
*       //SYSUDUMP DD  SYSOUT=*                                       *
*       //SYSIN    DD  *                                              *
*       NOTSO                                                         *
*       NOSTC                                                         *
*       NOFLUSH                                                       *
*       NOTEST                                                        *
*       PRINT=ELAP,CPUT,CPUPCT,RGNB,RGNA,PERMT,SCRT,TAPES,EXPP        *
*       PRINT=AUXP,CSERV                                              *
*       AVERAGES                                                      *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*                        M A C R O S    U S E D                       *
*                                                                     *
*                                                                     *
*        01)  ABEND        SYS1.MACLIB                                *
*        02)  CLOSE        SYS1.MACLIB                                *
*        03)  DCB          SYS1.MACLIB                                *
*        04)  DCBD         SYS1.MACLIB                                *
*        05)  GET          SYS1.MACLIB                                *
*        06)  IFASMFR      SYS1.MACLIB                                *
*        07)  LINK         SYS1.MACLIB                                *
*        08)  OPEN         SYS1.MACLIB                                *
*        09)  PUT          SYS1.MACLIB                                *
*        10)  RETURN       SYS1.MACLIB                                *
*        11)  SAVE         SYS1.MACLIB                                *
*        12)  WTO          SYS1.MACLIB                                *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                        C H A N G E    L O G                         *
*                                                                     *
*        VERSION 4.0  09/01/03                                        *
*                                                                     *
*             UPDATED FOR Y2K SUPPORT                                 *
*                                                                     *
*             ADDED THE TIMEINCLUSIVE OPTION                          *
*                                                                     *
*        VERSION 5.0  04/01/06                                        *
*                                                                     *
*             ADDED THE IRANGE OPTION                                 *
*                                                                     *
*        VERSION 6.0  11/24/06                                        *
*                                                                     *
*             ADDED SUPPORT FOR CPU, I/O, MSO, AND SRB SERVICE        *
*             UNITS.                                                  *
*                                                                     *
*        VERSION 7.0  12/14/07                                        *
*                                                                     *
*             ADDED SUBTOTAL SUPPORT.                                 *
*                                                                     *
*        VERSION 7.1  10/06/09                                        *
*                                                                     *
*             ADDED NOJOB OPTION.                                     *
*                                                                     *
*             CORRECTED AN ISSUE WITH NOSTC WOULD ALSO                *
*             RESULT IN NOTSO.                                        *
*                                                                     *
*        VERSION 7.2  05/25/10                                        *
*                                                                     *
*             SUPPORT FOR JES2 JOB NUMBERS UP TO 999,999.             *
*             THIS CHANGE WAS ORIGINALLY SUPPLIED BY                  *
*             MARTY FRENCH FROM ST. LUKES REGIONAL MEDICAL            *
*             CENTER IN BOISE IDAHO.                                  *
*                                                                     *
*                                                                     *
*             SUPPORT FOR A CHANGE INITIATED BY PETER HUNKELER        *
*             THAT ADDED A NEW KEYWORD "CPUTIMEFRACTS".  THIS         *
*             KEYWORD REQUESTS THAT HUNDREDTHS OF A SECOND            *
*             ARE TAKEN INTO ACCOUNT WHEN SELECTING RECORDS           *
*             BY CPU TIME AND WHEN PRINTING CPU TIME VALUES.          *
*                                                                     *
*                                                                     *
*             CLARIFIED AN ISSUE WITH JOBLEVEL CONDITION CODE         *
*             EXTRACTION.                                             *
*                                                                     *
*                                                                     *
*                                                                     *
*                           SPECIAL NOTE                              *
*                                                                     *
*                                                                     *
*             THE CHANGE FOR "CPUTIMEFRACTS" CREATED THE              *
*             SITUATION WHERE CPU TIME CAN HAVE TWO DIFFERENT         *
*             DISPLAY LENGTHS.  WHEN "CPUTIMEFRACTS" IS               *
*             SPECIFIED THE CPU TIME WILL BE DISPLAYED AS 10          *
*             DIGITS IN LENGTH.  WITHOUT "CPUTIMEFRACTS" THE CPU      *
*             TIME WILL BE DISPLAYED AS 7 DIGITS IN LENGTH.  THE      *
*             LONGER LENGTH FOR THE CPU TIME DISPLAY WHEN             *
*             "CPUTIMEFRACTS" IS SPECIFIED WOULD CAUSE THE            *
*             DEFAULT PRINT LINE TO EXCEED 133 CHARACTERS IN          *
*             LENGTH AND FAIL WITH A U048 ABEND.  TO ELIMINATE        *
*             THIS SITUATION I REMOVED THE FIELDS REGION-BELOW        *
*             AND REGION-ABOVE FROM THE DEFAULT LIST.  THEY HAVE      *
*             LESS SIGNIFICANCE THAN THEY HAD 15 OR 20 YEARS          *
*             AGO.  THE UNINTENDED CONSEQUENCE IS THAT ANYONE         *
*             WHO IS PARSING THE OUTPUT FROM THE UTILITY MAY          *
*             HAVE TO CHANGE THEIR ROUTINE OR USE THE PRINT=          *
*             CONTROL STATEMENTS BELOW WITHOUT THE                    *
*             "CPUTIMEFRACTS" OPTION.                                 *
*                                                                     *
*             PRINT=JOBNAME,JOBNO,SGDATE,STIME,SYSID,PSTEP,JSTEP      *
*             PRINT=PROGRAM,USERID,CCODE,ELAPSED,CPUTIME,RGNB,RGNA    *
*             PRINT=EXCP,CPUPCT,JOBTYPE                               *
*                                                                     *
***********************************************************************
         EJECT
FLSMFJOB CSECT
***********************************************************************
*                                                                     *
*                         REGISTER EQUATES                            *
*                                                                     *
***********************************************************************
R0       EQU   00
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08                  WORK AREA BASE
R9       EQU   09                  BASE REGISTER 2
R10      EQU   10                  BASE REGISTER 3
R11      EQU   11                  BASE REGISTER 4
R12      EQU   12                  BASE REGISTER 5
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
***********************************************************************
*                                                                     *
*        START OF PROGRAM                                             *
*                                                                     *
***********************************************************************
         SAVE  (14,12),,'FLSMFJOB_&SYSDATE._&SYSTIME'
         USING FLSMFJOB,R9,R10,R11,R12 SET PROGRAM ADDRESSABILITY
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LA    R2,SAVEAREA         LOAD ADDRESS OF NEW SAVE
         ST    R13,4(R2)           SAVE CALLER'S SAVE AREA ADDR
         ST    R2,8(R13)           SAVE MY SAVE AREA ADDRESS
         LR    R13,R2              LOAD REGISTER 13 WITH SAVE AREA
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
TITLE    LTR   R1,R1               TEST PARM/TITLE POINTER ADDRESS
         BZ    CHECKPR             ZERO, NO INPUT PARM/TITLE
         L     R1,0(R1)            LOAD ACTUAL PARM/TITLE ADDRESS
         LTR   R1,R1               TEST PARM/TITLE ADDRESS
         BZ    CHECKPR             ZERO, NO INPUT PARM/TITLE
         LH    R15,0(R1)           LOAD LENGTH OF PARM/TITLE
         LTR   R15,R15             TEST LENGTH OF PARM/TITLE
         BZ    CHECKPR             ZERO, NO INPUT PARM/TITLE
         CH    R15,=H'50'          SEE IF LONGER THAN MAX
         BNH   TITLE01             NO, BRANCH
         LA    R15,50              YES, SET TO MAX
TITLE01  MVC   OTITLE1,BLANKS      BLANK TITLE AREA
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVTITLE         SET FIRST  TITLE
         MVC   OTITLE2,OTITLE1     SET SECOND TITLE
         B     CHECKPR             GO CHECK SYSPRINT FILE
MVTITLE  MVC   OTITLE1(0),2(R1)    **** EXECUTE ONLY ****
SAVEAREA DS    18F                 PROGRAM SAVE AREA
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE WILL PROCESS THE INPUT SYSIN CONTROL            *
*        STATEMENTS (IF ANY).                                         *
*                                                                     *
***********************************************************************
CHECKPR  MVC   DDNAME,=CL8'SYSPRINT' SET DDNAME TO 'SYSPRINT'
         L     R15,=V(FINDDN)      LOAD ADDRESS OF TIOT SEARCH ROUTINE
         BALR  R14,R15             GO SEARCH TIOT FOR DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   ERROR030            NOT ZERO, ERROR
OPENPR   OPEN  (SYSPRINT,(OUTPUT)) OPEN PRINT FILE
         SPACE 3
PROCOUT  MVC   DDNAME,=CL8'DATAOUT' SET DDNAME TO 'DATAOUT'
         L     R15,=V(FINDDN)      LOAD ADDRESS OF TIOT SEARCH ROUTINE
         BALR  R14,R15             GO SEARCH TIOT FOR DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   PROCSYS             NOT ZERO, NOT PRESENT
         OPEN  (DATAOUT,(OUTPUT))  OPEN OPTIONAL DATAOUT FILE
         OI    SWITCH+6,OPTOUT     TURN ON OPTIONAL OUTPUT FILE IND
         SPACE 3
PROCSYS  MVC   DDNAME,=CL8'SYSIN'  SET DDNAME TO 'SYSIN'
         L     R15,=V(FINDDN)      LOAD ADDRESS OF TIOT SEARCH ROUTINE
         BALR  R14,R15             GO SEARCH TIOT FOR DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BZ    OPENSYS             ZERO, GO OPEN INPUT
         WTO   'SMF1000 - OPTIONAL SYSIN DD STATEMENT NOT SPECIFIED, NOX
                OPTIONS SPECIFIED',                                    X
               ROUTCDE=11
         B     NOSYSIN             ZERO, NO PARM, BRANCH
OPENSYS  OPEN  (SYSIN)             OPEN INPUT SYSIN DATA SET
         PUT   SYSPRINT,HEAD       WRITE THE OPTION HEADINGS
READCARD GET   SYSIN,CARDAREA      READ INPUT OPTIONS
         MVC   CARDAREA+72(8),BLANKS  BLANK POSSIBLE CARD SEQ NUMBER
         PUT   SYSPRINT,CARDREC    WRITE THE OPTION CARD
         MVI   CARDREC,C' '        SET NEXT LINE TO SINGLE SPACE
         CLI   CARDAREA,C'*'       SEE IF COMMENT STATEMENT
         BE    READCARD            YES, GO READ ANOTHER STATEMENT
         L     R15,=V(PRMCHK)      LOAD ADDRESS OF PARM CHECK ROUTINE
         BALR  R14,R15             GO PROCESS PARM
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR999            NOT ZERO, BAD PARM
         B     READCARD            GO GET ANOTHER SYSIN OPTION CARD
         SPACE 3
***********************************************************************
*        END OF PARMS                                                 *
***********************************************************************
ENDPARM  TM    SWITCH+6,SELSDAY    SEE IF START DAY-OF-WEEK SELECTION
         BNO   ENDPARM1            NO, CONTINUE
         CLI   SDAYSW,0            SEE IF ANY DAYS SELECTED
         BE    ERROR090            NO, ERROR
ENDPARM1 TM    SWITCH+6,SELEDAY    SEE IF END DAY-OF-WEEK SELECTION
         BNO   ENDPARM2            NO, CONTINUE
         CLI   EDAYSW,0            SEE IF ANY DAYS SELECTED
         BE    ERROR013            NO, ERROR
ENDPARM2 CLOSE (SYSIN)             CLOSE SYSIN FILE
         EJECT
***********************************************************************
*                                                                     *
*        SEARCH FOR THE LOW DATE/TIME AND HIGH DATE/TIME IF           *
*        THE TIMEINCLUSIVE OPTION WAS ENTERED                         *
*                                                                     *
***********************************************************************
TSTIMEI  TM    SWITCH+7,SELTIMEI   SEE IF TIMEINCLUSIVE OPTIONS ENTERED
         BNO   NOSYSIN             NO, SKIP ALL OF THIS STUFF
         TM    SWITCH,SELDATE      SEE IF DATE SELECTION
         BZ    WARN095             NO, WARNING MESSAGE
         TM    SWITCH,SELSTIME     SEE IF TIME SELECTION
         BO    TSTDTEI1            YES, CONTINUE
         TM    SWITCH+6,SELETIME   SEE IF TIME SELECTION
         BNO   WARN096             NO, WARNING MESSAGE
***********************************************************************
*        GET LOWEST START DATE AND HIGHEST END DATE                   *
***********************************************************************
TSTDTEI1 ICM   R1,B'1111',DATETBL  LOAD ADDRESS OF DATE TABLE
         BZ    WARN095             ZERO, NO DATES, WARNING MESSAGE
TSTDTEI2 CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    TSTDTEI5            YES, DONE WITH TABLE
         CP    LOWIDATE,0(4,R1)    IS LOWEST DATE LT NEW LOW DATE
         BL    TSTDTEI3            YES, NEW LOW DATE NOT LOWER
         ZAP   LOWIDATE,0(4,R1)    MOVE NEW LOW DATE TO LOWEST DATE
TSTDTEI3 CP    HIIDATE,4(4,R1)     IS HIGHEST DATE GT NEW HI DATE
         BH    TSTDTEI4            YES, NEW HI DATE NOT HIGHER
         CP    MAXDATE,4(4,R1)     IS NEW HIGH DATE = DEFAULT HI DATE
         BE    TSTDTEI4            YES, IGNORE IT
         ZAP   HIIDATE,4(4,R1)     MOVE NEW HI DATE TO HIGHEST DATE
TSTDTEI4 LA    R1,08(,R1)          INCREMENT TO NEXT DATE ENTRY
         B     TSTDTEI2            LOOP THROUGH ALL DATE RANGES
TSTDTEI5 CP    HIIDATE,=P'0'       SEE IF MAX HIGH DATE SET
         BNE   TSTDTEI6            YES, NO REASON TO SET DEFAULT
         ZAP   HIIDATE,MAXDATE     NO, SET HIGHEST DATE TO 2099.365
TSTDTEI6 DS    0H
***********************************************************************
*        GET LOWEST START TIME AND HIGHEST START TIME FROM THE        *
*        TWO TIMES OF EACH RANGE                                      *
*                                                                     *
*        DO NOT SAVE SECOND TIME OF RANGE IF IT IS THE DEFAULT        *
***********************************************************************
TSTTMES  ICM   R1,B'1111',STIMETBL LOAD ADDRESS OF TIME TABLE
         BNZ   TSTTMES1            NOT ZERO, SOME TIME ENTERED
         ICM   R1,B'1111',ETIMETBL LOAD ADDRESS OF TIME TABLE
         BZ    WARN096             ZERO, NO TIME, WARNING MESSAGE
TSTTMES1 ICM   R1,B'1111',STIMETBL LOAD ADDRESS OF TIME TABLE
         BZ    TSTTMES5            ZERO, NO START TIMES
TSTTMES2 CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    TSTTMES5            YES, DONE WITH TABLE
         CLC   LOWITIME,0(R1)      IS LOWEST TIME LT NEW LOW ST TIME
         BL    TSTTMES3            YES, NEW LOW ST TIME NOT LOWER
         MVC   LOWITIME,0(R1)      MOVE NEW LOW ST TIME TO LOWEST TIME
TSTTMES3 CLC   HIITIME,4(R1)       IS HIGHEST TIME GT NEW HI ST TIME
         BH    TSTTMES4            YES, NEW HI ST TIME NOT HIGHER
         CLC   MAXTIME,4(R1)       SEE IF NEW HI ST TIME = 99.99
         BE    TSTTMES4            YES, HI ST TIME NOT SPECIFIED
         MVC   HIITIME,4(R1)       MOVE NEW HI ST TIME TO HIGHEST TIME
TSTTMES4 LA    R1,08(,R1)          INCREMENT TO NEXT TIME ENTRY
         B     TSTTMES2            LOOP THROUGH ALL TIME RANGES
TSTTMES5 DS    0H
***********************************************************************
*        GET LOWEST END TIME AND HIGHEST END TIME FROM THE            *
*        TWO TIMES OF EACH RANGE                                      *
*                                                                     *
*        IF THE SECOND TIME OF THE RANGE IS THE DEFAULT, THEN         *
*        CONSIDER THE FIRST TIME THE HIGH TIME OF THE RANGE           *
***********************************************************************
TSTTMEE  ICM   R1,B'1111',ETIMETBL LOAD ADDRESS OF TIME TABLE
         BZ    TSTTMEE5            ZERO, NO END TIMES, TEST RESULTS
TSTTMEE1 CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    TSTTMEE5            YES, DONE WITH TABLE
         CLC   MAXTIME,4(R1)       SEE IF NEW HI END TIME = 99.99
         BNE   TSTTMEE2            NO, CONTINUE
         MVC   4(4,R1),0(R1)       YES, SET NEW HI END TIME TO LOW
         B     TSTTMEE3            SKIP OVER THE LOWEST TIME STUFF
TSTTMEE2 CLC   LOWITIME,0(R1)      IS LOWEST TIME LT NEW LOW END TIME
         BL    TSTTMEE3            YES, NEW LOW END TIME NOT LOWER
         MVC   LOWITIME,0(R1)      MOVE NEW LOW END TIME TO LOWEST TIME
TSTTMEE3 CLC   HIITIME,4(R1)       IS HIGHEST TIME GT NEW HI END TIME
         BH    TSTTMEE4            YES, NEW HI END TIME NOT HIGHER
         CLC   MAXTIME,4(R1)       SEE IF NEW HI END TIME = 99.99
         BE    TSTTMEE4            YES, HI END TIME NOT SPECIFIED
         MVC   HIITIME,4(R1)       MOVE NEW HI END TIME TO HIGHEST TIME
TSTTMEE4 LA    R1,08(,R1)          INCREMENT TO NEXT TIME ENTRY
         B     TSTTMEE1            LOOP THROUGH ALL TIME RANGES
***********************************************************************
*        TEST RESULTS OF START AND END TIMES SEARCHES                 *
***********************************************************************
TSTTMEE5 CLC   LOWITIME,MAXTIME    SEE IF LOWEST TIME SET
         BNE   TSTTMEE6            YES, NO REASON TO SET DEFAULT
         MVC   LOWITIME,=F'0'      NO, SET LOWEST TIME TO 00.00
TSTTMEE6 CLC   HIITIME,=F'0'       SEE IF HIGHEST TIME SET
         BNE   TSTTMEE7            YES, NO REASON TO SET DEFAULT
         MVC   HIITIME,MAXTIME     NO, SET HIGHEST TIME TO 99.99
TSTTMEE7 DS    0H
***********************************************************************
*        PRINT THE TIME INCLUSIVE VALUES TO SYSPRINT                  *
***********************************************************************
INCPRT   ZAP   DATEGREG,=P'0'      ZERO THE GREGORIAN DATE
         CALL  DATERTN,(JG,LOWIDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   WORK(12),=X'402120202020612020612020' SET EDIT MASK
         ED    WORK(12),DATEGREG   EDIT THE LOW INC DATE
         MVC   INCSDATE,WORK+2     MOVE LOW INC DATE TO RECORD
         ICM   R1,15,LOWITIME      LOAD LOW INC TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   INCSTIME,OUTTIME+1  MOVE LOW INC TIME (HH:MM) TO RECORD
         ZAP   DATEGREG,=P'0'      ZERO THE GREGORIAN DATE
         CALL  DATERTN,(JG,HIIDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   WORK(12),=X'402120202020612020612020' SET EDIT MASK
         ED    WORK(12),DATEGREG   EDIT THE LOW INC DATE
         MVC   INCEDATE,WORK+2     MOVE HI INC DATE TO RECORD
         ICM   R1,15,HIITIME       LOAD HI INC TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   INCETIME,OUTTIME+1  MOVE HI INC TIME (HH:MM) TO RECORD
         PUT   SYSPRINT,INCLREC    WRITE THE INCLUSIVE INFORMATION REC
         B     NOSYSIN             SKIP OVER CONSTANTS
MAXTIME  DC    AL4((99*360000)+(99*6000))  MAX TIME (99.99)
MAXDATE  DC    PL4'2099365'                MAX DATE (2099.365)
NOSYSIN  DS    0H
***********************************************************************
*                                                                     *
*        SET UP DEFAULT PRINT OPTIONS IF NECESSARY.                   *
*                                                                     *
***********************************************************************
PRDFLT   TM    SWITCH+4,SELPRINT   SEE IF PRINT OPTION SPECIFIED
         BO    PRSETUP             YES, DO NOT SET DEFAULTS
         L     R1,=V(PRTOPT)       LOAD ADDRESS OF PRINT OPTIONS
         L     R2,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRDFLT1  CLI   0(R2),X'FF'         END OF TABLE
         BE    PRSETUP             YES, QUIT
         CLI   23(R2),0            SEE IF PRINT SEQUENCE SPECIFIED
         BNE   PRDFLT3             YES, BRANCH
PRDFLT2  LA    R2,36(,R2)          INCREMENT TO NEXT TABLE ENTRY
         B     PRDFLT1             LOOP
PRDFLT3  SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,23(R2)          LOAD DEFAULT PR SEQUENCE NUMBER
         BCTR  R15,0               MAKE RELATIVE TO ZERO
         MH    R15,=H'6'           MULTIPLY BY LENGTH OF EACH ENTRY
         AR    R15,R1              POINT TO PROPER ENTRY
         MVI   0(R15),C'Y'         TURN ON PRINTABLE INDICATOR
         MVC   4(2,R15),2(R2)      SAVE INDEX FROM OPTION TABLE
         B     PRDFLT2             GO PROCESS NEXT OPTION ENTRY
         EJECT
***********************************************************************
*                                                                     *
*        WARNING ROUTINES                                             *
*                                                                     *
*        THESE ROUTINES WILL PERFORM SOME ACTION SUCH AS              *
*        PRINTING A WARNING MESSAGE AND RETURN TO SOME POINT          *
*        IN THE PROGRAM TO CONTINUE PROCESSING.                       *
*                                                                     *
***********************************************************************
WARN095  MVI   WARNREC+1,C' '      BLANK ENTIRE
         MVC   WARNREC+2(131),WARNREC+1   WARNING RECORD
         LA    R15,95              LOAD MESSAGE INDEX
         BCTR  R15,0               MAKE ERROR RELATIVE TO ZERO
         MH    R15,=H'120'         MULTIPLY BY LENGTH OF EACH ENTRY
         A     R15,=V(MSGTBL)      CALCULATE ADDRESS OF THIS ENTRY
         MVC   WARNREC+31(100),0(R15) MOVE MESSAGE TO WARNING RECORD
         PUT   SYSPRINT,WARNREC    WRITE WARNING MESSAGE
         NI    SWITCH+7,255-SELTIMEI TURN OFF TIMEINCLUSIVE IND
         B     NOSYSIN             CONTINUE
         SPACE 3
WARN096  MVI   WARNREC+1,C' '      BLANK ENTIRE
         MVC   WARNREC+2(131),WARNREC+1   WARNING RECORD
         LA    R15,96              LOAD MESSAGE INDEX
         BCTR  R15,0               MAKE ERROR RELATIVE TO ZERO
         MH    R15,=H'120'         MULTIPLY BY LENGTH OF EACH ENTRY
         A     R15,=V(MSGTBL)      CALCULATE ADDRESS OF THIS ENTRY
         MVC   WARNREC+31(100),0(R15) MOVE MESSAGE TO WARNING RECORD
         PUT   SYSPRINT,WARNREC    WRITE WARNING MESSAGE
         NI    SWITCH+7,255-SELTIMEI TURN OFF TIMEINCLUSIVE IND
         B     NOSYSIN             CONTINUE
         EJECT
***********************************************************************
*                                                                     *
*        COMPLETE SETUP FOR THE SPECIFIED OR DEFAULT PRINT            *
*        OPTIONS.  EACH PRINT FIELD HAS A PROCESSING ROUTINE          *
*        TO SET THE HEADING VALUES AND ESTABLISH THE OFFSET           *
*        WITHIN THE DETAIL RECORD FOR OUPTUT PROCESSING.              *
*                                                                     *
***********************************************************************
PRSETUP  L     R1,=V(PRTOPT)       LOAD ADDRESS OF PRINT OPTIONS
         CLI   0(R1),C'Y'          MAKE SURE AT ONE FIELDS PRINTED
         BNE   ERROR046            NO, ERROR
         LA    R2,HEAD2A+1         POINT TO 1ST VARIABLE HEAD LINE
         LA    R3,HEAD2B+1         POINT TO 2ND VARIABLE HEAD LINE
         LA    R4,1                SET LINE LENGTH TO 1
PRSETUP1 CLI   0(R1),X'FF'         PHYSICAL END OF TABLE
         BE    PRSETUP4            YES, BRANCH
         CLI   0(R1),C'N'          LOGICAL END OF TABLE
         BE    PRSETUP4            YES, BRANCH
         LH    R15,4(R1)           LOAD BRANCH TABLE OFFSET
         B     PRSETUP2(R15)       BRANCH TO PROPER ROUTINE BY INDEX
PRSETUP2 B     SETJOBNM            INDEX = 00
         B     SETJOBNO            INDEX = 04
         B     SETSJDTE            INDEX = 08
         B     SETSTIME            INDEX = 12
         B     SETSYSID            INDEX = 16
         B     SETPSTEP            INDEX = 20
         B     SETJSTEP            INDEX = 24
         B     SETPGM              INDEX = 28
         B     SETUID              INDEX = 32
         B     SETCCODE            INDEX = 36
         B     SETELAP             INDEX = 40
         B     SETEXCP             INDEX = 44
         B     SETCPUT             INDEX = 48
         B     SETRGNB             INDEX = 52
         B     SETRGNA             INDEX = 56
         B     SETTAPE             INDEX = 60
         B     SETCPUP             INDEX = 64
         B     SETJTYPE            INDEX = 68
         B     ERROR047            INDEX = 72
         B     ERROR047            INDEX = 76
         B     ERROR047            INDEX = 80
         B     ERROR047            INDEX = 84
         B     ERROR047            INDEX = 88
         B     ERROR047            INDEX = 92
         B     ERROR047            INDEX = 96
         B     ERROR047            INDEX = 100
         B     ERROR047            INDEX = 104
         B     SETPTAPE            INDEX = 108
         B     SETSTAPE            INDEX = 112
         B     SETEXPPG            INDEX = 116
         B     SETAUXPG            INDEX = 120
         B     SETTSUS             INDEX = 124
         B     ERROR047            INDEX = 128
         B     ERROR047            INDEX = 132
         B     ERROR047            INDEX = 136
         B     SETVIOPG            INDEX = 140
         B     ERROR047            INDEX = 144
         B     ERROR047            INDEX = 148
         B     ERROR047            INDEX = 152
         B     ERROR047            INDEX = 156
         B     ERROR047            INDEX = 160
         B     ERROR047            INDEX = 164
         B     ERROR047            INDEX = 168
         B     ERROR047            INDEX = 172
         B     ERROR047            INDEX = 176
         B     ERROR047            INDEX = 180
         B     ERROR047            INDEX = 184
         B     ERROR047            INDEX = 188
         B     ERROR047            INDEX = 192
         B     ERROR047            INDEX = 196
         B     ERROR047            INDEX = 200
         B     ERROR047            INDEX = 204
         B     ERROR047            INDEX = 208
         B     ERROR047            INDEX = 212
         B     ERROR047            INDEX = 216
         B     ERROR047            INDEX = 220
         B     ERROR047            INDEX = 224
         B     ERROR047            INDEX = 228
         B     ERROR047            INDEX = 232
         B     ERROR047            INDEX = 236
         B     ERROR047            INDEX = 240
         B     ERROR047            INDEX = 244
         B     ERROR047            INDEX = 248
         B     SETSDAY             INDEX = 252
         B     ERROR047            INDEX = 256
         B     ERROR047            INDEX = 260
         B     SETEJDTE            INDEX = 264
         B     SETETIME            INDEX = 268
         B     SETEDAY             INDEX = 272
         B     SETSGDTE            INDEX = 276
         B     SETEGDTE            INDEX = 280
         B     ERROR047            INDEX = 284
         B     ERROR047            INDEX = 288
         B     SETCSUS             INDEX = 292
         B     SETISUS             INDEX = 296
         B     SETMSUS             INDEX = 300
         B     SETSSUS             INDEX = 304
         B     ERROR047            INDEX = 308
         B     ERROR047            INDEX = 312
         B     ERROR047            INDEX = 316
         B     ERROR047            INDEX = 320
         B     ERROR047            INDEX = 324
         B     SETZAAT             INDEX = 328
         B     SETZIIT             INDEX = 332
         B     SETSPET             INDEX = 336
         B     ERROR047            INDEX = 340
PRSETUP3 LA    R1,6(,R1)           INCREMENT TO NEXT TABLE ENTRY
         B     PRSETUP1            LOOP
PRSETUP4 CH    R4,=H'134'          SEE IF EXCEEDS MAX LEN (133 + 1)
         BH    ERROR048            YES, ERROR
         B     CHECKIN             NO, GO READ SMF DATA
         EJECT
***********************************************************************
*        SETUP FOR JOB NAME                                           *
***********************************************************************
SETJOBNM MVC   0(8,R2),=CL8'  JOB   '
         MVC   0(8,R3),=CL8'  NAME  '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR JOB NUMBER                                         *
***********************************************************************
SETJOBNO MVC   0(8,R2),=CL8'  JOB   '
         MVC   0(8,R3),=CL8' NUMBER '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR START JULIAN DATE                                  *
***********************************************************************
SETSJDTE MVC   0(8,R2),=CL8' START  '
         MVC   0(8,R3),=CL8' DATE   '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR END JULIAN DATE                                    *
***********************************************************************
SETEJDTE MVC   0(8,R2),=CL8'  END   '
         MVC   0(8,R3),=CL8' DATE   '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR START GREGORIAN DATE                               *
***********************************************************************
SETSGDTE MVC   0(10,R2),=CL10'  START   '
         MVC   0(10,R3),=CL10'  DATE    '
         LA    R14,10              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR END GREGORIAN DATE                                 *
***********************************************************************
SETEGDTE MVC   0(10,R2),=CL10'   END    '
         MVC   0(10,R3),=CL10'  DATE    '
         LA    R14,10              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR START TIME                                         *
***********************************************************************
SETSTIME MVC   0(5,R2),=CL5'START '
         MVC   0(5,R3),=CL5'TIME'
         LA    R14,5               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR END TIME                                           *
***********************************************************************
SETETIME MVC   0(5,R2),=CL5' END  '
         MVC   0(5,R3),=CL5'TIME'
         LA    R14,5               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR SYSTEM ID                                          *
***********************************************************************
SETSYSID MVC   0(4,R2),=CL4' SYS'
         MVC   0(4,R3),=CL4' ID '
         LA    R14,4               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR PROC STEP NAME                                     *
***********************************************************************
SETPSTEP MVC   0(8,R2),=CL8'  PROC  '
         MVC   0(8,R3),=CL8'  STEP  '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR JOB STEP NAME                                      *
***********************************************************************
SETJSTEP MVC   0(8,R2),=CL8'  JOB   '
         MVC   0(8,R3),=CL8'  STEP  '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR PROGRAM NAME                                       *
***********************************************************************
SETPGM   MVC   0(8,R2),=CL8' PROGRAM'
         MVC   0(8,R3),=CL8'  NAME  '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR SECURITY USERID                                    *
***********************************************************************
SETUID   MVC   0(8,R2),=CL8'  USER  '
         MVC   0(8,R3),=CL8'   ID   '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR CONDITION CODE                                     *
***********************************************************************
SETCCODE MVC   0(5,R2),=CL5'COND '
         MVC   0(5,R3),=CL5'CODE '
         LA    R14,5               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR ELAPSED TIME                                       *
***********************************************************************
SETELAP  MVC   0(9,R2),=CL9' ELAPSED '
         MVC   0(9,R3),=CL9'  TIME   '
         LA    R14,9               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR TOTAL I/O                                          *
***********************************************************************
SETEXCP  MVC   0(10,R2),=CL10'  TOTAL   '
         MVC   0(10,R3),=CL10'   I/O    '
         LA    R14,10              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR CPU TIME                                           *
***********************************************************************
SETCPUT  TM    SWITCH+8,CPUFRACT   DISPLAY CPU TIME IN 1/100?
         BO    SETCPUTH            YES, BRANCH
         MVC   0(7,R2),=CL7'  CPU  '
         MVC   0(7,R3),=CL7'  TIME '
         LA    R14,7               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR CPU TIME INCLUDING TENTHS AND HUNDREDTHS
***********************************************************************
SETCPUTH MVC   0(10,R2),=CL10'  CPU TIME'
         MVC   0(10,R3),=CL10'MMMM:SS.TH'
         LA    R14,10              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR ZAAP CPU TIME                                      *
***********************************************************************
SETZAAT  TM    SWITCH+8,CPUFRACT   DISPLAY ZAAP CPU TIME IN 1/100?
         BO    SETZAATH            YES, BRANCH
         MVC   0(7,R2),=CL7'ZAAP CP'
         MVC   0(7,R3),=CL7' TIME  '
         LA    R14,7               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR ZAAP CPU TIME INCLUDING TENTHS AND HUNDREDTHS
***********************************************************************
SETZAATH MVC   0(10,R2),=CL10' ZAAP CPU '
         MVC   0(10,R3),=CL10'MMMM:SS.TH'
         LA    R14,10              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR ZIIP CPU TIME                                      *
***********************************************************************
SETZIIT  TM    SWITCH+8,CPUFRACT   DISPLAY ZIIP CPU TIME IN 1/100?
         BO    SETZIITH            YES, BRANCH
         MVC   0(7,R2),=CL7'ZIIP CP'
         MVC   0(7,R3),=CL7' TIME  '
         LA    R14,7               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR ZIIP CPU TIME INCLUDING TENTHS AND HUNDREDTHS
***********************************************************************
SETZIITH MVC   0(10,R2),=CL10' ZIIP CPU '
         MVC   0(10,R3),=CL10'MMMM:SS.TH'
         LA    R14,10              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR SPECIALTY ENGINE CPU TIME                          *
***********************************************************************
SETSPET  TM    SWITCH+8,CPUFRACT   DISPLAY SPECIALTY CPU TIME IN 1/100?
         BO    SETSPETH            YES, BRANCH
         MVC   0(7,R2),=CL7'SPEC CP'
         MVC   0(7,R3),=CL7' TIME  '
         LA    R14,7               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR SPECIALTY ENGINE CPU TIME INCLUDING
*        TENTHS AND HUNDREDTHS
***********************************************************************
SETSPETH MVC   0(10,R2),=CL10' SPEC CPU '
         MVC   0(10,R3),=CL10'MMMM:SS.TH'
         LA    R14,10              LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR REGION BELOW                                       *
***********************************************************************
SETRGNB  MVC   0(7,R2),=CL7' REGION   '
         MVC   0(7,R3),=CL7' BELOW    '
         LA    R14,7               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR REGION ABOVE                                       *
***********************************************************************
SETRGNA  MVC   0(7,R2),=CL7' REGION   '
         MVC   0(7,R3),=CL7' ABOVE    '
         LA    R14,7               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR TAPE MOUNTS                                        *
***********************************************************************
SETTAPE  MVC   0(3,R2),=CL3'TOT'
         MVC   0(3,R3),=CL3'TPS'
         LA    R14,3               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR CPU PERCENT                                        *
***********************************************************************
SETCPUP  MVC   0(3,R2),=CL3'CPU'
         MVC   0(3,R3),=CL3' % '
         LA    R14,3               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR JOB TYPE                                           *
***********************************************************************
SETJTYPE MVC   0(1,R2),=CL1'T'
         MVC   0(1,R3),=CL1'Y'
         LA    R14,1               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR NON-SCRATCH TAPES                                  *
***********************************************************************
SETPTAPE MVC   0(3,R2),=CL3'PER'
         MVC   0(3,R3),=CL3'TPS'
         LA    R14,3               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR SCRATCH TAPES                                      *
***********************************************************************
SETSTAPE MVC   0(3,R2),=CL3'SCR'
         MVC   0(3,R3),=CL3'TPS'
         LA    R14,3               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR EXPANDED STORAGE PAGING                            *
***********************************************************************
SETEXPPG MVC   0(8,R2),=CL8'   EXP  '
         MVC   0(8,R3),=CL8'  PAGES '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR AUXILLARY STORAGE PAGING                           *
***********************************************************************
SETAUXPG MVC   0(8,R2),=CL8'   AUX  '
         MVC   0(8,R3),=CL8'  PAGES '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR TOTAL SERVICE UNITS                                *
***********************************************************************
SETTSUS  MVC   0(9,R2),=CL9'  TOTAL  '
         MVC   0(9,R3),=CL9'SERV UNIT'
         LA    R14,9               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR CPU   SERVICE UNITS                                *
***********************************************************************
SETCSUS  MVC   0(9,R2),=CL9'   CPU   '
         MVC   0(9,R3),=CL9'SERV UNIT'
         LA    R14,9               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR I/O   SERVICE UNITS                                *
***********************************************************************
SETISUS  MVC   0(9,R2),=CL9'   I/O   '
         MVC   0(9,R3),=CL9'SERV UNIT'
         LA    R14,9               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR MSO   SERVICE UNITS                                *
***********************************************************************
SETMSUS  MVC   0(9,R2),=CL9'   MSU   '
         MVC   0(9,R3),=CL9'SERV UNIT'
         LA    R14,9               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
***********************************************************************
*        SETUP FOR SRB   SERVICE UNITS                                *
***********************************************************************
SETSSUS  MVC   0(9,R2),=CL9'   SRB   '
         MVC   0(9,R3),=CL9'SERV UNIT'
         LA    R14,9               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR VIO PAGING                                         *
***********************************************************************
SETVIOPG MVC   0(8,R2),=CL8'   VIO  '
         MVC   0(8,R3),=CL8'  PAGES '
         LA    R14,8               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR START DAY-OF-THE-WEEK                              *
***********************************************************************
SETSDAY  MVC   0(4,R2),=CL4'SDAY'
         MVC   0(4,R3),=CL4' WK '
         LA    R14,4               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP FOR END   DAY-OF-THE-WEEK                              *
***********************************************************************
SETEDAY  MVC   0(4,R2),=CL4'EDAY'
         MVC   0(4,R3),=CL4' WK '
         LA    R14,4               LOAD LENGTH OF FIELD
         B     SETCOMM             GO SET VALUES COMMON TO ALL
         SPACE
***********************************************************************
*        SETUP COMMON ROUTINE                                         *
***********************************************************************
SETCOMM  STH   R4,2(R1)            SAVE OFFSET VALUE
         LA    R2,1(R14,R2)        INCREMENT HEAD2A
         LA    R3,1(R14,R3)        INCREMENT HEAD2B
         LA    R4,1(R14,R4)        INCREMENT OFFSET POINTER
         B     PRSETUP3            GO PROCESS NEXT TABLE ENTRY
         EJECT
***********************************************************************
*                                                                     *
*        GET READY TO PROCESS SMF DATA                                *
*                                                                     *
***********************************************************************
CHECKIN  MVC   DDNAME,=CL8'SMFIN'  SET DDNAME TO 'SMFIN'
         L     R15,=V(FINDDN)      LOAD ADDRESS OF TIOT SEARCH ROUTINE
         BALR  R14,R15             GO SEARCH TIOT FOR DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   ERROR031            NOT ZERO, ERROR
OPENIN   OPEN  (SMFIN,(INPUT))     OPEN INPUT FILE
CKOPTION TM    SWITCH,SELSORT      WAS SORTING SELECTED?
         BNO   READIN              NO, BYPASS SORT
         LA    R1,SORTPARM         LOAD ADDRESS OF SORT PARMS
         LINK  EP=SORT             GO TO SORT
         B     ENDJOB              GO END THE JOB
READIN   L     R15,=V(READRTN)     LOAD ADDRESS OF READ SMF ROUTINE
         BALR  R14,R15             GO READ SMF ROUTINE
         TM    SWITCH,ENDFILE      END OF FILE?
         BO    ENDJOB              YES, BRANCH
         L     R15,OUTCNT          LOAD OUTPUT COUNT
         LA    R15,1(,R15)         ADD 1 TO OUTPUT COUNT
         ST    R15,OUTCNT          SAVE NEW OUTPUT COUNT
         TM    SWITCH+3,SELSTCNT   SEE IF STOP COUNT ENTERED
         BNO   READIN1             NO, BRANCH
         C     R15,VALSTCNT        SEE IF EXCEEDS STOP COUNT
         BH    READIN              YES, DROP THIS RECORD
READIN1  L     R15,=V(FORMAT)      LOAD ADDRESS OF FORMAT ROUTINE
         BALR  R14,R15             GO FORMAT PRINT RECORD
         L     R15,=V(CKSEQ)       LOAD ADDRESS OF CK SEQUENCE ROUTINE
         BALR  R14,R15             GO CHECK SEQUENCE
         LTR   R15,R15             TEST RETURN CODE
         BZ    READIN2             ZERO, NO SEQUENCE CHANGE
         LR    R1,R15              SAVE RETURN CODE (FIELD NUMBER)
         L     R15,=V(SUBTOT)      LOAD ADDRESS OF PRINT SUBTOTALS RTN
         BALR  R14,R15             GO PRINT SUBTOTALS
READIN2  L     R15,=V(ADDACC)      LOAD ADDRESS OF ADD TO ACCUM ROUTINE
         BALR  R14,R15             GO ADD TO ACCUMULATORS
         MVC   PREVFLDS(40),CURRFLDS SET PREV SEQUENCE TO CURRENT
         TM    SWITCH+4,SELNODET   SEE IF DETAIL REPORT DESIRED
         BO    READIN              NO, BYPASS THE PRINT ROUTINE
         CP    LINECT,=P'55'       SEE IF PAGE IS FULL
         BNH   PUTDET              NO, BRANCH
         AP    PAGECT,=P'1'        ADD 1 TO PAGE COUNT
         MVC   OPAGCT,=X'402020202120' MOVE EDIT MASK TO HEAD 1
         ED    OPAGCT,PAGECT       EDIT PAGE COUNT TO HEAD 1
PUTHD1   PUT   SYSPRINT,HEAD1      PRINT HEADING LINE 1
PUTHD2   PUT   SYSPRINT,HEAD2A     PRINT HEADING LINE 2A
         PUT   SYSPRINT,HEAD2B     PRINT HEADING LINE 2B
         ZAP   LINECT,=P'4'        SET LINE COUNT TO 4
         MVI   DETAIL,C'0'         SET NEXT DETAIL TO DOUBLE SPACE
PUTDET   PUT   SYSPRINT,DETAIL     PRINT DETAIL LINE
         AP    LINECT,=P'1'        ADD 1 TO LINE COUNT
         CLI   DETAIL,C' '         SINGLE SPACED?
         BE    PUTDET1             YES, GET OUT
         AP    LINECT,=P'1'        ADD 1 MORE TO LINE COUNT
         CLI   DETAIL,C'0'         DOUBLE SPACED?
         BE    PUTDET1             YES, GET OUT
         AP    LINECT,=P'1'        ADD 1 MORE TO LINE COUNT
PUTDET1  MVI   DETAIL,C' '         SET NEXT DETAIL TO SINGLE SPACE
         B     READIN              GO GET ANOTHER INPUT RECORD
         EJECT
***********************************************************************
*                                                                     *
*        WRITE TOTALS AND AVERAGES IF REQUESTED                       *
*                                                                     *
***********************************************************************
ENDJOB   L     R15,=V(ADDACC)      LOAD ADDRESS OF ADD ACCUMULATORS RTN
         BALR  R14,R15             GO ADD TO ACCUMULATORS
         MVC   PREVFLDS(40),CURRFLDS SET PREF SEQUENCE TO CURRENT
         TM    SWITCH+4,SELTOT     SEE IF TOTALS REQUESTED
         BNO   CLOSE               NO, GET OUT
***********************************************************************
*                                                                     *
*        WRITE SUBTOTALS                                              *
*                                                                     *
***********************************************************************
         LA    R1,1                SET TO PRINT ALL SUBTOTALS
         L     R15,=V(SUBTOT)      LOAD ADDRESS OF PRINT SUBTOTALS RTN
         BALR  R14,R15             GO PRINT SUBTOTALS
***********************************************************************
*                                                                     *
*        WRITE GRAND TOTALS                                           *
*                                                                     *
***********************************************************************
         AP    PAGECT,=P'1'        ADD 1 TO PAGE COUNT
         MVC   OPAGCT,=X'402020202120' MOVE EDIT MASK TO HEAD 1
         ED    OPAGCT,PAGECT       EDIT PAGE COUNT TO HEAD 1
         PUT   SYSPRINT,HEAD1      PRINT HEADING LINE 1
         ZAP   DATEGREG,=P'0'      ZERO THE GREGORIAN DATE
         CALL  DATERTN,(JG,LOWDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   WORK(12),=X'402120202020612020612020' SET EDIT MASK
         ED    WORK(12),DATEGREG   EDIT THE LOW DATE
         MVC   HLDATE,WORK+2       MOVE LOW DATE TO HEADING
         ICM   R1,15,LOWTIME       LOAD LOW TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   HLTIME,OUTTIME+1    MOVE TIME (HH:MM) TO HEADING
         ZAP   DATEGREG,=P'0'      ZERO THE GREGORIAN DATE
         CALL  DATERTN,(JG,HIGHDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   WORK(12),=X'402120202020612020612020' SET EDIT MASK
         ED    WORK(12),DATEGREG   EDIT THE HIGH DATE
         MVC   HHDATE,WORK+2       MOVE HIGH DATE TO HEADING
         ICM   R1,15,HIGHTIME      LOAD HIGH TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   HHTIME,OUTTIME+1    MOVE TIME (HH:MM) TO HEADING
         PUT   SYSPRINT,HEAD3      PRINT HEADING LINE 3
         MVI   DETAIL,C' '         BLANK ENTIRE
         MVC   DETAIL+1(132),DETAIL   DETAIL LINE
         MVI   DETAIL,C'0'         SET NEXT DETAIL TO DOUBLE SPACE
         ZAP   LINECT,=P'4'        SET LINE COUNT TO 4
         SPACE 3
***********************************************************************
*                                                                     *
*        MOVE THE TOTALS TO THE PRINT ACCUMULATORS FOR THE COMMON     *
*        (SUB)TOTALS PRINT ROUTINE TO USE                             *
*                                                                     *
*        THEN CALL THE COMMON (SUB)TOTALS PRINT ROUTINE               *
*                                                                     *
***********************************************************************
         L     R6,=V(ACCUM)        POINT TO ACCUMULATORS
         USING ACCUM,R6            SET ADDRESSABILITY TO ACCUMULATORS
         LA    R14,ACCST           GET ADDRESS OF TOTALS ACCUMULATORS
         LH    R15,=H'320'         LOAD LENGTH OF 20 ACCUMULATORS
         LA    R0,SACC1            GET ADDRESS OF PRINT ACCUMULATORS
         LH    R1,=H'320'          LOAD LENGTH OF 20 ACCUMULATORS
         MVCL  R0,R14              SET PRINT ACCUMULATORS
         LA    R1,0                SET NUMBER OF SEQUENCE FIELDS TO 0
         L     R15,=V(PTOTALN)     LOAD PRINT TOTALS ROUTINE
         BALR  R14,R15             GO PRINT TOTALS
         DROP  R6                  DROP ADDRESSABILITY TO ACCUMULATORS
         EJECT
***********************************************************************
*                                                                     *
*        CLOSE FILES AND TERMINATE THE PROGRAM                        *
*                                                                     *
***********************************************************************
CLOSE    ICM   R1,B'1111',JOBNMTBL SEE IF JOBNAME TABLE ALLOCATED
         BZ    CLOSE1              NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE JOBNAME TABLE
CLOSE1   ICM   R1,B'1111',JOBNOTBL SEE IF JOB NUMBER TABLE ALLOCATED
         BZ    CLOSE2              NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE JOB NUMBER TABLE
CLOSE2   ICM   R1,B'1111',DATETBL  SEE IF DATE TABLE ALLOCATED
         BZ    CLOSE3              NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE DATE TABLE
CLOSE3   ICM   R1,B'1111',STIMETBL SEE IF START TIME TABLE ALLOCATED
         BZ    CLOSE3A             NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE TIME TABLE
CLOSE3A  ICM   R1,B'1111',ETIMETBL SEE IF END TIME TABLE ALLOCATED
         BZ    CLOSE4              NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE TIME TABLE
CLOSE4   ICM   R1,B'1111',SYSIDTBL SEE IF SYSID TABLE ALLOCATED
         BZ    CLOSE5              NO, BRANCH
         FREEMAIN R,LV=4004,A=(1)  FREE SYSID TABLE
CLOSE5   ICM   R1,B'1111',PSTEPTBL SEE IF PROC STEP TABLE ALLOCATED
         BZ    CLOSE6              NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE PROC STEP TABLE
CLOSE6   ICM   R1,B'1111',JSTEPTBL SEE IF JOB STEP TABLE ALLOCATED
         BZ    CLOSE7              NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE JOB STEP TABLE
CLOSE7   ICM   R1,B'1111',PGMTBL   SEE IF PGM NAME TABLE ALLOCATED
         BZ    CLOSE8              NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE PGM NAME TABLE
CLOSE8   ICM   R1,B'1111',UIDTBL   SEE IF USERID TABLE ALLOCATED
         BZ    CLOSE9              NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE SECURITY USERID TABLE
CLOSE9   ICM   R1,B'1111',CCTBL    SEE IF CCODE TABLE ALLOCATED
         BZ    CLOSE10             NO, BRANCH
         FREEMAIN R,LV=7007,A=(1)  FREE CCODE TABLE
CLOSE10  ICM   R1,B'1111',XJOBNTBL SEE IF EXJOBNAME TABLE ALLOCATED
         BZ    CLOSE11             NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE EXJOBNAME TABLE
CLOSE11  ICM   R1,B'1111',XJBNOTBL SEE IF EXJOBNO TABLE ALLOCATED
         BZ    CLOSE12             NO, BRANCH
         FREEMAIN R,LV=8008,A=(1)  FREE EXJOBNO TABLE
CLOSE12  ICM   R1,B'1111',XSYSTBL  SEE IF EXYSID TABLE ALLOCATED
         BZ    CLOSE13             NO, BRANCH
         FREEMAIN R,LV=4004,A=(1)  FREE EXSYSID TABLE
CLOSE13  ICM   R1,B'1111',XPSTPTBL SEE IF EXPSTEP TABLE ALLOCATED
         BZ    CLOSE14             NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE EXPSTEP TABLE
CLOSE14  ICM   R1,B'1111',XJSTPTBL SEE IF EXJSTEP TABLE ALLOCATED
         BZ    CLOSE15             NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE EXJSTEP TABLE
CLOSE15  ICM   R1,B'1111',XPGMTBL  SEE IF EXPGM NAME TABLE ALLOCATED
         BZ    CLOSE16             NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE EXPGM NAME TABLE
CLOSE16  ICM   R1,B'1111',XUIDTBL   SEE IF EXUSERID TABLE ALLOCATED
         BZ    CLOSE17             NO, BRANCH
         FREEMAIN R,LV=10010,A=(1) FREE EXSECURITY USERID TABLE
CLOSE17  ICM   R1,B'1111',XCCTBL   SEE IF EXCCODE TABLE ALLOCATED
         BZ    CLOSE18             NO, BRANCH
         FREEMAIN R,LV=7007,A=(1)  FREE EXCCODE TABLE
CLOSE18  TM    SWITCH+6,OPTOUT     SEE IF OPTIONAL OUTPUT FILE
         BNO   CLOSE19             NO, BRANCH
         CLOSE (DATAOUT)           CLOSE OPTIONAL OUTPUT FILE
CLOSE19  CLOSE (SYSPRINT,,SMFIN)   CLOSE SMF INPUT FILE AND PRINT FILE
         L     R13,4(R13)          RESTORE ORIG REGISTER 13
         RETURN (14,12),RC=0       RETURN TO O/S
***********************************************************************
*                                                                     *
*        ERROR ROUTINES                                               *
*                                                                     *
*        EACH ERROR ROUTINE WILL NORMALLY SET A MESSAGE INDEX         *
*        AND THEN LOAD THE APPROPRIATE MESSAGE FROM A MESSAGE         *
*        TABLE ACCORDING TO THAT INDEX.  THAT MESSAGE WILL BE         *
*        ISSUED AS A WTO AND THE PROGRAM ABENDED WITH A USER          *
*        ABEND WHICH ALSO MATCHES THE MESSAGE INDEX.                  *
*                                                                     *
***********************************************************************
ERROR013 LA    R15,13              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR030 LA    R15,30              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR031 LA    R15,31              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR046 LA    R15,46              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR047 LA    R15,47              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR048 LA    R15,48              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
ERROR090 LA    R15,90              LOAD MESSAGE INDEX
         B     ERROR999            GO TO COMMON ERROR ROUTINE
         SPACE 3
ERROR999 ST    R15,ABCODE          SAVE ABEND CODE
         BCTR  R15,0               MAKE ERROR RELATIVE TO ZERO
         MH    R15,=H'120'         MULTIPLY BY LENGTH OF EACH ENTRY
         A     R15,=V(MSGTBL)      CALCULATE ADDRESS OF THIS ENTRY
         MVC   MSGWTO+4(120),0(R15) MOVE MESSAGE TO WTO LIST FORM
         WTO   MF=(E,MSGWTO)       WRITE ERROR MESSAGE
         L     R1,ABCODE           LOAD ABEND CODE
         ABEND (R1),DUMP           ABEND THE PROGRAM
         SPACE 3
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*        SORT INPUT PROCEDURE IF SORT OPTION USED                     *
*                                                                     *
***********************************************************************
         CNOP  0,4
         PUSH  USING
E15      STM   R14,R12,12(R13)     SAVE REGISTERS
         USING E15,R9,R10,R11,R12  SET ADDRESSABILITY TO EXIT
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,E15SAVE         LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         LA    R3,SMFIN            LOAD ADDRESS OF INPUT DCB
E15READ  L     R15,=V(READRTN)     LOAD ADDRESS OF READ SMF ROUTINE
         BALR  R14,R15             GO READ SMF ROUTINE
         TM    SWITCH,ENDFILE      END OF FILE?
         BO    E15EOF              YES, BRANCH
E15RET   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LA    R15,INREC           POINT TO INPUT RECORD
         ST    R15,24(R13)         STORE ADDRESS OF RECORD IN SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,12              SET RETURN CODE TO 12
         BR    R14                 RETURN RECORD TO SORT
E15EOF   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,8               SET RETURN CODE TO 8
         BR    R14                 RETURN TO SORT FOR LAST TIME
         SPACE 3
         LTORG
E15SAVE  DS    18F                 SORT EXIT E15 SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
***********************************************************************
*                                                                     *
*        SORT OUTPUT PROCEDURE IF SORT OPTION USED                    *
*                                                                     *
***********************************************************************
         CNOP  0,4
         PUSH  USING
E35      STM   R14,R12,12(R13)     SAVE REGISTERS
         USING E35,R9,R10,R11,R12  SET ADDRESSABILITY TO EXIT
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,E35SAVE         LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         L     R5,0(R1)            SAVE INPUT RECORD ADDRESS
         LTR   R5,R5               TEST INPUT RECORD ADDRESS
         BZ    E35EOF              ZERO, END OF FILE
         MVC   INREC,0(R5)         SAVE INPUT RECORD
         L     R15,OUTCNT          LOAD OUTPUT COUNT
         LA    R15,1(,R15)         ADD 1 TO OUTPUT COUNT
         ST    R15,OUTCNT          SAVE NEW OUTPUT COUNT
         TM    SWITCH+3,SELSTCNT   SEE IF STOP COUNT ENTERED
         BNO   E35CONT             NO, BRANCH
         C     R15,VALSTCNT        SEE IF EXCEEDS STOP COUNT
         BH    E35RET              YES, DROP THIS RECORD
E35CONT  L     R15,=V(FORMAT)      LOAD ADDRESS OF FORMAT ROUTINE
         BALR  R14,R15             GO FORMAT PRINT RECORD
         L     R15,=V(CKSEQ)       LOAD ADDRESS OF CK SEQUENCE ROUTINE
         BALR  R14,R15             GO CHECK SEQUENCE
         LTR   R15,R15             TEST RETURN CODE
         BZ    E35CONT1            ZERO, NO SEQUENCE CHANGE
         LR    R1,R15              SAVE RETURN CODE (FIELD NUMBER)
         L     R15,=V(SUBTOT)      LOAD ADDRESS OF PRINT SUBTOTALS RTN
         BALR  R14,R15             GO PRINT SUBTOTALS
E35CONT1 L     R15,=V(ADDACC)      LOAD ADDRESS OF ADD TO ACCUM ROUTINE
         BALR  R14,R15             GO ADD TO ACCUMULATORS
         MVC   PREVFLDS(40),CURRFLDS SET PREF SEQUENCE TO CURRENT
         TM    SWITCH+4,SELNODET   SEE IF DETAIL REPORT DESIRED
         BO    E35RET              NO, BYPASS THE PRINT ROUTINE
         CP    LINECT,=P'55'       SEE IF PAGE IS FULL
         BNH   E35DET              NO, BRANCH
         AP    PAGECT,=P'1'        ADD 1 TO PAGE COUNT
         MVC   OPAGCT,=X'402020202120' MOVE EDIT MASK TO HEAD 1
         ED    OPAGCT,PAGECT       EDIT PAGE COUNT TO HEAD 1
E35HD1   PUT   SYSPRINT,HEAD1      PRINT HEADING LINE 1
E35HD2   PUT   SYSPRINT,HEAD2A     PRINT HEADING LINE 2A
         PUT   SYSPRINT,HEAD2B     PRINT HEADING LINE 2B
         ZAP   LINECT,=P'4'        SET LINE COUNT TO 4
         MVI   DETAIL,C'0'         SET NEXT DETAIL TO DOUBLE SPACE
E35DET   PUT   SYSPRINT,DETAIL     PRINT DETAIL LINE
         AP    LINECT,=P'1'        ADD 1 TO LINE COUNT
         CLI   DETAIL,C' '         SINGLE SPACED?
         BE    E35DET1             YES, GET OUT
         AP    LINECT,=P'1'        ADD 1 MORE TO LINE COUNT
         CLI   DETAIL,C'0'         DOUBLE SPACED?
         BE    E35DET1             YES, GET OUT
         AP    LINECT,=P'1'        ADD 1 MORE TO LINE COUNT
E35DET1  MVI   DETAIL,C' '         SET NEXT DETAIL TO SINGLE SPACE
E35RET   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,4               SET RETURN CODE TO 4
         BR    R14                 RETURN TO SORT FOR ANOTHER RECORD
E35EOF   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         LA    R15,8               SET RETURN CODE TO 8
         BR    R14                 RETURN TO SORT FOR LAST TIME
         SPACE 3
         LTORG
E35SAVE  DS    18F                 SORT EXIT E35 SAVE AREA
         SPACE 3
         DROP  R9,R10,R11,R12
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE WILL FORMAT THE OUTPUT PRINT RECORD FROM THE    *
*        SMF TYPE 6 RECORD POINTED TO BY REGISTER 5                   *
*                                                                     *
*        1)  REGISTER 15 ON ENTRY IS THE ROUTINE ENTRY POINT          *
*        2)  REGISTER 14 ON ENTRY IS THE RETURN ADDRESS               *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
FORMAT   CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING FORMAT,R9,R10,R11,R12  SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE2           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R6,=V(ACCUM)        POINT TO ACCUMULATORS
         USING ACCUM,R6            SET ADDRESSABILITY TO ACCUMULATORS
********************************************************************
*        SET OUTPUT JOB NAME                                       *
********************************************************************
         MVC   OJOBNAME,INJBN      MOVE SMF JOBNAME TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT JOB NUMBER                                     *
********************************************************************
         MVC   OJOBNO,INJNM        MOVE SMF JOB NO TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT START JULIAN DATE                              *
********************************************************************
         MVC   WORK(9),=X'40212020204B202020' SET EDIT MASK
         ED    WORK(9),INSJDATE    EDIT THE DATE
         MVC   OJSDATE,WORK+1      MOVE THE DATE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT END JULIAN DATE                                *
********************************************************************
         MVC   WORK(9),=X'40212020204B202020' SET EDIT MASK
         ED    WORK(9),INEJDATE    EDIT THE DATE
         MVC   OJEDATE,WORK+1      MOVE THE DATE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT START GREGORIAN DATE                           *
********************************************************************
         MVC   WORK(12),=X'402120202020612020612020' SET EDIT MASK
         ED    WORK(12),INSGDATE   EDIT THE DATE
         MVC   OGSDATE,WORK+2      MOVE THE DATE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT END GREGORIAN DATE                             *
********************************************************************
         MVC   WORK(12),=X'402120202020612020612020' SET EDIT MASK
         ED    WORK(12),INEGDATE   EDIT THE DATE
         MVC   OGEDATE,WORK+2      MOVE THE DATE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT START TIME                                     *
********************************************************************
         ICM   R1,15,INSTIME       LOAD TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   OSTIME,OUTTIME+1    MOVE TIME (HH:MM) TO DETAIL LINE
         SPACE 3
********************************************************************
*        SET OUTPUT END TIME                                       *
********************************************************************
         ICM   R1,15,INETIME       LOAD TIME TO REGISTER 1
         L     R15,=V(CNVTIME)     LOAD ADDRESS OF CONVERT TIME ROUTINE
         BALR  R14,R15             GO TO CONVERT TIME ROUTINE
         MVC   OETIME,OUTTIME+1    MOVE TIME (HH:MM) TO DETAIL LINE
         SPACE 3
********************************************************************
*        SET OUTPUT SYSTEM ID                                      *
********************************************************************
         MVC   OSYSID,INSID        MOVE SMF SYSTEM ID TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT PROC STEP NAME                                 *
********************************************************************
         MVC   OPSTEP,INPSN        MOVE PROC STEP NAME TO DETAIL LN
         SPACE 3
********************************************************************
*        SET OUTPUT JOB STEP NAME                                  *
********************************************************************
         MVC   OJSTEP,INSTM        MOVE JOB STEP NAME TO DETAIL LN
         SPACE 3
********************************************************************
*        SET OUTPUT PROGRAM NAME                                   *
********************************************************************
         MVC   OPGMNM,INPGM        MOVE PGM NAME TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT SECURITY USERID                                *
********************************************************************
         MVC   OUSERID,INRUD       MOVE USERID TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT STEP CONDITION CODE                            *
********************************************************************
         MVC   OCCODE,INSTPCC      MOVE STEP COND CODE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT ELAPSED TIME                                   *
********************************************************************
         L     R1,INELAP           LOAD ELAPSED TIME (SEC/100)
         AH    R1,=H'50'           ADD ROUNDING FACTOR
         LR    R14,R1              LOAD ELAP TIME (HUNDRETHS OF SECS)
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'360000'      DIVIDE TO FIND HOURS
         CVD   R15,DOUBLE          CONVERT HOURS TO PACKED
         UNPK  WORK(3),DOUBLE+6(2) UNPACK HOURS
         OI    WORK+2,X'F0'        MAKE PRINTABLE
         MVC   OELAPTM(3),WORK     MOVE HHH
         SRDA  R14,32              SHIFT REMAIN TO ODD REG OF PAIR
         D     R14,=F'6000'        DIVIDE TO FIND MINUTES
         CVD   R15,DOUBLE          CONVERT MINUTES TO PACKED
         UNPK  WORK(3),DOUBLE+6(2) UNPACK MINUTES
         OI    WORK+2,X'F0'        MAKE PRINTABLE
         MVC   OELAPTM+4(2),WORK+1 MOVE MM
         SRDA  R14,32              SHIFT REMAIN TO ODD REG OF PAIR
         D     R14,=F'100'         DIVIDE TO FIND SECONDS
         CVD   R15,DOUBLE          CONVERT SECONDS TO PACKED
         UNPK  WORK(3),DOUBLE+6(2) UNPACK SECONDS
         OI    WORK+2,X'F0'        MAKE PRINTABLE
         MVC   OELAPTM+7(2),WORK+1 MOVE SS
         MVI   OELAPTM+3,C':'      SET ':'
         MVI   OELAPTM+6,C':'      SET ':'
         SPACE 3
********************************************************************
*        SET OUTPUT CPU TIME (MMMM:SS FORMAT)                      *
********************************************************************
FMTCT    TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECOINDS?
         BO    FMTCTTH             YES
         MVC   OCPUTM,=CL7'****:**' ASSUME GT 9999.99
         L     R14,INTOTCPU        LOAD TOTAL CPU TIME
         AH    R14,=H'50'          ADD ROUNDING FACTOR
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'6000'        CONVERT TO MINUTES
         CVD   R15,DOUBLE          CONVERT MINUTES TO PACKED
         CP    DOUBLE,=P'9999'     SEE IF CPU TIME GT 9999
         BH    FMTZA               YES, LEAVE ASTERISKS
         MVC   WORK(6),=X'402020202120' SET EDIT MASK
         ED    WORK(6),DOUBLE+5    EDIT CPU MINUTES
         MVC   OCPUTM(4),WORK+2    MOVE CPU MINUTES TO DETAIL
         SRDA  R14,32              SHIFT SEC/100 TO ODD REG
         D     R14,=F'100'         CONVERT TO SECONDS
         CVD   R15,DOUBLE          CONVERT SECONDS TO PACKED
         MVC   WORK(4),=X'F0202020' SET EDIT MASK
         ED    WORK(4),DOUBLE+6    EDIT CPU SECONDS
         MVC   OCPUTM+5(2),WORK+2  MOVE CPU SECONDS TO DETAIL
         B     FMTZA
         SPACE 3
********************************************************************
*        SET OUTPUT CPU TIME (MMMM:SS.TH FORMAT)                   *
********************************************************************
FMTCTTH  MVC   OCPUTM,=CL10'****:**.**' ASSUME GT 9999:99.99
         L     R14,INTOTCPU        LOAD TOTAL CPU TIME
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'6000'        CONVERT TO MINUTES
         CVD   R15,DOUBLE          CONVERT MINUTES TO PACKED
         CP    DOUBLE,=P'9999'     SEE IF CPU TIME GT 9999
         BH    FMTZA               YES, LEAVE ASTERISKS
         MVC   WORK(6),=X'402020202120' SET EDIT MASK
         ED    WORK(6),DOUBLE+5    EDIT CPU MINUTES
         MVC   OCPUTM(4),WORK+2    MOVE CPU MINUTES TO DETAIL
         SRDA  R14,32              SHIFT SEC/100 TO ODD REG
         CVD   R15,DOUBLE          CONVERT SECONDS TO PACKED
         MVC   WORK(7),=X'F02021204B2020' SET EDIT MASK
         ED    WORK(7),DOUBLE+5    EDIT CPU SECONDS.TH
         MVC   OCPUTM+5(5),WORK+2    AND MOVE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT ZAAP CPU TIME (MMMM:SS FORMAT)                 *
********************************************************************
FMTZA    TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECOINDS?
         BO    FMTZATH             YES
         MVC   OZAAPTM,=CL7'****:**' ASSUME GT 9999.99
         L     R14,INZAACPU        LOAD ZAAP CPU TIME
         AH    R14,=H'50'          ADD ROUNDING FACTOR
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'6000'        CONVERT TO MINUTES
         CVD   R15,DOUBLE          CONVERT MINUTES TO PACKED
         CP    DOUBLE,=P'9999'     SEE IF ZAAP CPU TIME GT 9999
         BH    FMTZI               YES, LEAVE ASTERISKS
         MVC   WORK(6),=X'402020202120' SET EDIT MASK
         ED    WORK(6),DOUBLE+5    EDIT ZAAP CPU MINUTES
         MVC   OZAAPTM(4),WORK+2   MOVE ZAAP CPU MINUTES TO DETAIL
         SRDA  R14,32              SHIFT SEC/100 TO ODD REG
         D     R14,=F'100'         CONVERT TO SECONDS
         CVD   R15,DOUBLE          CONVERT SECONDS TO PACKED
         MVC   WORK(4),=X'F0202020' SET EDIT MASK
         ED    WORK(4),DOUBLE+6    EDIT ZAAP CPU SECONDS
         MVC   OZAAPTM+5(2),WORK+2 MOVE ZAAP CPU SECONDS TO DETAIL
         B     FMTZI
         SPACE 3
********************************************************************
*        SET OUTPUT ZAAP CPU TIME (MMMM:SS.TH FORMAT)              *
********************************************************************
FMTZATH  MVC   OZAAPTM,=CL10'****:**.**' ASSUME GT 9999:99.99
         L     R14,INZAACPU        LOAD ZAAP CPU TIME
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'6000'        CONVERT TO MINUTES
         CVD   R15,DOUBLE          CONVERT MINUTES TO PACKED
         CP    DOUBLE,=P'9999'     SEE IF ZAAP CPU TIME GT 9999
         BH    FMTZI               YES, LEAVE ASTERISKS
         MVC   WORK(6),=X'402020202120' SET EDIT MASK
         ED    WORK(6),DOUBLE+5    EDIT ZAAP CPU MINUTES
         MVC   OZAAPTM(4),WORK+2   MOVE ZAAP CPU MINUTES TO DETAIL
         SRDA  R14,32              SHIFT SEC/100 TO ODD REG
         CVD   R15,DOUBLE          CONVERT SECONDS TO PACKED
         MVC   WORK(7),=X'F02021204B2020' SET EDIT MASK
         ED    WORK(7),DOUBLE+5    EDIT ZAAP CPU SECONDS.TH
         MVC   OZAAPTM+5(5),WORK+2   AND MOVE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT ZIIP CPU TIME (MMMM:SS FORMAT)                 *
********************************************************************
FMTZI    TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECOINDS?
         BO    FMTZITH             YES
         MVC   OZIIPTM,=CL7'****:**' ASSUME GT 9999.99
         L     R14,INZIICPU        LOAD ZIIP CPU TIME
         AH    R14,=H'50'          ADD ROUNDING FACTOR
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'6000'        CONVERT TO MINUTES
         CVD   R15,DOUBLE          CONVERT MINUTES TO PACKED
         CP    DOUBLE,=P'9999'     SEE IF ZIIP CPU TIME GT 9999
         BH    FMTSP               YES, LEAVE ASTERISKS
         MVC   WORK(6),=X'402020202120' SET EDIT MASK
         ED    WORK(6),DOUBLE+5    EDIT ZIIP CPU MINUTES
         MVC   OZIIPTM(4),WORK+2   MOVE ZIIP CPU MINUTES TO DETAIL
         SRDA  R14,32              SHIFT SEC/100 TO ODD REG
         D     R14,=F'100'         CONVERT TO SECONDS
         CVD   R15,DOUBLE          CONVERT SECONDS TO PACKED
         MVC   WORK(4),=X'F0202020' SET EDIT MASK
         ED    WORK(4),DOUBLE+6    EDIT ZIIP CPU SECONDS
         MVC   OZIIPTM+5(2),WORK+2 MOVE ZIIP CPU SECONDS TO DETAIL
         B     FMTSP
         SPACE 3
********************************************************************
*        SET OUTPUT ZIIP CPU TIME (MMMM:SS.TH FORMAT)              *
********************************************************************
FMTZITH  MVC   OZIIPTM,=CL10'****:**.**' ASSUME GT 9999:99.99
         L     R14,INZIICPU        LOAD ZIIP CPU TIME
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'6000'        CONVERT TO MINUTES
         CVD   R15,DOUBLE          CONVERT MINUTES TO PACKED
         CP    DOUBLE,=P'9999'     SEE IF ZIIP CPU TIME GT 9999
         BH    FMTSP               YES, LEAVE ASTERISKS
         MVC   WORK(6),=X'402020202120' SET EDIT MASK
         ED    WORK(6),DOUBLE+5    EDIT ZIIP CPU MINUTES
         MVC   OZIIPTM(4),WORK+2   MOVE ZIIP CPU MINUTES TO DETAIL
         SRDA  R14,32              SHIFT SEC/100 TO ODD REG
         CVD   R15,DOUBLE          CONVERT SECONDS TO PACKED
         MVC   WORK(7),=X'F02021204B2020' SET EDIT MASK
         ED    WORK(7),DOUBLE+5    EDIT ZIIP CPU SECONDS.TH
         MVC   OZIIPTM+5(5),WORK+2   AND MOVE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT SPECIALTY CPU TIME (MMMM:SS FORMAT)            *
********************************************************************
FMTSP    TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECOINDS?
         BO    FMTSPTH             YES
         MVC   OSPECTM,=CL7'****:**' ASSUME GT 9999.99
         L     R14,INSPECPU        LOAD SPECIALTY CPU TIME
         AH    R14,=H'50'          ADD ROUNDING FACTOR
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'6000'        CONVERT TO MINUTES
         CVD   R15,DOUBLE          CONVERT MINUTES TO PACKED
         CP    DOUBLE,=P'9999'     SEE IF SPECIALTY CPU TIME GT 9999
         BH    FORMAT1             YES, LEAVE ASTERISKS
         MVC   WORK(6),=X'402020202120' SET EDIT MASK
         ED    WORK(6),DOUBLE+5    EDIT SPECIALTY CPU MINUTES
         MVC   OSPECTM(4),WORK+2   MOVE SPECIALTY CPU MINUTES TO DETAIL
         SRDA  R14,32              SHIFT SEC/100 TO ODD REG
         D     R14,=F'100'         CONVERT TO SECONDS
         CVD   R15,DOUBLE          CONVERT SECONDS TO PACKED
         MVC   WORK(4),=X'F0202020' SET EDIT MASK
         ED    WORK(4),DOUBLE+6    EDIT SPECIALTY CPU SECONDS
         MVC   OSPECTM+5(2),WORK+2 MOVE SPECIALTY CPU SECONDS TO DETAIL
         B     FORMAT1
         SPACE 3
********************************************************************
*        SET OUTPUT SPECIALTY CPU TIME (MMMM:SS.TH FORMAT)         *
********************************************************************
FMTSPTH  MVC   OSPECTM,=CL10'****:**.**' ASSUME GT 9999:99.99
         L     R14,INSPECPU        LOAD SPECIALTY CPU TIME
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'6000'        CONVERT TO MINUTES
         CVD   R15,DOUBLE          CONVERT MINUTES TO PACKED
         CP    DOUBLE,=P'9999'     SEE IF SPECIALTY CPU TIME GT 9999
         BH    FORMAT1             YES, LEAVE ASTERISKS
         MVC   WORK(6),=X'402020202120' SET EDIT MASK
         ED    WORK(6),DOUBLE+5    EDIT SPECIALTY CPU MINUTES
         MVC   OSPECTM(4),WORK+2   MOVE SPECIALTY CPU MINUTES TO DETAIL
         SRDA  R14,32              SHIFT SEC/100 TO ODD REG
         CVD   R15,DOUBLE          CONVERT SECONDS TO PACKED
         MVC   WORK(7),=X'F02021204B2020' SET EDIT MASK
         ED    WORK(7),DOUBLE+5    EDIT SPECIALTY CPU SECONDS.TH
         MVC   OSPECTM+5(5),WORK+2   AND MOVE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT REGION USED BELOW 16 MEG                       *
********************************************************************
FORMAT1  L     R14,INSTGB16        LOAD REGION USED BELOW
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'10'          MULTIPLY BY 10
         SRA   R15,10              DIVIDE BY 1024 FOR MEGS USED
         ST    R15,RGNBWRK         SAVE REGION BELOW IN MEG
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(7),=X'40202020214B20' SET EDIT MASK
         ED    WORK(7),DOUBLE+5    EDIT REGION USED BELOW
         MVC   ORGNB16(6),WORK+1   MOVE REGIONS USED BELOW
         MVI   ORGNB16+6,C'M'      SET MEG INDICATOR
         SPACE 3
********************************************************************
*        SET OUTPUT REGION USED ABOVE 16 MEG                       *
********************************************************************
         L     R14,INSTGA16        LOAD REGION USED ABOVE
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'10'          MULTIPLY BY 10
         SRA   R15,10              DIVIDE BY 1024 FOR MEGS USED
         ST    R15,RGNAWRK         SAVE REGION ABOVE IN MEG
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(7),=X'40202020214B20' SET EDIT MASK
         ED    WORK(7),DOUBLE+5    EDIT REGION USED ABOVE
         MVC   ORGNA16(6),WORK+1   MOVE REGION USED ABOVE TO DETAIL
         MVI   ORGNA16+6,C'M'      SET MEG INDICATOR
         SPACE 3
********************************************************************
*        SET OUTPUT NUMBER OF TAPE MOUNTS                          *
********************************************************************
         L     R15,INMNTS          LOAD NUMBER OF TAPE MOUNTS
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(4),=X'40202020' SET EDIT MASK
         ED    WORK(4),DOUBLE+6    EDIT NUMBER OF TAPE MOUNTS
         MVC   OMOUNTS,WORK+1      MOVE TAPE MOUNTS TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT TOTAL EXCP COUNT                               *
********************************************************************
         L     R15,INTEP           LOAD EXCP COUNT
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(12),=X'402020206B2020206B202120' SET EDIT MASK
         ED    WORK(12),DOUBLE+3   EDIT EXCP COUNT
         MVC   OEXCPS,WORK+2       MOVE EXCP COUNT TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT STEP AVERAGE CPU PERCENT                       *
********************************************************************
         L     R15,INCPP           LOAD CPU PERCENT
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(4),=X'40202120' SET EDIT MASK
         ED    WORK(4),DOUBLE+6    EDIT CPU PERCENT
         MVC   OCPU#,WORK+1        MOVE CPU PERCENT TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT JOB TYPE                                       *
********************************************************************
         MVC   OTYPE,INTYPE        MOVE JOB TYPE TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT NON-SCRATCH TAPE MOUNTS                        *
********************************************************************
         L     R15,INTPR           LOAD NUMBER OF NON-SCR TAPE MNTS
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(4),=X'40202020' SET EDIT MASK
         ED    WORK(4),DOUBLE+6    EDIT NUMBER OF TAPE MOUNTS
         MVC   OPTAPES,WORK+1      MOVE TAPE MOUNTS TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT SCRATCH TAPE MOUNTS                            *
********************************************************************
         L     R15,INPTM           LOAD NUMBER OF SCRATCH TAPE MNTS
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(4),=X'40202020' SET EDIT MASK
         ED    WORK(4),DOUBLE+6    EDIT NUMBER OF TAPE MOUNTS
         MVC   OSTAPES,WORK+1      MOVE TAPE MOUNTS TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT EXPANDED STORAGE PAGES                         *
********************************************************************
         MVC   OEXPPAG,=CL8'****,***' ASSUME GT 9999,999
         L     R15,INEXPTOT        LOAD EXPANDED STORAGE PAGES
         C     R15,=F'9999999'     SEE IF EXCEEDS MAX
         BE    FORMAT2             YES, BRANCH
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(9),=X'40202020206B202120' SET EDIT MASK
         ED    WORK(9),DOUBLE+4    EDIT EXPANDED PAGES
         MVC   OEXPPAG,WORK+1      MOVE EXPANDED PAGES TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT AUXILLARY STORAGE PAGES                        *
********************************************************************
FORMAT2  MVC   OAUXPAG,=CL8'****,***' ASSUME GT 9999,999
         L     R15,INAUXTOT        LOAD AUXILLARY STORAGE PAGES
         C     R15,=F'9999999'     SEE IF EXCEEDS MAX
         BE    FORMAT3             YES, BRANCH
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(9),=X'40202020206B202120' SET EDIT MASK
         ED    WORK(9),DOUBLE+4    EDIT AUXILLARY PAGES
         MVC   OAUXPAG,WORK+1      MOVE AUXILLARY PAGES TO DETAIL
         SPACE 3
********************************************************************
*        SET OUTPUT TOTAL SERVICE UNITS                            *
********************************************************************
FORMAT3  MVC   OTSUS,=CL9'****,***K' ASSUME GT 9999,999
         L     R15,INTSRV          LOAD TOTAL SERVICE UNITS
         AH    R15,=H'512'         ADD ROUNDING FACTOR
         SRA   R15,10              DIVIDE BY 1024 FOR K
         ST    R15,SUWRKT          SAVE TOTAL SERVICE UNITS IN K
         C     R15,=F'9999999'     SEE IF EXCEEDS MAX
         BH    FORMAT3A            YES, BRANCH
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(9),=X'40202020206B202120' SET EDIT MASK
         ED    WORK(9),DOUBLE+4    EDIT TOTAL SERVICE UNITS
         MVC   OTSUS(8),WORK+1     MOVE TOTAL SERVICE UNITS TO DETAIL
         MVI   OTSUS+8,C'K'        SET K INDICATOR
         SPACE 3
********************************************************************
*        SET OUTPUT CPU   SERVICE UNITS                            *
********************************************************************
FORMAT3A MVC   OCSUS,=CL9'****,***K' ASSUME GT 9999,999
         L     R15,INCSRV          LOAD CPU   SERVICE UNITS
         AH    R15,=H'512'         ADD ROUNDING FACTOR
         SRA   R15,10              DIVIDE BY 1024 FOR K
         ST    R15,SUWRKC          SAVE CPU   SERVICE UNITS IN K
         C     R15,=F'9999999'     SEE IF EXCEEDS MAX
         BH    FORMAT3B            YES, BRANCH
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(9),=X'40202020206B202120' SET EDIT MASK
         ED    WORK(9),DOUBLE+4    EDIT CPU   SERVICE UNITS
         MVC   OCSUS(8),WORK+1     MOVE CPU   SERVICE UNITS TO DETAIL
         MVI   OCSUS+8,C'K'        SET K INDICATOR
         SPACE 3
********************************************************************
*        SET OUTPUT I/O   SERVICE UNITS                            *
********************************************************************
FORMAT3B MVC   OISUS,=CL9'****,***K' ASSUME GT 9999,999
         L     R15,INISRV          LOAD I/O   SERVICE UNITS
         AH    R15,=H'512'         ADD ROUNDING FACTOR
         SRA   R15,10              DIVIDE BY 1024 FOR K
         ST    R15,SUWRKI          SAVE I/O   SERVICE UNITS IN K
         C     R15,=F'9999999'     SEE IF EXCEEDS MAX
         BH    FORMAT3C            YES, BRANCH
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(9),=X'40202020206B202120' SET EDIT MASK
         ED    WORK(9),DOUBLE+4    EDIT I/O   SERVICE UNITS
         MVC   OISUS(8),WORK+1     MOVE I/O   SERVICE UNITS TO DETAIL
         MVI   OISUS+8,C'K'        SET K INDICATOR
         SPACE 3
********************************************************************
*        SET OUTPUT MSO   SERVICE UNITS                            *
********************************************************************
FORMAT3C MVC   OMSUS,=CL9'****,***K' ASSUME GT 9999,999
         L     R15,INMSRV          LOAD MSO   SERVICE UNITS
         AH    R15,=H'512'         ADD ROUNDING FACTOR
         SRA   R15,10              DIVIDE BY 1024 FOR K
         ST    R15,SUWRKM          SAVE MSO   SERVICE UNITS IN K
         C     R15,=F'9999999'     SEE IF EXCEEDS MAX
         BH    FORMAT3D            YES, BRANCH
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(9),=X'40202020206B202120' SET EDIT MASK
         ED    WORK(9),DOUBLE+4    EDIT MSO   SERVICE UNITS
         MVC   OMSUS(8),WORK+1     MOVE MSO   SERVICE UNITS TO DETAIL
         MVI   OMSUS+8,C'K'        SET K INDICATOR
         SPACE 3
********************************************************************
*        SET OUTPUT SRB   SERVICE UNITS                            *
********************************************************************
FORMAT3D MVC   OSSUS,=CL9'****,***K' ASSUME GT 9999,999
         L     R15,INSSRV          LOAD SRB   SERVICE UNITS
         AH    R15,=H'512'         ADD ROUNDING FACTOR
         SRA   R15,10              DIVIDE BY 1024 FOR K
         ST    R15,SUWRKS          SAVE SRB   SERVICE UNITS IN K
         C     R15,=F'9999999'     SEE IF EXCEEDS MAX
         BH    FORMAT4             YES, BRANCH
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(9),=X'40202020206B202120' SET EDIT MASK
         ED    WORK(9),DOUBLE+4    EDIT SRB   SERVICE UNITS
         MVC   OSSUS(8),WORK+1     MOVE SRB   SERVICE UNITS TO DETAIL
         MVI   OSSUS+8,C'K'        SET K INDICATOR
         SPACE 3
********************************************************************
*        SET OUTPUT VIO PAGES                                      *
********************************************************************
FORMAT4  MVC   OVIOPAG,=CL8'****,***' ASSUME GT 9999,999
         L     R15,INVIOTOT        LOAD VIO PAGES
         C     R15,=F'9999999'     SEE IF EXCEEDS MAX
         BE    FORMAT5             YES, BRANCH
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   WORK(9),=X'40202020206B202120' SET EDIT MASK
         ED    WORK(9),DOUBLE+4    EDIT VIO PAGES
         MVC   OVIOPAG,WORK+1      MOVE VIO PAGES TO DETAIL
         SPACE 3
********************************************************************
*        SET START DAY-OF-THE-WEEK                                 *
********************************************************************
FORMAT5  LH    R1,INSDAY           LOAD START DAY-OF-WEEK INDEX
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         MH    R1,=H'3'            CALCULATE NAME TABLE OFFSET
         LA    R1,DAYTABLE(R1)     POINT TO NAME OF DAY ENTRY
         MVC   OSDAY,0(R1)         SAVE DAY-OF-THE-WEEK
         SPACE 3
********************************************************************
*        SET END   DAY-OF-THE-WEEK                                 *
********************************************************************
FORMAT6  LH    R1,INEDAY           LOAD START DAY-OF-WEEK INDEX
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         MH    R1,=H'3'            CALCULATE NAME TABLE OFFSET
         LA    R1,DAYTABLE(R1)     POINT TO NAME OF DAY ENTRY
         MVC   OEDAY,0(R1)         SAVE DAY-OF-THE-WEEK
FORMAT7  DS    0H
         EJECT
***********************************************************************
*                                                                     *
*        BUILD THE APPROPRIATE DETAIL LINE FROM THE REPORT            *
*        VARIABLES AS DEFINED IN THE PRINT OPTION TABLE.              *
*                                                                     *
***********************************************************************
FMTLINE  L     R1,=V(PRTOPT)       LOAD ADDRESS OF PRINT OPTIONS
         LA    R2,DETAIL           POINT TO DETAIL LINE
FMTLINE1 CLI   0(R1),X'FF'         PHYSICAL END OF TABLE
         BE    FMTLINE4            YES, BRANCH
         CLI   0(R1),C'N'          LOGICAL END OF TABLE
         BE    FMTLINE4            YES, BRANCH
         LH    R15,4(R1)           LOAD BRANCH TABLE OFFSET
         B     FMTLINE2(R15)       BRANCH TO PROPER ROUTINE BY INDEX
FMTLINE2 B     PRTJOBNM            INDEX = 00
         B     PRTJOBNO            INDEX = 04
         B     PRTSJDTE            INDEX = 08
         B     PRTSTIME            INDEX = 12
         B     PRTSYSID            INDEX = 16
         B     PRTPSTEP            INDEX = 20
         B     PRTJSTEP            INDEX = 24
         B     PRTPGM              INDEX = 28
         B     PRTUID              INDEX = 32
         B     PRTCCODE            INDEX = 36
         B     PRTELAP             INDEX = 40
         B     PRTEXCP             INDEX = 44
         B     PRTCPUT             INDEX = 48
         B     PRTRGNB             INDEX = 52
         B     PRTRGNA             INDEX = 56
         B     PRTTAPE             INDEX = 60
         B     PRTCPUP             INDEX = 64
         B     PRTJTYPE            INDEX = 68
         B     ERROR122            INDEX = 72
         B     ERROR122            INDEX = 76
         B     ERROR122            INDEX = 80
         B     ERROR122            INDEX = 84
         B     ERROR122            INDEX = 88
         B     ERROR122            INDEX = 92
         B     ERROR122            INDEX = 96
         B     ERROR122            INDEX = 100
         B     ERROR122            INDEX = 104
         B     PRTPTAPE            INDEX = 108
         B     PRTSTAPE            INDEX = 112
         B     PRTEXPPG            INDEX = 116
         B     PRTAUXPG            INDEX = 120
         B     PRTTSUS             INDEX = 124
         B     ERROR122            INDEX = 128
         B     ERROR122            INDEX = 132
         B     ERROR122            INDEX = 136
         B     PRTVIOPG            INDEX = 140
         B     ERROR122            INDEX = 144
         B     ERROR122            INDEX = 148
         B     ERROR122            INDEX = 152
         B     ERROR122            INDEX = 156
         B     ERROR122            INDEX = 160
         B     ERROR122            INDEX = 164
         B     ERROR122            INDEX = 168
         B     ERROR122            INDEX = 172
         B     ERROR122            INDEX = 176
         B     ERROR122            INDEX = 180
         B     ERROR122            INDEX = 184
         B     ERROR122            INDEX = 188
         B     ERROR122            INDEX = 192
         B     ERROR122            INDEX = 196
         B     ERROR122            INDEX = 200
         B     ERROR122            INDEX = 204
         B     ERROR122            INDEX = 208
         B     ERROR122            INDEX = 212
         B     ERROR122            INDEX = 216
         B     ERROR122            INDEX = 220
         B     ERROR122            INDEX = 224
         B     ERROR122            INDEX = 228
         B     ERROR122            INDEX = 232
         B     ERROR122            INDEX = 236
         B     ERROR122            INDEX = 240
         B     ERROR122            INDEX = 244
         B     ERROR122            INDEX = 248
         B     PRTSDAY             INDEX = 252
         B     ERROR122            INDEX = 256
         B     ERROR122            INDEX = 260
         B     PRTEJDTE            INDEX = 264
         B     PRTETIME            INDEX = 268
         B     PRTEDAY             INDEX = 272
         B     PRTSGDTE            INDEX = 276
         B     PRTEGDTE            INDEX = 280
         B     ERROR122            INDEX = 284
         B     ERROR122            INDEX = 288
         B     PRTCSUS             INDEX = 292
         B     PRTISUS             INDEX = 296
         B     PRTMSUS             INDEX = 300
         B     PRTSSUS             INDEX = 304
         B     ERROR122            INDEX = 308
         B     ERROR122            INDEX = 312
         B     ERROR122            INDEX = 316
         B     ERROR122            INDEX = 320
         B     ERROR122            INDEX = 324
         B     PRTZAAT             INDEX = 328
         B     PRTZIIT             INDEX = 332
         B     PRTSPET             INDEX = 336
         B     ERROR122            INDEX = 340
FMTLINE3 LA    R1,6(,R1)           INCREMENT TO NEXT TABLE ENTRY
         B     FMTLINE1            LOOP
FMTLINE4 B     MVEND               DONE WITH PRINT LINE
         EJECT
***********************************************************************
*        MOVE JOB NAME TO DETAIL                                      *
***********************************************************************
PRTJOBNM LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OJOBNAME    MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE JOB NUMBER TO DETAIL                                    *
***********************************************************************
PRTJOBNO LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OJOBNO      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE START JULIAN DATE TO DETAIL                             *
***********************************************************************
PRTSJDTE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OJSDATE     MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE END JULIAN DATE TO DETAIL                               *
***********************************************************************
PRTEJDTE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OJEDATE     MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE START GREGORIAN DATE TO DETAIL                          *
***********************************************************************
PRTSGDTE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(10,R2),OGSDATE    MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE END GREGORIAN DATE TO DETAIL                            *
***********************************************************************
PRTEGDTE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(10,R2),OGEDATE    MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE START TIME TO DETAIL                                    *
***********************************************************************
PRTSTIME LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(5,R2),OSTIME      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE END TIME TO DETAIL                                      *
***********************************************************************
PRTETIME LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(5,R2),OETIME      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE SYSTEM ID TO DETAIL                                     *
***********************************************************************
PRTSYSID LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(4,R2),OSYSID      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE PROC STEP NAME TO DETAIL                                *
***********************************************************************
PRTPSTEP LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OPSTEP      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE JOB STEP NAME TO DETAIL                                 *
***********************************************************************
PRTJSTEP LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OJSTEP      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE PROGRAM NAME TO DETAIL                                  *
***********************************************************************
PRTPGM   LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OPGMNM      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE SECURITY USERID TO DETAIL                               *
***********************************************************************
PRTUID   LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OUSERID     MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE CONDITION CODE TO DETAIL                                *
***********************************************************************
PRTCCODE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(5,R2),OCCODE      MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE ELAPSED TIME TO DETAIL                                  *
***********************************************************************
PRTELAP  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(9,R2),OELAPTM     MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE TOTAL I/O TO DETAIL LINE                                *
***********************************************************************
PRTEXCP  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(10,R2),OEXCPS     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INTEP           LOAD TOTAL EXCPS FOR STEP
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC4,DOUBLE         ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE CPU TIME TO DETAIL LINE                                 *
***********************************************************************
PRTCPUT  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECONDS
         BO    PRTCPUT1            YES
         MVC   0(7,R2),OCPUTM      MOVE FIELD TO DETAIL LINE
         B     PRTCPUT2            BRANCH
PRTCPUT1 MVC   0(10,R2),OCPUTM     MOVE FIELD TO DETAIL LINE
PRTCPUT2 TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INTOTCPU        LOAD TOTAL CPU FOR STEP
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC3,DOUBLE         ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE ZAAP CPU TIME TO DETAIL LINE                            *
***********************************************************************
PRTZAAT  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECONDS
         BO    PRTZAAT1            YES
         MVC   0(7,R2),OZAAPTM     MOVE FIELD TO DETAIL LINE
         B     PRTZAAT2            BRANCH
PRTZAAT1 MVC   0(10,R2),OZAAPTM    MOVE FIELD TO DETAIL LINE
PRTZAAT2 TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INZAACPU        LOAD TOTAL ZAAP CPU FOR STEP
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC18,DOUBLE        ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE ZIIP CPU TIME TO DETAIL LINE                            *
***********************************************************************
PRTZIIT  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECONDS
         BO    PRTZIIT1            YES
         MVC   0(7,R2),OZIIPTM     MOVE FIELD TO DETAIL LINE
         B     PRTZIIT2            BRANCH
PRTZIIT1 MVC   0(10,R2),OZIIPTM    MOVE FIELD TO DETAIL LINE
PRTZIIT2 TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INZIICPU        LOAD TOTAL ZIIP CPU FOR STEP
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC19,DOUBLE        ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE SPECIALTY ENGINE CPU TIME TO DETAIL LINE                *
***********************************************************************
PRTSPET  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECONDS
         BO    PRTSPET1            YES
         MVC   0(7,R2),OSPECTM     MOVE FIELD TO DETAIL LINE
         B     PRTSPET2            BRANCH
PRTSPET1 MVC   0(10,R2),OSPECTM    MOVE FIELD TO DETAIL LINE
PRTSPET2 TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INSPECPU        LOAD TOTAL SPECIALITY CPU FOR STEP
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC20,DOUBLE        ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE REGION BELOW TO DETAIL LINE                             *
***********************************************************************
PRTRGNB  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(7,R2),ORGNB16     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,RGNBWRK         LOAD REGION USED BELOW IN MEG
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC5,DOUBLE         ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE REGION ABOVE TO DETAIL LINE                             *
***********************************************************************
PRTRGNA  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(7,R2),ORGNA16     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,RGNAWRK         LOAD REGION USED ABOVE IN MEG
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC6,DOUBLE         ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE TAPE MOUNTS TO DETAIL LINE                              *
***********************************************************************
PRTTAPE  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(3,R2),OMOUNTS     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INMNTS          LOAD TOTAL TAPE MOUNTS
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC7,DOUBLE         ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE CPU PERCENT TO DETAIL LINE                              *
***********************************************************************
PRTCPUP  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(3,R2),OCPU#       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE JOB TYPE TO DETAIL LINE                                 *
***********************************************************************
PRTJTYPE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(3,R2),OTYPE       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE NON-SCRATCH TAPE MOUNTS TO DETAIL LINE                  *
***********************************************************************
PRTPTAPE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(3,R2),OPTAPES     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INTPR           LOAD NON-SCRATCH TAPE MOUNTS
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC8,DOUBLE         ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE SCRATCH TAPE MOUNTS TO DETAIL LINE                      *
***********************************************************************
PRTSTAPE LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(3,R2),OSTAPES     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INPTM           LOAD SCRATCH TAPE MOUNTS
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC9,DOUBLE         ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE EXPANDED STORAGE PAGES TO DETAIL LINE                   *
***********************************************************************
PRTEXPPG LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OEXPPAG     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INEXPTOT        LOAD EXPANDED STG PAGES
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC10,DOUBLE        ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE AUXILLARY STORAGE PAGES TO DETAIL LINE                  *
***********************************************************************
PRTAUXPG LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OAUXPAG     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INAUXTOT        LOAD AUXILLARY STG PAGES
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC11,DOUBLE        ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE TOTAL SERVICE UNITS TO DETAIL LINE                      *
***********************************************************************
PRTTSUS  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(9,R2),OTSUS       MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,SUWRKT          LOAD TOTAL SERVICE UNITS IN K
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC12,DOUBLE        ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE CPU   SERVICE UNITS TO DETAIL LINE                      *
***********************************************************************
PRTCSUS  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(9,R2),OCSUS       MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,SUWRKC          LOAD TOTAL SERVICE UNITS IN K
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC14,DOUBLE        ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE I/O   SERVICE UNITS TO DETAIL LINE                      *
***********************************************************************
PRTISUS  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(9,R2),OISUS       MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,SUWRKI          LOAD TOTAL SERVICE UNITS IN K
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC15,DOUBLE        ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE MSO   SERVICE UNITS TO DETAIL LINE                      *
***********************************************************************
PRTMSUS  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(9,R2),OMSUS       MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,SUWRKM          LOAD TOTAL SERVICE UNITS IN K
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC16,DOUBLE        ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE SRB   SERVICE UNITS TO DETAIL LINE                      *
***********************************************************************
PRTSSUS  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(9,R2),OSSUS       MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,SUWRKS          LOAD TOTAL SERVICE UNITS IN K
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC17,DOUBLE        ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE VIO PAGES TO DETAIL LINE                                *
***********************************************************************
PRTVIOPG LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   0(8,R2),OVIOPAG     MOVE FIELD TO DETAIL LINE
         TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   PRTCOMM             NO, GET OUT
         L     R15,INVIOTOT        LOAD VIO PAGES
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC13,DOUBLE        ACCUMULATE TOTAL
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE START DAY-OF-THE-WEEK TO DETAIL LINE                    *
***********************************************************************
PRTSDAY  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   1(3,R2),OSDAY       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        MOVE END   DAY-OF-THE-WEEK TO DETAIL LINE                    *
***********************************************************************
PRTEDAY  LH    R2,2(R1)            LOAD OFFSET OF FIELD
         LA    R2,DETAIL(R2)       CALCULATE ADDRESS OF OUTPUT FIELD
         MVC   1(3,R2),OEDAY       MOVE FIELD TO DETAIL LINE
         B     PRTCOMM             GO GET READY FOR NEXT FIELD
         SPACE
***********************************************************************
*        PRINT COMMON ROUTINE                                         *
***********************************************************************
PRTCOMM  B     FMTLINE3            GO PROCESS NEXT TABLE ENTRY
         SPACE 3
MVEND    TM    SWITCH+4,SELTOT     SEE IF WANT TOTALS
         BNO   MVEND1              NO, GET OUT
         AP    ACC1,=P'1'          ADD 1 TO SELECTED STEP COUNTER
         L     R15,INELAP          LOAD ELAPSED TIME IN SEC/100
         CVD   R15,DOUBLE          CONVERT TO PACKED
         AP    ACC2,DOUBLE         ACCUMULATE TOTAL
MVEND1   TM    SWITCH+6,OPTOUT     SEE IF OPTIONAL OUTPUT FILE
         BNO   MVEND2              NO, BRANCH
         PUT   DATAOUT,INREC       YES, WRITE SELECTED RECORD
MVEND2   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO SORT FOR LAST TIME
         SPACE 3
         LTORG
SAVE2    DS    18F                 ROUTINE SAVE AREA
         DROP  R6                  DROP ADDRESSABILITY TO ACCUMULATORS
         EJECT
***********************************************************************
*                                                                     *
*        ERROR ROUTINES                                               *
*                                                                     *
*        EACH ERROR ROUTINE WILL NORMALLY SET A MESSAGE INDEX         *
*        AND THEN LOAD THE APPROPRIATE MESSAGE FROM A MESSAGE         *
*        TABLE ACCORDING TO THAT INDEX.  THAT MESSAGE WILL BE         *
*        ISSUED AS A WTO AND THE PROGRAM ABENDED WITH A USER          *
*        ABEND WHICH ALSO MATCHES THE MESSAGE INDEX.                  *
*                                                                     *
***********************************************************************
ERROR122 LA    R15,122             LOAD MESSAGE INDEX
         B     ERRORFMT            GO TO COMMON ERROR ROUTINE
         SPACE 3
ERRORFMT ST    R15,ABCODE          SAVE ABEND CODE
         BCTR  R15,0               MAKE ERROR RELATIVE TO ZERO
         MH    R15,=H'120'         MULTIPLY BY LENGTH OF EACH ENTRY
         A     R15,=V(MSGTBL)      CALCULATE ADDRESS OF THIS ENTRY
         MVC   MSGWTO+4(120),0(R15) MOVE MESSAGE TO WTO LIST FORM
         WTO   MF=(E,MSGWTO)       WRITE ERROR MESSAGE
         L     R1,ABCODE           LOAD ABEND CODE
         ABEND (R1),DUMP           ABEND THE PROGRAM
         SPACE 3
         LTORG
         EJECT
         DROP  R9,R10,R11,R12
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE WILL SEARCH THE TIOT FOR THE DDNAME SUPPLIED    *
*        IN THE EIGHT (8) BYTE FIELD NAMED DDNAME.                    *
*                                                                     *
*        1)  REGISTER 15 ON ENTRY IS THE ROUTINE ENTRY POINT          *
*        2)  REGISTER 14 ON ENTRY IS THE RETURN ADDRESS               *
*                                                                     *
*        THE SUCCESS OF THE DDNAME SEARCH WILL BE INDICATED BY THE    *
*        RETURN CODE SET IN REGISTER 15.                              *
*                                                                     *
*        REG 15 = 0   - DDNAME FOUND                                  *
*        REG 15 = 4   - DDNAME NOT FOUND                              *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
FINDDN   CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING FINDDN,R9,R10,R11,R12  SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE3           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         SLR   R15,R15             SET RETURN CODE TO ZERO
         L     R1,16               GET CVT ADDR
         L     R1,0(,R1)           GET TCB PTRS
         L     R1,4(,R1)           GET CURRENT TCB
         L     R1,12(,R1)          GET TIOT ADDR
         LA    R1,24(,R1)          POINT TO DD ENTRIES
         SLR   R0,R0               ZERO REG FOR ICM
FINDDN1  ICM   R0,1,0(R1)          LOAD LENGTH OF DD ENTRY
         BZ    NODDN               ZERO, END OF TIOT ENTRIES
         CLC   DDNAME,4(R1)        SEE IF DDNAME MATCH
         BE    YESDDN              YES, BRANCH
FINDDN2  BXH   R1,R0,FINDDN1       LOOP FOR NEXT ENTRY
NODDN    LA    R15,4               SET RETURN CODE TO 4
YESDDN   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         L     R14,12(R13)         RESTORE
         LM    R0,R12,20(R13)          ORIGINAL REGS
         BR    R14                 RETURN TO CALLER
         SPACE 3
         LTORG
SAVE3    DS    18F                 ROUTINE SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*                                CNVTIME                              *
*                                                                     *
*        THIS ROUTINE WILL CONVERT THE FULLWORD BINARY TIME VALUE     *
*        IN THE SMF RECORD TO PRINTABLE TIME OF DAY (HHH:MM:SS.TT)    *
*                                                                     *
*        1)  REGISTER 15 ON ENTRY WILL CONTAIN THE ENTRY POINT        *
*        2)  REGISTER 14 ON ENTRY WILL CONTAIN THE RETURN ADDRESS     *
*        3)  REGISTER 1  ON ENTRY WILL CONTAIN THE BINARY TIME        *
*        4)  THE CONVERTED TIME WILL BE IN THE FIELD OUTTIME IN       *
*            THE FORM HHH:MM:SS.TT                                    *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
CNVTIME  CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING CNVTIME,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE4           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         LR    R14,R1              MOVE BINARY TIME TO WORK REG
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'360000'      DIVIDE TO FIND HOURS
         CVD   R15,DOUBLE          CONVERT HOURS TO DECIMAL
         UNPK  OUTTIME(3),DOUBLE+6(2)  UNPACK HOURS
         OI    OUTTIME+2,X'F0'     MAKE PRINTABLE
         SRDA  R14,32              SHIFT REMAINDER TO ODD REG
         D     R14,=F'6000'        DIVIDE TO FIND MINUTES
         CVD   R15,DOUBLE          CONVERT MINUTES TO DECIMAL
         UNPK  OUTTIME+3(3),DOUBLE+6(2) UNPACK MINUTES
         OI    OUTTIME+5,X'F0'     MAKE PRINTABLE
         MVI   OUTTIME+3,C':'      SEPARATE HOURS AND MINUTES
         SRDA  R14,32              SHIFT REMAINDER TO ODD REG
         D     R14,=F'100'         DIVIDE TO FIND FULL SECONDS
         CVD   R15,DOUBLE          CONVERT SECONDS TO DECIMAL
         UNPK  OUTTIME+6(3),DOUBLE+6(2)  UNPACK SECONDS
         OI    OUTTIME+8,X'F0'     MAKE PRINTABLE
         MVI   OUTTIME+6,C':'      SEPARATE MINUTES AND SECONDS
         CVD   R14,DOUBLE          CONVERT HUNDRETHS TO DECIMAL
         UNPK  OUTTIME+9(3),DOUBLE+6(2)  UNPACK HUNDRETHS
         OI    OUTTIME+11,X'F0'    MAKE PRINTABLE
         MVI   OUTTIME+9,C'.'      SEPARATE SECONDS AND HUNDRETHS
         CLC   OUTTIME,=C'100:39:00.00' SEE IF SPECIAL TIME
         BNE   CNVTIMEX            NO, BRANCH
         MVC   OUTTIME,=C'099:99:00.00' SET SPECIAL TIME VALUE
CNVTIMEX L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO SORT FOR LAST TIME
         SPACE 3
         LTORG
SAVE4    DS    18F                 ROUTINE SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*                               PRMCHK                                *
*                                                                     *
*        THIS ROUTINE WILL PROCESS THE INPUT SYSIN PARM STATEMENT.    *
*        IT WILL STORE THE PARM VALUE IN THE APPROPRIATE FIELD OR     *
*        THE RETURN CODE WILL BE SET TO A VALUE INDICATING A          *
*        SPECIFIC ERROR.                                              *
*                                                                     *
*        1)  REGISTER 15 ON ENTRY WILL CONTAIN THE ENTRY POINT        *
*        2)  REGISTER 14 ON ENTRY WILL CONTAIN THE RETURN ADDRESS     *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
PRMCHK   CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING PRMCHK,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE5           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         LA    R7,CARDAREA         LOAD INPUT RECORD ADDRESS
         SPACE 3
***********************************************************************
*                                                                     *
*        DETERMINE LENGTH OF THE INPUT PARM AND THEN SEARCH           *
*        A KEYWORD TABLE TO FIND A MATCH AND ROUTINE INDEX.           *
*                                                                     *
***********************************************************************
PRMCHK1  LR    R1,R7               SAVE RECORD ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
PRMCHK2  SLR   R3,R3               SET LENGTH TO ZERO
PRMCHK3  CLI   0(R7),C' '          END OF PARM
         BE    PRMCHK4             YES, BRANCH
         CLI   0(R7),C'='          END OF PARM
         BE    PRMCHK4             YES, BRANCH
         CLI   0(R7),C'>'          END OF PARM
         BE    PRMCHK4             YES, BRANCH
         CLI   0(R7),C'<'          END OF PARM
         BE    PRMCHK4             YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMCHK3             LOOP
PRMCHK4  LTR   R3,R3               TEST LENGTH
         BZ    ERROR033            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRMCHK5  CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR001            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMCHK6             YES, BRANCH
         EX    R3,COMPOKEY         COMPARE OPTION KEYWORD
         BE    PRMCHK7             MATCH, BRANCH
PRMCHK6  LA    R4,36(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMCHK5             LOOP
PRMCHK7  CLI   18(R4),C'Y'         SEE IF ELIGIBLE SELECT OPTION
         BNE   ERROR001            NO, ERROR
         LH    R15,2(R4)           LOAD OPTION INDEX FROM TABLE
         SPACE 3
***********************************************************************
*                                                                     *
*        GO TO THE PROPER ROUTINE FOR THE KEYWORD ON THE INPUT        *
*        CARD ACCORDING TO THE ROUTINE INDEX IN THE KEYWORD           *
*        TABLE.                                                       *
*                                                                     *
***********************************************************************
         B     PRMCHK8(R15)        BRANCH TO PROPER ROUTINE BY INDEX
PRMCHK8  B     PRMJBN              INDEX = 00
         B     PRMJNO              INDEX = 04
         B     PRMDATE             INDEX = 08
         B     PRMSTME             INDEX = 12
         B     PRMSYS              INDEX = 16
         B     PRMPST              INDEX = 20
         B     PRMJST              INDEX = 24
         B     PRMPGM              INDEX = 28
         B     PRMUID              INDEX = 32
         B     PRMCC               INDEX = 36
         B     PRMET               INDEX = 40
         B     PRMBC               INDEX = 44
         B     PRMCT               INDEX = 48
         B     PRMRB               INDEX = 52
         B     PRMRA               INDEX = 56
         B     PRMNT               INDEX = 60
         B     PRMCPP              INDEX = 64
         B     PRMTYP              INDEX = 68
         B     PRMNOFL             INDEX = 72
         B     PRMNOAB             INDEX = 76
         B     PRMNOTE             INDEX = 80
         B     PRMNOPR             INDEX = 84
         B     PRMNOST             INDEX = 88
         B     PRMNOTS             INDEX = 92
         B     PRMSTC              INDEX = 96
         B     PRMSRT              INDEX = 100
         B     PRMPRT              INDEX = 104
         B     PRMPTP              INDEX = 108
         B     PRMSTP              INDEX = 112
         B     PRMEPG              INDEX = 116
         B     PRMAPG              INDEX = 120
         B     PRMTSU              INDEX = 124
         B     PRMTOT              INDEX = 128
         B     PRMAVG              INDEX = 132
         B     PRMNOD              INDEX = 136
         B     PRMVIO              INDEX = 140
         B     XPRMJBN             INDEX = 144
         B     XPRMJNO             INDEX = 148
         B     XPRMSYS             INDEX = 152
         B     XPRMPST             INDEX = 156
         B     XPRMJST             INDEX = 160
         B     XPRMPGM             INDEX = 164
         B     XPRMUID             INDEX = 168
         B     XPRMCC              INDEX = 172
         B     ERROR001            INDEX = 176
         B     ERROR001            INDEX = 180
         B     ERROR001            INDEX = 184
         B     ERROR001            INDEX = 188
         B     ERROR001            INDEX = 192
         B     ERROR001            INDEX = 196
         B     ERROR001            INDEX = 200
         B     ERROR001            INDEX = 204
         B     ERROR001            INDEX = 208
         B     ERROR001            INDEX = 212
         B     ERROR001            INDEX = 216
         B     ERROR001            INDEX = 220
         B     ERROR001            INDEX = 224
         B     ERROR001            INDEX = 228
         B     ERROR001            INDEX = 232
         B     ERROR001            INDEX = 236
         B     ERROR001            INDEX = 240
         B     ERROR001            INDEX = 244
         B     ERROR001            INDEX = 248
         B     PRMSDAY             INDEX = 252
         B     PRMJOBL             INDEX = 256
         B     PRMINT              INDEX = 260
         B     ERROR001            INDEX = 264
         B     PRMETME             INDEX = 268
         B     PRMEDAY             INDEX = 272
         B     ERROR001            INDEX = 276
         B     ERROR001            INDEX = 280
         B     PRMTIMEI            INDEX = 284
         B     PRMIRNG             INDEX = 288
         B     PRMCSU              INDEX = 292
         B     PRMISU              INDEX = 296
         B     PRMMSU              INDEX = 300
         B     PRMSSU              INDEX = 304
         B     PRMSUB              INDEX = 308
         B     ERROR001            INDEX = 312
         B     ERROR001            INDEX = 316
         B     PRMNOJB             INDEX = 320
         B     PRMCTFRC            INDEX = 324
         B     PRMZAA              INDEX = 328
         B     PRMZII              INDEX = 332
         B     PRMSPE              INDEX = 336
         B     ERROR001            INDEX = 340
         EJECT
***********************************************************************
*                                                                     *
*                        SELECT BY JOBNAME                            *
*                                                                     *
*        JOBNAME=JJJJJJJJ(NN)                                         *
*                                                                     *
*        INSURE THAT THE PARM IS EXACTLY 1 TO EIGHT ALPHANUMERIC      *
*        CHARACTERS LONG.  THE OPTIONAL INDEX VALUE CAN BE            *
*        SPECIFIED WITHIN PARENTHESIS TO SPECIFY THE OFFSET           *
*        WITHIN THE ACTUAL JOBNAME THAT THE SPECIFIED "JOBNAME"       *
*        IS SUPPOSED TO START.  THE OPTIONAL INDEX VALUE MUST         *
*        CONTAIN 1 TO 2 NUMERIC DIGITS.                               *
*                                                                     *
***********************************************************************
PRMJBN   OI    SWITCH,SELJOBNM     TURN ON SELECT JOBNAME INDICATOR
         MVI   VALJOBNM,X'00'      INITIALIZE
         MVI   VALJOBNM+1,X'00'       JOBNAME
         MVC   VALJOBNM+2(8),=CL8' '     ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         SLR   R15,R15             CLEAR COUNTER REGISTER
PRMJBN1  CLI   0(R7),C' '          END OF JOBNM?
         BE    PRMJBN5             YES, BRANCH
         CLI   0(R7),C'('          START OF OFFSET FIELD?
         BE    PRMJBN2             YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         LA    R7,1(,R7)           ADD 1 TO JOBNAME POINTER
         B     PRMJBN1             LOOP
PRMJBN2  LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR003            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR004            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         LA    R7,1(R7)            POINT TO INDEX VALUE
         LR    R1,R7               SAVE PARM ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
         CLI   0(R7),C')'          END OF INDEX
         BE    PRMJBN3             YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   1(R7),C')'          END OF INDEX
         BE    PRMJBN3             YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   2(R7),C')'          END OF INDEX
         BE    PRMJBN3             YES, BRANCH
         B     ERROR005            INDEX LENGTH EXCEEDS 2 CHARACTERS
PRMJBN3  LTR   R15,R15             SEE IF ZERO LENGTH
         BZ    PRMJBN6             YES, NO INDEX
         LR    R14,R15             SAVE INDEX LENGTH
         LR    R2,R7               SAVE INDEX POINTER
PRMJBN4  CLI   0(R2),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR006            YES, ERROR
         CLI   0(R2),C'9'          TEST FOR GT NINE
         BH    ERROR006            YES, ERROR
         LA    R2,1(,R2)           INDEX TO NEXT CHAR
         BCT   R14,PRMJBN4         LOOP
         BCTR  R15,0               MAKE INDEX LENGTH RELATIVE TO ZERO
         EX    R15,PACKINDX        PACK THE INDEX VALUE
         CVB   R15,DOUBLE          CONVERT INDEX VALUE TO BINARY
         BCTR  R15,0               MAKE INDEX VALUE RELATIVE TO ZERO
         STC   R15,VALJOBNM+1      SAVE INDEX VALUE
         B     PRMJBN6             BRANCH
PRMJBN5  LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR002            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR002            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         MVI   VALJOBNM+1,X'00'    SET INDEX TO ZERO
PRMJBN6  ICM   R15,B'1111',JOBNMTBL LOAD ADDRESS OF JOBNAME TABLE
         BNZ   PRMJBN7             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 JOBNAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,JOBNMTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMJBN7  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMJBN8  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMJBN9             YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR060            YES, ERROR
         B     PRMJBN8             NO, LOOP
PRMJBN9  MVC   0(10,R15),VALJOBNM  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
MVJOBNM  MVC   VALJOBNM+2(0),0(R1) *****  EXEC ONLY *****
         EJECT
***********************************************************************
*                                                                     *
*                        SELECT BY JOBNO                              *
*                                                                     *
*        JOBNO=TTT.....                                               *
*                                                                     *
*        INSURE THAT THE PARM IS EXACTLY 8 CHARACTERS LONG AND        *
*        HAS THE FOLLOWING FORMS:                                     *
*                                                                     *
*        JOB.....  OR  STC.....  OR  TSU..... OR                      *
*        J0 .....  OR  S0 .....  OR  T0 .....                         *
*                                                                     *
*        WHERE ..... IS THE NUMERIC JOB/STC/TSU NUMBER                *
*                                                                     *
***********************************************************************
PRMJNO   OI    SWITCH,SELJOBNO     TURN ON SELECT JOBNO INDICATOR
         MVC   VALJOBNO,=CL8' '    INITIALIZE JOB NUMBER ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         MVC   VALJOBNO,0(R7)      SAVE JOBNO VALUE
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE JOBNO NOT BLANK
         BE    ERROR035            NOT THERE, ERROR
         CLC   0(3,R7),=C'JOB'     SEE IF STARTS WITH 'JOB'
         BE    PRMJNO1             YES, BRANCH
         CLC   0(2,R7),=C'J0'      SEE IF STARTS WITH 'J0'
         BE    PRMJNO1             YES, BRANCH
         CLC   0(3,R7),=C'STC'     SEE IF STARTS WITH 'STC'
         BE    PRMJNO1             YES, BRANCH
         CLC   0(2,R7),=C'S0'      SEE IF STARTS WITH 'S0'
         BE    PRMJNO1             YES, BRANCH
         CLC   0(3,R7),=C'TSU'     SEE IF STARTS WITH 'TSU'
         BE    PRMJNO1             YES, BRANCH
         CLC   0(2,R7),=C'T0'      SEE IF STARTS WITH 'T0'
         BE    PRMJNO1             YES, BRANCH
         B     ERROR035            NO, ERROR
PRMJNO1  LA    R7,3(,R7)           INCREMENT PAST JOB TYPE
         LA    R14,5               SET LENGTH TO 5
PRMJNO2  CLI   0(R7),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR035            YES, ERROR
         CLI   0(R7),C'9'          TEST FOR GT NINE
         BH    ERROR035            YES, ERROR
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         BCT   R14,PRMJNO2         LOOP
         CLI   0(R7),C' '          END OF JOBNO
         BNE   ERROR035            NO, ERROR
PRMJNO3  ICM   R15,B'1111',JOBNOTBL LOAD ADDRESS OF JOB NUMBER TABLE
         BNZ   PRMJNO4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 JOB NUMBER ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,JOBNOTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMJNO4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMJNO5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMJNO6             YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR061            YES, ERROR
         B     PRMJNO5             NO, LOOP
PRMJNO6  MVC   0(08,R15),VALJOBNO  SAVE NEW ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY DATE RANGE                            *
*                                                                     *
*        DATE=SDATE:EDATE                                             *
*                                                                     *
*        SDATE IS THE START DATE FOR SELECTION AND EDATE IS THE       *
*        OPTIONAL ENDING DATE FOR SELECTION.  IF ONLY ONE VALUE       *
*        IS ENTERED, THE DATE SELECTED IS ANY DATE GREATER THAN       *
*        OR EQUAL TO THAT DATE.  EACH DATE CAN BE ANY OF THE          *
*        FOLLOWING FORMATS:                                           *
*                                                                     *
*        YY.DDD                                                       *
*        YYYY.DDD                                                     *
*        MM/DD/YY                                                     *
*        YYYY/MM/DD                                                   *
*                                                                     *
***********************************************************************
PRMDATE  OI    SWITCH,SELDATE      TURN ON SELECT DATE INDICATOR
         MVC   DATES,=P'1900001'   SET DEFAULT LOW DATE
         MVC   DATEE,=P'2099365'   SET DEFAULT HIGH DATE
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
PRMDATE1 LR    R1,R7               SAVE PARM ADDRESS
         BAL   R14,PRMDTT          GO PROCESS THIS DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR007            NOT ZERO, INVALID START DATE
         MVC   DATES,DATEJUL       SAVE START DATE
         CLI   0(R1),C' '          SEE IF DATE RANGE
         BE    PRMDATE2            NO, USE DEFAULT
         CLI   0(R1),C':'          SEE IF PROPER DATE RANGE
         BNE   ERROR008            NO, ERROR
         LA    R1,1(,R1)           YES, INCREMENT PAST ':'
         BAL   R14,PRMDTT          GO PROCESS THIS DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR009            NOT ZERO, INVALID END DATE
         MVC   DATEE,DATEJUL       SAVE END DATE
PRMDATE2 ICM   R15,B'1111',DATETBL  LOAD ADDRESS OF DATE TABLE
         BNZ   PRMDATE3            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 DATE ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,DATETBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMDATE3 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMDATE4 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMDATE5            YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR062            YES, ERROR
         B     PRMDATE4            NO, LOOP
PRMDATE5 MVC   0(04,R15),DATES     SAVE NEW START DATE ENTRY
         MVC   4(04,R15),DATEE     SAVE NEW END   DATE ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                              PRMDTT                                 *
*                                                                     *
*        VALIDATE AND CONVERT DATES                                   *
*                                                                     *
*        R1 ON ENTRY POINTS TO THE INPUT DATE                         *
*                                                                     *
*        THE FOLLOWING FORMATS ARE SUPPORTED:                         *
*                                                                     *
*                                                                     *
*        YY.DDD                                                       *
*        YYYY.DDD                                                     *
*        MM/DD/YY                                                     *
*        YYYY/MM/DD                                                   *
*                                                                     *
*        ON EXIT:                                                     *
*                                                                     *
*        R1   POINTS PAST THE INPUT DATE                              *
*        R15  CONTAINS THE RETURN CODE                                *
*             00 - CONVERSION OK                                      *
*             08 - INVALID DATE                                       *
*                                                                     *
*        THE FIELD DATEJUL CONTAINS THE VALIDATED AND CONVERTED       *
*        DATE IN THE FORM YYYYDDDS                                    *
*                                                                     *
***********************************************************************
PRMDTT   STM   R0,R15,SAVEPRMD     SAVE REGISTERS
         LR    R7,R1               SAVE START OF DATE ADDRESS
         CLI   2(R7),C'.'          CHECK FOR JULIAN YY.DDD
         BE    PRMDTT1             YES, BRANCH
         CLI   4(R7),C'.'          CHECK FOR JULIAN YYYY.DDD
         BE    PRMDTT2             YES, BRANCH
         CLI   2(R7),C'/'          CHECK FOR GREGORIAN MM/DD/YY
         BE    PRMDTT3             YES, BRANCH
         CLI   4(R7),C'/'          CHECK FOR GREGORIAN YYYY/MM/DD
         BE    PRMDTT4             YES, BRANCH
         B     PRMDTTE             NO, ERROR
         SPACE 3
***********************************************************************
*        VALIDATE AND CONVERT DATE IN FORM YY.DDD                     *
***********************************************************************
PRMDTT1  CLI   6(R7),C' '          END OF DATE
         BE    PRMDTT1A            YES, BRANCH
         CLI   6(R7),C','          END OF DATE
         BE    PRMDTT1A            YES, BRANCH
         CLI   6(R7),C':'          END OF DATE
         BE    PRMDTT1A            YES, BRANCH
         B     PRMDTTE             NO, ERROR
PRMDTT1A MVC   DATEWORK(2),=C'19'  ASSUME 20TH CENTURY
         CLC   0(2,R7),=C'50'      SEE IF YEAR GT 50
         BH    PRMDTT1B            YES, 20TH CENTURY
         MVC   DATEWORK(2),=C'20'  ASSUME 21ST CENTURY
PRMDTT1B MVC   DATEWORK+2(2),0(R7) SAVE YY
         MVC   DATEWORK+4(3),3(R7) SAVE DDD
         LA    R14,7               SET LENGTH TO 7
         LA    R15,DATEWORK        POINT TO START OF YEAR
PRMDTT1C CLI   0(R15),C'0'         TEST FOR LESS THAN ZERO
         BL    PRMDTTE             YES, ERROR
         CLI   0(R15),C'9'         TEST FOR GT NINE
         BH    PRMDTTE             YES, ERROR
         LA    R15,1(,R15)         INDEX TO NEXT CHAR
         BCT   R14,PRMDTT1C        LOOP
PRMDTT1D PACK  DATEJUL,DATEWORK(7) PACK DATE
         CALL  DATERTN,(JG,DATEJUL,DATEGREG) CONVERT DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   PRMDTTE             NOT ZERO, INVALID DATE
         LA    R1,6(,R7)           POINT PAST DATE
         B     PRMDTTOK            GET OUT
         SPACE 3
***********************************************************************
*        VALIDATE AND CONVERT DATE IN FORM YYYY.DDD                   *
***********************************************************************
PRMDTT2  CLI   8(R7),C' '          END OF DATE
         BE    PRMDTT2A            YES, BRANCH
         CLI   8(R7),C','          END OF DATE
         BE    PRMDTT2A            YES, BRANCH
         CLI   8(R7),C':'          END OF DATE
         BE    PRMDTT2A            YES, BRANCH
         B     PRMDTTE             NO, ERROR
PRMDTT2A MVC   DATEWORK+0(4),0(R7) SAVE YYYY
         MVC   DATEWORK+4(3),5(R7) SAVE DDD
         LA    R14,7               SET LENGTH TO 7
         LA    R1,DATEWORK         POINT TO START OF YEAR
PRMDTT2B CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    PRMDTTE             YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    PRMDTTE             YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMDTT2B        LOOP
PRMDTT2C PACK  DATEJUL,DATEWORK(7) PACK DATE
         CALL  DATERTN,(JG,DATEJUL,DATEGREG) CONVERT DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   PRMDTTE             NOT ZERO, INVALID DATE
         LA    R1,8(,R7)           POINT PAST DATE
         B     PRMDTTOK            GET OUT
         SPACE 3
***********************************************************************
*        VALIDATE AND CONVERT DATE IN FORM MM/DD/YY                   *
***********************************************************************
PRMDTT3  CLI   8(R7),C' '          END OF DATE
         BE    PRMDTT3A            YES, BRANCH
         CLI   8(R7),C','          END OF DATE
         BE    PRMDTT3A            YES, BRANCH
         CLI   8(R7),C':'          END OF DATE
         BE    PRMDTT3A            YES, BRANCH
         B     PRMDTTE             NO, ERROR
PRMDTT3A MVC   DATEWORK(2),=C'19'  ASSUME 20TH CENTURY
         CLC   6(2,R7),=C'50'      SEE IF YEAR GT 50
         BH    PRMDTT3B            YES, 20TH CENTURY
         MVC   DATEWORK(2),=C'20'  ASSUME 21ST CENTURY
PRMDTT3B MVC   DATEWORK+2(2),6(R7) SAVE YY
         MVC   DATEWORK+4(2),0(R7) SAVE MM
         MVC   DATEWORK+6(2),3(R7) SAVE DD
         LA    R14,8               SET LENGTH TO 8
         LA    R15,DATEWORK        POINT TO START OF YEAR
PRMDTT3C CLI   0(R15),C'0'         TEST FOR LESS THAN ZERO
         BL    PRMDTTE             YES, ERROR
         CLI   0(R15),C'9'         TEST FOR GT NINE
         BH    PRMDTTE             YES, ERROR
         LA    R15,1(,R15)         INDEX TO NEXT CHAR
         BCT   R14,PRMDTT3C        LOOP
PRMDTT3D PACK  DATEGREG,DATEWORK(8) PACK DATE
         CALL  DATERTN,(GJ,DATEGREG,DATEJUL) CONVERT DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   PRMDTTE             NOT ZERO, INVALID DATE
         LA    R1,8(,R7)           POINT PAST DATE
         B     PRMDTTOK            GET OUT
         SPACE 3
***********************************************************************
*        VALIDATE AND CONVERT DATE IN FORM YYYY/MM/DD                 *
***********************************************************************
PRMDTT4  CLI   10(R7),C' '         END OF DATE
         BE    PRMDTT4A            YES, BRANCH
         CLI   10(R7),C','         END OF DATE
         BE    PRMDTT4A            YES, BRANCH
         CLI   10(R7),C':'         END OF DATE
         BE    PRMDTT4A            YES, BRANCH
         B     PRMDTTE             NO, ERROR
PRMDTT4A MVC   DATEWORK+0(4),0(R7) SAVE YYYY
         MVC   DATEWORK+4(2),5(R7) SAVE MM
         MVC   DATEWORK+6(2),8(R7) SAVE DD
         LA    R14,8               SET LENGTH TO 8
         LA    R15,DATEWORK        POINT TO START OF YEAR
PRMDTT4B CLI   0(R15),C'0'         TEST FOR LESS THAN ZERO
         BL    PRMDTTE             YES, ERROR
         CLI   0(R15),C'9'         TEST FOR GT NINE
         BH    PRMDTTE             YES, ERROR
         LA    R15,1(,R15)         INDEX TO NEXT CHAR
         BCT   R14,PRMDTT4B        LOOP
PRMDTT4C PACK  DATEGREG,DATEWORK(8) PACK DATE
         CALL  DATERTN,(GJ,DATEGREG,DATEJUL) CONVERT DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   PRMDTTE             NOT ZERO, INVALID DATE
         LA    R1,10(,R7)          POINT PAST DATE
         B     PRMDTTOK            GET OUT
***********************************************************************
*        GOOD DATE                                                    *
***********************************************************************
PRMDTTOK LA    R15,0               SET RETURN CODE TO ZERO
         B     PRMDTTR             GET OUT
***********************************************************************
*        INVALID DATE                                                 *
***********************************************************************
PRMDTTE  LA    R15,8               SET RETURN CODE TO EIGHT
PRMDTTR  LM    R2,R14,SAVEPRMD+8   RESTORE REGS EXCEPT R0, R1, AND R15
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY START TIME RANGE                      *
*                                                                     *
*        STIME=HH.MM:HH.MM                                            *
*                                                                     *
*        THE FIRST HH.MM IS THE START HOUR AND MINUTE TO SELECT       *
*        AND THE OPTIONAL SECOND HH.MM IS THE END HOUR AND            *
*        MINUTE FOR SELECTION BASED UPON THE TIME OF DAY WHEN THE     *
*        STEP BEGAN EXECUTION. IF ONLY ONE TIME VALUE IS ENTERED      *
*        THE TIME SELECTED IS ANY STEP START TIME GREATER THAN OR     *
*        EQUAL TO THAT TIME.                                          *
*                                                                     *
***********************************************************************
PRMSTME  OI    SWITCH,SELSTIME     TURN ON SELECT TIME INDICATOR
         MVC   VALTIME(5),=CL5'00.00' INITIALIZE TIME
         MVC   VALTIME+5(5),=CL5'99.99' ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         BNE   ERROR032            NO, ERROR
         MVC   VALTIME(5),0(R7)    SAVE BEGIN TIME
         CLI   5(R7),C' '          IS THERE AN END TIME
         BE    PRMSTME1            NO, LEAVE DEFAULT END TIME
         CLI   5(R7),C':'          PROPER SEPARATOR FOR TIME
         BNE   ERROR015            NO, ERROR
         MVC   VALTIME+5(5),6(R7)  SAVE END TIME
         CLI   11(R7),C' '         IS THERE ANYTHING AFTER END TIME
         BNE   ERROR016            YES, INVALID END TIME
PRMSTME1 LA    R1,VALTIME          POINT TO START TIME
         BAL   R14,PRMTT           GO PROCESS THIS TIME
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR014            NOT ZERO, INVALID START TIME
         MVC   TIMES,CONVTIME      SAVE START TIME
PRMSTME2 LA    R1,VALTIME+5        INCREMENT TO END TIME
         BAL   R14,PRMTT           GO PROCESS THIS TIME
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR016            NOT ZERO, INVALID START TIME
         MVC   TIMEE,CONVTIME      SAVE END TIME
PRMSTME3 ICM   R15,B'1111',STIMETBL LOAD ADDRESS OF TIME TABLE
         BNZ   PRMSTME4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 TIME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,STIMETBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMSTME4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMSTME5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMSTME6            YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR056            YES, ERROR
         B     PRMSTME5            NO, LOOP
PRMSTME6 MVC   0(04,R15),TIMES     SAVE NEW START TIME ENTRY
         MVC   4(04,R15),TIMEE     SAVE NEW END   TIME ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY STOP TIME RANGE                       *
*                                                                     *
*        ETIME=HH.MM:HH.MM                                            *
*                                                                     *
*        THE FIRST HH.MM IS THE END HOUR AND MINUTE TO SELECT         *
*        AND THE OPTIONAL SECOND HH.MM IS THE END HOUR AND            *
*        MINUTE FOR SELECTION BASED UPON THE TIME OF DAY WHEN THE     *
*        STEP ENDED EXECUTION. IF ONLY ONE TIME VALUE IS ENTERED      *
*        THE TIME SELECTED IS ANY STEP END TIME GREATER THAN OR       *
*        EQUAL TO THAT TIME.                                          *
*                                                                     *
***********************************************************************
PRMETME  OI    SWITCH+6,SELETIME   TURN ON SELECT TIME INDICATOR
         MVC   VALTIME(5),=CL5'00.00' INITIALIZE TIME
         MVC   VALTIME+5(5),=CL5'99.99' ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         BNE   ERROR032            NO, ERROR
         MVC   VALTIME(5),0(R7)    SAVE BEGIN TIME
         CLI   5(R7),C' '          IS THERE AN END TIME
         BE    PRMETME1            NO, LEAVE DEFAULT END TIME
         CLI   5(R7),C':'          PROPER SEPARATOR FOR TIME
         BNE   ERROR018            NO, ERROR
         MVC   VALTIME+5(5),6(R7)  SAVE END TIME
         CLI   11(R7),C' '         IS THERE ANYTHING AFTER END TIME
         BNE   ERROR019            YES, INVALID END TIME
PRMETME1 LA    R1,VALTIME          POINT TO START TIME
         BAL   R14,PRMTT           GO PROCESS THIS TIME
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR017            NOT ZERO, INVALID START TIME
         MVC   TIMES,CONVTIME      SAVE START TIME
PRMETME2 LA    R1,VALTIME+5        INCREMENT TO END TIME
         BAL   R14,PRMTT           GO PROCESS THIS TIME
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR019            NOT ZERO, INVALID START TIME
         MVC   TIMEE,CONVTIME      SAVE END TIME
PRMETME3 ICM   R15,B'1111',ETIMETBL LOAD ADDRESS OF TIME TABLE
         BNZ   PRMETME4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 TIME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,ETIMETBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMETME4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMETME5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMETME6            YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR020            YES, ERROR
         B     PRMETME5            NO, LOOP
PRMETME6 MVC   0(04,R15),TIMES     SAVE NEW END TIME ENTRY
         MVC   4(04,R15),TIMEE     SAVE NEW END   TIME ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                              PRMTT                                  *
*                                                                     *
*        VALIDATE AND CONVERT TIME                                    *
*                                                                     *
*        R1 ON ENTRY POINTS TO THE INPUT DATE                         *
*                                                                     *
*        THE FOLLOWING FORMATS ARE SUPPORTED:                         *
*                                                                     *
*                                                                     *
*        HH.MM                                                        *
*                                                                     *
*        ON EXIT:                                                     *
*                                                                     *
*        R1   POINTS PAST THE INPUT TIME                              *
*        R15  CONTAINS THE RETURN CODE                                *
*             00 - TIME OK                                            *
*             08 - INVALID TIME                                       *
*                                                                     *
*        THE FIELD CONVTIME CONTAINS THE VALIDATED AND CONVERTED      *
*        TIME IN A FULLWORD TIME IN HUNDRETHS OF A SECOND SINCE       *
*        MIDNIGHT.                                                    *
*                                                                     *
***********************************************************************
PRMTT    STM   R0,R15,SAVEPRMT     SAVE REGISTERS
         LR    R7,R1               SAVE START OF TIME ADDRESS
***********************************************************************
*        VALIDATE BASIC FORMAT                                        *
***********************************************************************
         CLI   2(R7),C'.'          CHECK FOR HOUR AND MIN SEPARATOR
         BNE   PRMTTE              NOT THERE, ERROR
         LA    R14,2               SET LENGTH TO 2
         LR    R1,R7               SAVE POINTER TO BEGIN HOUR
PRMTT1   CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    PRMTTE              YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    PRMTTE              YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMTT1          LOOP
         LA    R14,2               SET LENGTH TO 2
         LA    R1,3(R7)            SAVE POINTER TO BEGIN MIN
PRMTT2   CLI   0(R1),C'0'          TEST FOR LESS THAN ZERO
         BL    PRMTTE              YES, ERROR
         CLI   0(R1),C'9'          TEST FOR GT NINE
         BH    PRMTTE              YES, ERROR
         LA    R1,1(,R1)           INDEX TO NEXT CHAR
         BCT   R14,PRMTT2          LOOP
PRMTT3   MVC   WORK(2),0(R7)       MOVE BEGIN HOUR TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'360000'      MULTIPLY BY HUNDRETHS PER HOUR
         LR    R1,R15              SAVE VALUE
         MVC   WORK(2),3(R7)       MOVE BEGIN MIN TO WORK
         PACK  DOUBLE,WORK(2)      CONVERT TO PACKED
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         M     R14,=F'6000'        MULTIPLY BY HUNDRETHS PER MIN
         AR    R1,R15              ADD HUNDRETHS FOR HRS AND MINS
         ST    R1,CONVTIME         SAVE CONVERTED TIME
         LA    R1,5(,R7)           POINT PAST TIME PARM
***********************************************************************
*        GOOD TIME                                                    *
***********************************************************************
PRMTTOK  LA    R15,0               SET RETURN CODE TO ZERO
         B     PRMTTR              GET OUT
***********************************************************************
*        INVALID TIME                                                 *
***********************************************************************
PRMTTE   LA    R15,8               SET RETURN CODE TO EIGHT
PRMTTR   LM    R2,R14,SAVEPRMT+8   RESTORE REGS EXCEPT R0, R1, AND R15
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY SYSTEM ID                             *
*                                                                     *
*        SYSTEM=SSSS                                                  *
*                                                                     *
*        WHERE SSSS IS THE SMF SYSTEM ID.  THIS FIELD ONLY HAS        *
*        MEANING IF THE INPUT SMF DATA HAS COME FROM MULTIPLE         *
*        MVS SYSTEMS.                                                 *
*                                                                     *
***********************************************************************
PRMSYS   OI    SWITCH,SELSYSID     TURN ON SELECT SYSID INDICATOR
         MVC   VALSYSID,=CL4' '    INITIALIZE SYSID
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE SYSID NOT BLANK
         BE    ERROR021            NOT THERE, ERROR
         MVC   VALSYSID(4),0(R7)   SAVE SYS ID
PRMSYS1  ICM   R15,B'1111',SYSIDTBL LOAD ADDRESS OF SYSID TABLE
         BNZ   PRMSYS2             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=4004         GET ROOM FOR 1000 SYSID ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,SYSIDTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMSYS2  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMSYS3  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMSYS4             YES, GO SAVE NEW ENTRY
         LA    R15,04(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR064            YES, ERROR
         B     PRMSYS3             NO, LOOP
PRMSYS4  MVC   0(04,R15),VALSYSID  SAVE NEW ENTRY
         MVI   04(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY PROCSTEP NAME                         *
*                                                                     *
*        PROCSTEP=SSSSSSSS                                            *
*                                                                     *
*        INSURE THAT THE PROC STEP NAME IS 1 TO 8 CHARACTERS LONG     *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
PRMPST   OI    SWITCH+4,SELPSTEP   TURN ON SELECT PROC STEP IND
         MVC   VALPSTEP(2),=X'0000' INITIALIZE PROC STEP
         MVC   VALPSTEP+2(8),=CL8' '  NAME ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE PROC STEP NAME NOT BLANK
         BE    ERROR044            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMPST1  CLI   0(R7),C' '          END OF PROC STEP NAME
         BE    PRMPST2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMPST1             LOOP
PRMPST2  CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR044            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALPSTEP        SAVE LENGTH OF PROC STEP NAME
         MVC   VALPSTEP+2(8),0(R1) SAVE PROC STEP NAME
PRMPST3  ICM   R15,B'1111',PSTEPTBL LOAD ADDRESS OF PROC STEP TABLE
         BNZ   PRMPST4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 PSTEP ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,PSTEPTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMPST4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMPST5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMPST6             YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR065            YES, ERROR
         B     PRMPST5             NO, LOOP
PRMPST6  MVC   0(10,R15),VALPSTEP  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY JOBSTEP NAME                          *
*                                                                     *
*        JOBSTEP=SSSSSSSS                                             *
*                                                                     *
*        INSURE THAT THE JOB STEP NAME IS 1 TO 8 CHARACTERS LONG      *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
PRMJST   OI    SWITCH+4,SELJSTEP   TURN ON SELECT JOB STEP IND
         MVC   VALJSTEP(2),=X'0000' INITIALIZE JOB STEP
         MVC   VALJSTEP+2(8),=CL8' '  NAME ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE JOB STEP NAME NOT BLANK
         BE    ERROR045            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMJST1  CLI   0(R7),C' '          END OF JOB STEP NAME
         BE    PRMJST2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMJST1             LOOP
PRMJST2  CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR045            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALJSTEP        SAVE LENGTH OF JOB STEP NAME
         MVC   VALJSTEP+2(8),0(R1) SAVE JOB STEP NAME
PRMJST3  ICM   R15,B'1111',JSTEPTBL LOAD ADDRESS OF JOB STEP TABLE
         BNZ   PRMJST4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 JSTEP ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,JSTEPTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMJST4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMJST5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMJST6             YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR066            YES, ERROR
         B     PRMJST5             NO, LOOP
PRMJST6  MVC   0(10,R15),VALJSTEP  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY PROGRAM NAME                          *
*                                                                     *
*        PROGRAM=PPPPPPPP                                             *
*                                                                     *
*        INSURE THAT THE PROGRAM NAME IS 1 TO 8 CHARACTERS LONG       *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
PRMPGM   OI    SWITCH,SELPGM       TURN ON SELECT PGM INDICATOR
         MVC   VALPGM(2),=X'0000'  INITIALIZE PROGRAM
         MVC   VALPGM+2(8),=CL8' '    NAME ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE PGM NAME NOT BLANK
         BE    ERROR037            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMPGM1  CLI   0(R7),C' '          END OF PROGRAM NAME
         BE    PRMPGM2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMPGM1             LOOP
PRMPGM2  CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR037            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALPGM          SAVE LENGTH OF PROGRAM NAME
         MVC   VALPGM+2(8),0(R1)   SAVE PROGRAM NAME
PRMPGM3  ICM   R15,B'1111',PGMTBL  LOAD ADDRESS OF PGM NAME TABLE
         BNZ   PRMPGM4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 PGM NAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,PGMTBL          STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMPGM4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMPGM5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMPGM6             YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR067            YES, ERROR
         B     PRMPGM5             NO, LOOP
PRMPGM6  MVC   0(10,R15),VALPGM    SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY SECURITY USERID                       *
*                                                                     *
*        USERID=UUUUUUUU                                              *
*                                                                     *
*        INSURE THAT THE USERID NAME IS 1 TO 8 CHARACTERS LONG        *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
PRMUID   OI    SWITCH+1,SELUID     TURN ON SELECT USERID INDICATOR
         MVC   VALUID(2),=X'0000'  INITIALIZE SECURITY
         MVC   VALUID+2(8),=CL8' '    USERID ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE USERID NOT BLANK
         BE    ERROR039            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMUID1  CLI   0(R7),C' '          END OF USERID
         BE    PRMUID2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMUID1             LOOP
PRMUID2  CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR039            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALUID          SAVE LENGTH OF USERID
         MVC   VALUID+2(8),0(R1)   SAVE USERID
PRMUID3  ICM   R15,B'1111',UIDTBL  LOAD ADDRESS OF UID NAME TABLE
         BNZ   PRMUID4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 UID NAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,UIDTBL          STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMUID4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMUID5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMUID6             YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR068            YES, ERROR
         B     PRMUID5             NO, LOOP
PRMUID6  MVC   0(10,R15),VALUID    SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY CONDITION CODE                        *
*                                                                     *
*        CCODE=CCCCC                                                  *
*                                                                     *
*        INSURE THAT THE CONDITION CODE IS 1 TO 5 CHARACTERS LONG     *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
PRMCC    OI    SWITCH+1,SELCC      TURN ON SELECT CCODE INDICATOR
         MVC   VALCC(2),=X'0000'   INITIALIZE CONDITION
         MVC   VALCC+2(5),=CL5' '     CODE ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE CCODE NOT BLANK
         BE    ERROR041            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
PRMCC1   CLI   0(R7),C' '          END OF CCODE
         BE    PRMCC2              YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     PRMCC1              LOOP
PRMCC2   CH    R15,=H'5'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR041            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALCC           SAVE LENGTH OF CCODE
         MVC   VALCC+2(5),0(R1)    SAVE CCODE
PRMCC3   ICM   R15,B'1111',CCTBL   LOAD ADDRESS OF CCODE TABLE
         BNZ   PRMCC4              NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=7007         GET ROOM FOR 1000 CCODE ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,CCTBL           STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
PRMCC4   SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
PRMCC5   CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    PRMCC6              YES, GO SAVE NEW ENTRY
         LA    R15,07(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR069            YES, ERROR
         B     PRMCC5              NO, LOOP
PRMCC6   MVC   0(07,R15),VALCC     SAVE NEW ENTRY
         MVI   07(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY ELAPSED TIME                          *
*                                                                     *
*        ELAPTIME>HHH.MM.SS                                           *
*        ELAPTIME<HHH.MM.SS                                           *
*                                                                     *
*        INSURE THAT THE ELAPSED TIME FIELD IS IN THE CORRECT         *
*        FORMAT WITH HOURS NOT EXCEEDING 999, MINUTES NOT             *
*        EXCEEDING 59, AND SECONDS NOT EXCEEDING 59.  THE             *
*        FIRST NUMBER ENTERED IS HOURS, THE SECOND MINUTES,           *
*        AND THE LAST SECONDS BUT MAY BE ENTERED AS A ZERO            *
*        VALUE TO MEET THE FORMAT REQUIREMENTS.                       *
*                                                                     *
***********************************************************************
PRMET    CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR027            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMET1              YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMET2              YES, BRANCH
         B     ERROR032            NO, ERROR
PRMET1   OI    SWITCH+1,SELETGE    TURN ON SELECT ELAPTIME GE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         BAL   R14,PARMTM          GO PROCESS TIME
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR027            NOT ZERO, ERROR
         MVC   VALETGE,TMOUT       SAVE CONVERTED TIME
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMET2   OI    SWITCH+1,SELETLE    TURN ON SELECT ELAPTIME LE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         BAL   R14,PARMTM          GO PROCESS TIME
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR027            NOT ZERO, ERROR
         MVC   VALETLE,TMOUT       SAVE CONVERTED TIME
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY BLOCK COUNT                           *
*                                                                     *
*        EXCP>NNNNNNNNN                                               *
*        EXCP<NNNNNNNNN                                               *
*                                                                     *
*        INSURE THAT THE BLOCK COUNT IS A NUMERIC FIELD FROM          *
*        1 TO 9 DIGITS LONG.                                          *
*                                                                     *
***********************************************************************
PRMBC    CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR040            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMBC1              YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMBC2              YES, BRANCH
         B     ERROR032            NO, ERROR
PRMBC1   OI    SWITCH+2,SELBCGE    TURN ON SELECT BLK CNT GE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,9+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMBC1A  CLI   0(R7),C' '          END OF COUNT?
         BE    PRMBC1B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR040            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR040            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMBC1A         LOOP
         B     ERROR040            TOO LONG ERROR
PRMBC1B  BCTR  R15,0               MAKE LENGTH OF BLK COUNT REL ZERO
         EX    R15,PACKINDX        PACK BLOCK COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALBCGE         SAVE BLOCK COUNT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMBC2   OI    SWITCH+2,SELBCLE    TURN ON SELECT BLK CNT GE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,9+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMBC2A  CLI   0(R7),C' '          END OF BLOCK COUNT?
         BE    PRMBC2B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR040            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR040            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMBC2A         LOOP
         B     ERROR040            TOO LONG ERROR
PRMBC2B  BCTR  R15,0               MAKE LENGTH OF BLOCK COUNT REL ZERO
         EX    R15,PACKINDX        PACK BLOCK COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALBCLE         SAVE BLOCK COUNT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY CPU TIME                                *
*                                                                     *
*        CPUTIME>NNNNNN                                               *
*        CPUTIME<NNNNNN                                               *
*                                                                     *
*        INSURE THAT THE CPU TIME IS A NUMERIC FIELD FROM 1 TO 6      *
*        OR 1 TO 8 DIGITS.                                            *
*                                                                     *
*        WHEN CPUTIMEFRACTS IS NOT SPECIFIED, THE MAX. 6 DIGITS ARE   *
*        IN MINUTES, OTHERWISE, THE MAX. 8 DIGITS ARE 1/100 SECONDS.  *
*                                                                     *
*                                                                     *
*        CPUTIMEFRACTS MUST BE SPECIFIED BEFORE CPUTIME               *
*                                                                     *
***********************************************************************
PRMCT    CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    PRMCTERR            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMCT1              YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMCT2              YES, BRANCH
         B     ERROR032            NO, ERROR
PRMCT1   OI    SWITCH+1,SELCTGE    TURN ON SELECT CPUTIME GE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMCT010            YES, SET MAXIMUM LENGTH
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         B     PRMCT020            BRANCH
PRMCT010 LA    R14,8+1             LOAD MAXIMUM LENGTH + 1
PRMCT020 SLR   R15,R15             CLEAR LENGTH CTR
PRMCT1A  CLI   0(R7),C' '          END OF TIME?
         BE    PRMCT1B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PRMCTERR            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PRMCTERR            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMCT1A         LOOP
         B     PRMCTERR            TOO LONG ERROR
PRMCT1B  BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMCT050            NO, INPUT IS IN MINUTES
         M     R14,=F'6000'        CONVERT MINUTES TO SEC/100
PRMCT050 ST    R15,VALCTGE         SAVE CPU TIME GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMCT2   OI    SWITCH+1,SELCTLE    TURN ON SELECT CPUTIME LE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMCT110            YES, SET MAXIMUM LENGTH
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         B     PRMCT120            BRANCH
PRMCT110 LA    R14,8+1             LOAD MAXIMUM LENGTH + 1
PRMCT120 SLR   R15,R15             CLEAR LENGTH CTR
PRMCT2A  CLI   0(R7),C' '          END OF TIME?
         BE    PRMCT2B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PRMCTERR            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PRMCTERR            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMCT2A         LOOP
         B     PRMCTERR            TOO LONG ERROR
PRMCT2B  BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMCT150            NO, INPUT IS IN MINUTES
         M     R14,=F'6000'        CONVERT MINUTES TO SEC/100
PRMCT150 ST    R15,VALCTLE         SAVE CPU TIME LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE
PRMCTERR TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BZ    ERROR028            NO, INPUT IS IN MINUTES
         B     ERROR134            YES
         EJECT
***********************************************************************
*                                                                     *
*        SELECT CPU TIMES WITH TENTHS AND HUNDREDTHS OF A SECOND      *
*                                                                     *
*        CPUTIMEFRACTS                                                *
*                                                                     *
*        INSURE THAT NEITHER CPUTIME NOR PRINT HAS BEEN SELECTED      *
*        BEFORE THIS KEYWORD. WE MUST KNOW ABOUT CPUTIMEFRACTS        *
*        BEFROE PROCESSING ANY CPUTIME OR PRINT KEYWORDS, SINCE       *
*        THE FIELD LENGHT CHANGES.                                    *
*                                                                     *
***********************************************************************
PRMCTFRC TM    SWITCH+4,SELPRINT   ANY PRINT OPTIONS YET?
         BO    ERROR133            YES, THIS IS AN ERROR
         TM    SWITCH+1,SELCTGE+SELCTLE  CPUTIME SELECTED YET
         BNZ   ERROR133            YES, THIS IS AN ERROR
         TM    SWITCH+9,SELZAAGE+SELZAALE  ZAAP CPUTIME SELECTED YET
         BNZ   ERROR133            YES, THIS IS AN ERROR
         TM    SWITCH+9,SELZIIGE+SELZIILE  ZIIP CPUTIME SELECTED YET
         BNZ   ERROR133            YES, THIS IS AN ERROR
         TM    SWITCH+9,SELSPEGE+SELSPELE  ZAAP+ZIIP CPU SELECTED YET
         BNZ   ERROR133            YES, THIS IS AN ERROR
         OI    SWITCH+8,CPUFRACT   SELECT CPU TIME IN 1/100
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY REGION BELOW 16M                        *
*                                                                     *
*        REGIONB>NNNNN                                                *
*        REGIONB<NNNNN                                                *
*                                                                     *
*        INSURE THAT THE REGION SIZE BELOW (IN MEGABYTES) IS A        *
*        NUMERIC FIELD FROM 1 TO 5 DIGITS LONG                        *
*                                                                     *
***********************************************************************
PRMRB    CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR038            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMRB1              YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMRB2              YES, BRANCH
         B     ERROR032            NO, ERROR
PRMRB1   OI    SWITCH+2,SELRBGE    TURN ON SELECT RGN BELOW GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,5+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMRB1A  CLI   0(R7),C' '          END OF REGION BELOW?
         BE    PRMRB1B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR038            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR038            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMRB1A         LOOP
         B     ERROR038            TOO LONG ERROR
PRMRB1B  BCTR  R15,0               MAKE LENGTH OF REGION BELOW REL ZERO
         EX    R15,PACKINDX        PACK REGION BELOW
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALRBGE         SAVE REGION BELOW GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMRB2   OI    SWITCH+2,SELRBLE    TURN ON SELECT RGN BELOW GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,5+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMRB2A  CLI   0(R7),C' '          END OF REGION BELOW?
         BE    PRMRB2B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR038            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR038            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMRB2A         LOOP
         B     ERROR038            TOO LONG ERROR
PRMRB2B  BCTR  R15,0               MAKE LENGTH OF RGN BELOW REL ZERO
         EX    R15,PACKINDX        PACK REGION BELOW
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALRBLE         SAVE REGION BELOW LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY REGION BELOW 16M                        *
*                                                                     *
*        REGIONA>NNNNN                                                *
*        REGIONA<NNNNN                                                *
*                                                                     *
*        INSURE THAT THE REGION SIZE ABOVE (IN MEGABYTES) IS A        *
*        NUMERIC FIELD FROM 1 TO 5 DIGITS LONG                        *
*                                                                     *
***********************************************************************
PRMRA    CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR036            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMRA1              YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMRA2              YES, BRANCH
         B     ERROR032            NO, ERROR
PRMRA1   OI    SWITCH+2,SELRAGE    TURN ON SELECT RGN ABOVE GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,5+1             LOAD MAXIMUM LENGTH+1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMRA1A  CLI   0(R7),C' '          END OF REGION ABOVE?
         BE    PRMRA1B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR036            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR036            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMRA1A         LOOP
         B     ERROR036            TOO LONG ERROR
PRMRA1B  BCTR  R15,0               MAKE LENGTH OF REGION ABOVE REL ZERO
         EX    R15,PACKINDX        PACK REGION ABOVE
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALRAGE         SAVE REGION ABOVE GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMRA2   OI    SWITCH+2,SELRALE    TURN ON SELECT RGN ABOVE GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,5+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMRA2A  CLI   0(R7),C' '          END OF REGION ABOVE?
         BE    PRMRA2B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR036            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR036            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMRA2A         LOOP
         B     ERROR036            TOO LONG ERROR
PRMRA2B  BCTR  R15,0               MAKE LENGTH OF RGN ABOVE REL ZERO
         EX    R15,PACKINDX        PACK REGION ABOVE
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALRALE         SAVE REGION ABOVE LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY TAPE MOUNTS                             *
*                                                                     *
*        TAPES>NNNNNN                                                 *
*        TAPES<NNNNNN                                                 *
*                                                                     *
*        INSURE THAT THE NUMBER OF TAPE MOUNTS IS A NUMERIC FIELD     *
*        FROM 1 TO 6 DIGITS LONG                                      *
*                                                                     *
***********************************************************************
PRMNT    CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR029            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMNT1              YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMNT2              YES, BRANCH
         B     ERROR032            NO, ERROR
PRMNT1   OI    SWITCH+1,SELMNTGE   TURN ON SELECT MOUNT GE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMNT1A  CLI   0(R7),C' '          END OF COUNT?
         BE    PRMNT1B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR029            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR029            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMNT1A         LOOP
         B     ERROR029            TOO LONG ERROR
PRMNT1B  BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK MOUNT COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALMNTGE        SAVE MOUNT COUNT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMNT2   OI    SWITCH+1,SELMNTLE   TURN ON SELECT MOUNT LE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMNT2A  CLI   0(R7),C' '          END OF COUNT?
         BE    PRMNT2B             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR029            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR029            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMNT2A         LOOP
         B     ERROR029            TOO LONG ERROR
PRMNT2B  BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK MOUNT COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALMNTLE        SAVE MOUNT COUNT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY CPU PERCENT                             *
*                                                                     *
*        CPUPCT>NNN                                                   *
*        CPUPCT<NNN                                                   *
*                                                                     *
*        INSURE THAT THE PERCENT IS A NUMERIC FIELD FROM 1 TO 3       *
*        DIGITS LONG                                                  *
*                                                                     *
***********************************************************************
PRMCPP   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR034            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMCPP1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMCPP2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMCPP1  OI    SWITCH+2,SELCPPGE   TURN ON SELECT CPU PCT GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,3+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMCPP1A CLI   0(R7),C' '          END OF PARM?
         BE    PRMCPP1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR034            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR034            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMCPP1A        LOOP
         B     ERROR034            TOO LONG ERROR
PRMCPP1B BCTR R15,0                MAKE LENGTH OF CPU PCT REL ZERO
         EX    R15,PACKINDX        PACK PERCENT CPU
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALCPPGE        SAVE PERCENT CPU GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMCPP2  OI    SWITCH+2,SELCPPLE   TURN ON SELECT CPU PCT LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,3+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMCPP2A CLI   0(R7),C' '          END OF PARM?
         BE    PRMCPP2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR034            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR034            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMCPP2A        LOOP
         B     ERROR034            TOO LONG ERROR
PRMCPP2B BCTR R15,0                MAKE LENGTH OF PERCENT REL ZERO
         EX    R15,PACKINDX        PACK PERCENT CPU
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALCPPLE        SAVE PERCENT CPU LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY JOB TYPE                              *
*                                                                     *
*        JOBTYPE=T/P                                                  *
*                                                                     *
*        INSURE THAT JOBTYPE = T/P (TEST/PRODUCTION)                  *
*                                                                     *
***********************************************************************
PRMTYP   OI    SWITCH+3,SELTYPE    TURN ON SELECT BY TYPE INDICATOR
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE TYPE NOT BLANK
         BE    ERROR042            NOT THERE, ERROR
         CLI   1(R7),C' '          MAKE SURE 1 CHARACTER JOB TYPE
         BNE   ERROR042            NO, ERROR
         CLI   0(R7),C'T'          SEE IF VALID VALUE
         BE    PRMTYP1             YES, BRANCH
         CLI   0(R7),C'P'          SEE IF VALID VALUE
         BNE   ERROR042            NO, ERROR
PRMTYP1  MVC   VALTYPE(1),0(R1)    SAVE JOB TYPE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     HONOR A STOP COUNT                              *
*                                                                     *
*        STOPAFTER=NNNNNNNNN                                          *
*                                                                     *
*        INSURE THAT NNNNNNNNN IS A 1 TO NINE DIGIT NUMBER            *
*                                                                     *
***********************************************************************
PRMSTC   OI    SWITCH+3,SELSTCNT   TURN ON STOP COUNT ENTERED IND
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE TYPE NOT BLANK
         BE    ERROR043            NOT THERE, ERROR
         LA    R14,9+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMSTC1  CLI   0(R7),C' '          END OF PARM?
         BE    PRMSTC2             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR043            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR043            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMSTC1         LOOP
         B     ERROR043            TOO LONG ERROR
PRMSTC2  BCTR  R15,0               MAKE LENGTH OF STOP CNT REL ZERO
         EX    R15,PACKINDX        PACK STOP COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALSTCNT        SAVE STOP COUNT VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     NOFLUSH OPTION                                  *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMNOFL  OI    SWITCH+3,SELNOFLU   TURN ON NOFLUSH IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
***********************************************************************
*                                                                     *
*                     NOABEND OPTION                                  *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMNOAB  OI    SWITCH+3,SELNOABN   TURN ON NOABEND IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
***********************************************************************
*                                                                     *
*                     NOTEST OPTION                                   *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMNOTE OI     SWITCH+3,SELNOTST   TURN ON NOTEST IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
***********************************************************************
*                                                                     *
*                     NOPROD OPTION                                   *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMNOPR  OI    SWITCH+3,SELNOPRD   TURN ON NOPROD IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
***********************************************************************
*                                                                     *
*                     NOSTC OPTION                                    *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMNOST  OI    SWITCH+3,SELNOSTC   TURN ON NOSTC IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
***********************************************************************
*                                                                     *
*                     NOTSU OPTION                                    *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMNOTS  OI    SWITCH+3,SELNOTSU   TURN ON NOTSU IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
         EJECT
***********************************************************************
*                                                                     *
*                      ENTER SORT CRITERIA                            *
*                                                                     *
*        SORT=A,B,C,D,E                                               *
*                                                                     *
*        THIS ROUTINE WILL VALIDATE THE LIST OF SORT OPTIONS AND      *
*        GENERATE SORT CONTROL STATEMENTS AND CALL SORT.              *
*                                                                     *
***********************************************************************
PRMSRT   OI    SWITCH,SELSORT      TURN ON SELECT SORT INDICATOR
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R2,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE SORT SUBPARAMETERS PRESENT
         BE    ERROR022            NONE, ERROR
         LA    R6,SRTFLDS          LOAD ADDRESS OF SORT FIELDS CARD
         ZAP   SRTFLDCT,=P'0'      ZERO SORT FIELDS COUNTER
PRMSRT01 CP    SRTFLDCT,=P'5'      HAVE WE ALREADY PROCESSED 5 PARMS
         BNL   ERROR023            YES, ERROR
         SLR   R3,R3               SET LENGTH TO ZERO
PRMSRT02 CLI   0(R7),C' '          END OF SORT PARM
         BE    PRMSRT03            YES, BRANCH
         CLI   0(R7),C','          END OF SORT PARM
         BE    PRMSRT03            YES, BRANCH
         CLI   0(R7),C'('          END OF SORT PARM
         BE    PRMSRT03            YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMSRT02            LOOP
PRMSRT03 LTR   R3,R3               TEST LENGTH
         BZ    ERROR026            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF SORT KEYWORD TBL
PRMSRT04 CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR024            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMSRT05            YES, BRANCH
         EX    R3,COMPSPRM         COMPARE SORT PARM
         BE    PRMSRT06            MATCH, BRANCH
PRMSRT05 LA    R4,36(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMSRT04            LOOP
PRMSRT06 CLI   19(R4),C'Y'         SEE IF ELIGIBLE SORT OPTION
         BNE   ERROR024            NO, ERROR
         MVC   0(11,R6),24(R4)     MOVE SORT PARM FROM TABLE
         CLC   2(2,R4),=H'0'       SEE IF OFFSET KEY 0 (JOBNAME)
         BE    PRMSRT08            YES, GO DO SPECIAL STUFF
         CLC   0(3,R7),=C'(D)'     SEE IF FOLLOWED BY "(D)"
         BNE   *+12                NO, BRANCH
         MVI   9(R6),C'D'          SET TO DESCENDING
         LA    R7,3(,R7)           INCREMENT PAST "(D)"
         CLC   0(3,R7),=C'(A)'     SEE IF FOLLOWED BY "(A)"
         BNE   *+8                 NO, BRANCH
         LA    R7,3(,R7)           INCREMENT PAST "(A)"
PRMSRT07 LA    R6,11(,R6)          INCREMENT TO NEXT SORT FIELDS SLOT
         AP    SRTFLDCT,=P'1'      ADD 1 TO FIELDS COUNTER
         CLI   0(R7),C' '          END OF SUBPARAMETERS?
         BE    PRMSRT99            YES, BRANCH
         CLI   0(R7),C','          PROPER SUBPARAMETER SEPARATOR?
         BNE   ERROR025            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R2,R7               SET START OF NEXT SUBPARM
         B     PRMSRT01            GO GET NEXT SORT SUBPARAMETER
PRMSRT08 CLI   0(R7),C'('          SEE IF FOLLOWED BY "("
         BNE   PRMSRT07            NO, NO SUBPARAMETERS
         CLC   0(3,R7),=C'(D)'     SEE IF FOLLOWED BY "(D)"
         BNE   PRMSRT09            NO, BRANCH
         MVI   9(R6),C'D'          SET TO DESCENDING
         LA    R7,3(,R7)           INCREMENT PAST "(D)"
         B     PRMSRT07            CONTINUE
PRMSRT09 LR    R1,R7               POINT TO START OF SUBPARAMETERS
         L     R15,=V(JOBSUB)      LOAD ADDRESS OF JOB SUBPARMS ROUTINE
         BALR  R14,R15             GO TO PARSE JOB SUBPARMS ROUTINE
         LR    R7,R1               POINT TO CLOSING ")" OF PARAMETERS
         LTR   R15,R15             TEST RETURN CODE
         BZ    PRMSRT10            ZERO, FORMAT IS OK
         CH    R15,=H'1'           SEE IF RC=1
         BE    PRMSRT10            YES, CANNOT HAPPEN, BUT CONTINUE
         CH    R15,=H'2'           SEE IF RC=2
         BE    ERROR123            YES, ERROR, NO CLOSING ")"
         CH    R15,=H'3'           SEE IF RC=3
         BE    ERROR124            YES, TOO MANY SUBPARMS
PRMSRT10 LH    R15,JSUBCNT         LOAD NUMBER OF SUBPARMS
***********************************************************************
*                                                                     *
*        IF ONLY 1 SUBPARMETER IT MUST BE A "A" OR "D"                *
*                                                                     *
*        IF IT WAS A "A" OR "D" IT WOULD HAVE ALREADY BEEN            *
*        PROCESSED SO THIS MUST BE AN ERROR                           *
*                                                                     *
***********************************************************************
         CH    R15,=H'1'           SEE IF ONLY 1 SUBPARM
         BE    ERROR125            YES, ERROR
***********************************************************************
*                                                                     *
*        IF ONLY 2 SUBPARMETERS THEY MUST BE OFFSET AND LENGTH        *
*                                                                     *
*        IF THERE ARE 3 SUBPARAMETERS THEY MUST BE OFFSET, LENGTH,    *
*        AND EITHER "A" OR "D"                                        *
*                                                                     *
***********************************************************************
PRMSRT11 LH    R15,JSUB1L          LOAD LENGTH OF OFFSET
         LTR   R15,R15             TEST LENGTH
         BZ    PRMSRT14            ZERO, NULL, LEAVE DEFAULT OF 1
         CH    R15,=H'2'           SEE IF LENGTH GT 2
         BH    ERROR127            YES, ERROR
         L     R14,JSUB1A          LOAD ADDRESS OF OFFSET
PRMSRT12 CLI   0(R14),C'0'         SEE IF NUMERIC PARM
         BL    ERROR126            NO, ERROR
         CLI   0(R14),C'9'         SEE IF NUMERIC PARM
         BH    ERROR126            NO, ERROR
         LA    R14,1(,R14)         INCREMENT TO NEXT CHARACTER OF PARM
         BCT   R15,PRMSRT12        LOOP
         L     R14,JSUB1A          RELOAD ADDRESS OF OFFSET
         LH    R15,JSUB1L          RELOAD LENGTH OF OFFSET
PRMSRT13 BCTR  R15,0               MAKE PARM LENGTH RELATIVE TO 0
         EX    R15,PACKSUBT        PACK OFFSET
         CVB   R15,DOUBLE          CONVERT OFFSET TO BINARY
         CH    R15,=H'0'           SEE IF OFFSET = 0
         BE    ERROR128            YES, ERROR
         CH    R15,=H'8'           SEE IF OFFSET GT 8
         BH    ERROR128            YES, ERROR
         BCTR  R15,0               MAKE OFFSET RELATIVE TO 0
         PACK  DOUBLE,0(3,R6)      PACK DEFAULT OFFSET
         CVB   R14,DOUBLE          CONVERT TO BINARY
         AR    R14,R15             ADD NEW OFFSET TO DETAULT OFFSET
         CVD   R14,DOUBLE          CONVERT NEW OFFSET TO PACKED
         OI    DOUBLE+7,X'0F'      CLEAR SIGN
         UNPK  0(3,R6),DOUBLE+6(2) UNPACK NEW OFFSET
PRMSRT14 LH    R15,JSUB2L          LOAD LENGTH OF LENGTH
         LTR   R15,R15             TEST LENGTH
         BZ    PRMSRT17            ZERO, NULL, LEAVE DEFAULT OF 8
         CH    R15,=H'2'           SEE IF LENGTH GT 2
         BH    ERROR129            YES, ERROR
         L     R14,JSUB2A          LOAD ADDRESS OF LENGTH
PRMSRT15 CLI   0(R14),C'0'         SEE IF NUMERIC PARM
         BL    ERROR130            NO, ERROR
         CLI   0(R14),C'9'         SEE IF NUMERIC PARM
         BH    ERROR130            NO, ERROR
         LA    R14,1(,R14)         INCREMENT TO NEXT CHARACTER OF PARM
         BCT   R15,PRMSRT15        LOOP
         L     R14,JSUB2A          RELOAD ADDRESS OF LENGTH
         LH    R15,JSUB2L          RELOAD LENGTH OF LENGTH
PRMSRT16 BCTR  R15,0               MAKE PARM LENGTH RELATIVE TO 0
         EX    R15,PACKSUBT        PACK LENGTH
         CVB   R15,DOUBLE          CONVERT LENGTH TO BINARY
         CH    R15,=H'0'           SEE IF LENGTH = 0
         BE    ERROR131            YES, ERROR
         CH    R15,=H'8'           SEE IF LENGTH GT 8
         BH    ERROR131            YES, ERROR
         CVD   R15,DOUBLE          CONVERT TO PACKED
         OI    DOUBLE+7,X'0F'      CLEAR SIGN
         UNPK  4(1,R6),DOUBLE+7(1) UNPACK NEW LENGTH
PRMSRT17 LH    R15,JSUBCNT         RELOAD NUMBER OF SUBPARMS
***********************************************************************
*                                                                     *
*        IF 3 SUBPARAMETERS, THE THIRD MUST BE A "A" OR "D"           *
*                                                                     *
***********************************************************************
         CH    R15,=H'3'           SEE IF 3 SUBPARMS
         BNE   PRMSRT18            NO, BRANCH
         L     R14,JSUB3A          LOAD ADDRESS OF A/D
         LH    R15,JSUB3L          LOAD LENGTH OF A/D
         CH    R15,=H'1'           TEST LENGTH OF THIRD PARAMETER
         BNE   ERROR132            NOT 1, ERROR
         CLI   0(R14),C'A'         SEE IF "A"
         BE    PRMSRT18            YES, LEAVE THE DEFAULT
         CLI   0(R14),C'D'         SEE IF "D"
         BNE   ERROR132            NO, ILLEGAL CHARACTER, ERROR
         MVI   9(R6),C'D'          SET TO DESCENDING
PRMSRT18 LA    R7,1(,R7)           INCREMENT PAST ')'
         B     PRMSRT07            CONTINUE
PRMSRT99 BCTR  R6,0                BACK UP POINTER TO SORT FIELDS CARD
         MVI   0(R6),C')'          PUT CLOSING PARENS ARND SORT FIELDS
         B     PRMEND              GO GET NEXT OPTION CARD
COMPSPRM CLC   0(0,R2),4(R4)       **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*                                                                     *
*        DETERMINE LENGTH OF THE PRINT OPTION AND THEN SEARCH         *
*        A KEYWORD TABLE TO FIND A MATCH AND ROUTINE INDEX.           *
*                                                                     *
***********************************************************************
PRMPRT   OI    SWITCH+4,SELPRINT   TURN IF PRINT OPTION SPECIFIED
         LR    R1,R7               SAVE RECORD ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE PRINT PARMS PRESENT
         BE    ERROR053            NONE, ERROR
PRMPRT1  SLR   R3,R3               SET LENGTH TO ZERO
PRMPRT2  CLI   0(R7),C' '          END OF PARM
         BE    PRMPRT3             YES, BRANCH
         CLI   0(R7),C','          END OF PARM
         BE    PRMPRT3             YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMPRT2             LOOP
PRMPRT3  LTR   R3,R3               TEST LENGTH
         BZ    ERROR049            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRMPRT4  CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR050            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMPRT5             YES, BRANCH
         EX    R3,COMPOKEY         COMPARE OPTION KEYWORD
         BE    PRMPRT6             MATCH, BRANCH
PRMPRT5  LA    R4,36(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMPRT4             LOOP
PRMPRT6  CLI   20(R4),C'Y'         SEE IF ELIGIBLE PRINT OPTION
         BNE   ERROR050            NO, ERROR
***********************************************************************
*                                                                     *
*        FIND THE NEXT OPEN ENTRY IN THE PRINT OPTION TABLE.          *
*                                                                     *
***********************************************************************
         L     R1,=V(PRTOPT)       LOAD START ADDRESS OF TABLE
PRMPRT7  CLI   0(R1),C'N'          SEE IF EMPTY ENTRY
         BE    PRMPRT8             YES, BRANCH
         CLI   0(R1),X'FF'         PHYSICAL END OF TABLE
         BE    ERROR051            YES, ERROR
         LA    R1,6(,R1)           INCREMENT TO NEXT TABLE ENTRY
         B     PRMPRT7             LOOP
         SPACE 3
***********************************************************************
*                                                                     *
*        SET THE PRINT OPTION IN THE PRINT OPTION TABLE               *
*                                                                     *
*        REG 1 POINTS TO A NEW PRINT OPTION TABLE ENTRY               *
*        REG 4 POINTS TO THE OPTION TABLE ENTRY                       *
*                                                                     *
***********************************************************************
PRMPRT8  MVI   0(R1),C'Y'          TURN ON PRINT INDICATOR
         LH    R15,2(R4)           LOAD OPTION INDEX FROM TABLE
         STH   R15,4(R1)           SAVE INDEX IN PRINT OPTION TABLE
         CLI   0(R7),C' '          END OF SUBPARAMETERS?
         BE    PRMEND              YES, GO GET NEXT OPTION CARD
         CLI   0(R7),C','          PROPER SUBPARAMETER SEPARATOR?
         BNE   ERROR052            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R1,R7               SET START OF NEXT SUBPARM
         B     PRMPRT1             GO GET NEXT PRINT SUBPARAMETER
         EJECT
***********************************************************************
*                                                                     *
*        DETERMINE LENGTH OF THE STARTDAY OPTION THEN SEARCH          *
*        A KEYWORD TABLE TO FIND A MATCH AND ROUTINE INDEX.           *
*                                                                     *
***********************************************************************
PRMSDAY  OI    SWITCH+6,SELSDAY    TURN SELECTION BY START DAY IND
         LR    R1,R7               SAVE RECORD ADDRESS
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE SDAY PARMS PRESENT
         BE    ERROR010            NONE, ERROR
PRMSDAY1 SLR   R3,R3               SET LENGTH TO ZERO
PRMSDAY2 CLI   0(R7),C' '          END OF PARM
         BE    PRMSDAY3            YES, BRANCH
         CLI   0(R7),C','          END OF PARM
         BE    PRMSDAY3            YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMSDAY2            LOOP
PRMSDAY3 LTR   R3,R3               TEST LENGTH
         BZ    ERROR011            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRMSDAY4 CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR012            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMSDAY5            YES, BRANCH
         EX    R3,COMPOKEY         COMPARE OPTION KEYWORD
         BE    PRMSDAY6            MATCH, BRANCH
PRMSDAY5 LA    R4,36(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMSDAY4            LOOP
PRMSDAY6 CLI   21(R4),C'Y'         SEE IF ELIGIBLE DAY OPTION
         BNE   ERROR012            NO, ERROR
         LH    R15,2(R4)           LOAD OPTION INDEX FROM TABLE
***********************************************************************
*                                                                     *
*        GO TO THE PROPER ROUTINE FOR THE START DAY SUBPARAMETER      *
*        ON THE INPUT CARD ACCORDING TO THE ROUTINE INDEX IN THE      *
*        KEYWORD TABLE.                                               *
*                                                                     *
***********************************************************************
         B     PRMSDAY7(R15)       BRANCH TO PROPER ROUTINE BY INDEX
PRMSDAY7 B     ERROR012            INDEX = 00
         B     ERROR012            INDEX = 04
         B     ERROR012            INDEX = 08
         B     ERROR012            INDEX = 12
         B     ERROR012            INDEX = 16
         B     ERROR012            INDEX = 20
         B     ERROR012            INDEX = 24
         B     ERROR012            INDEX = 28
         B     ERROR012            INDEX = 32
         B     ERROR012            INDEX = 36
         B     ERROR012            INDEX = 40
         B     ERROR012            INDEX = 44
         B     ERROR012            INDEX = 48
         B     ERROR012            INDEX = 52
         B     ERROR012            INDEX = 56
         B     ERROR012            INDEX = 60
         B     ERROR012            INDEX = 64
         B     ERROR012            INDEX = 68
         B     ERROR012            INDEX = 72
         B     ERROR012            INDEX = 76
         B     ERROR012            INDEX = 80
         B     ERROR012            INDEX = 84
         B     ERROR012            INDEX = 88
         B     ERROR012            INDEX = 92
         B     ERROR012            INDEX = 96
         B     ERROR012            INDEX = 100
         B     ERROR012            INDEX = 104
         B     ERROR012            INDEX = 108
         B     ERROR012            INDEX = 112
         B     ERROR012            INDEX = 116
         B     ERROR012            INDEX = 120
         B     ERROR012            INDEX = 124
         B     ERROR012            INDEX = 128
         B     ERROR012            INDEX = 132
         B     ERROR012            INDEX = 136
         B     ERROR012            INDEX = 140
         B     ERROR012            INDEX = 144
         B     ERROR012            INDEX = 148
         B     ERROR012            INDEX = 152
         B     ERROR012            INDEX = 156
         B     ERROR012            INDEX = 160
         B     ERROR012            INDEX = 164
         B     ERROR012            INDEX = 168
         B     ERROR012            INDEX = 172
         B     SDSSUN              INDEX = 176
         B     SDSNSUN             INDEX = 180
         B     SDSMON              INDEX = 184
         B     SDSNMON             INDEX = 188
         B     SDSTUE              INDEX = 192
         B     SDSNTUE             INDEX = 196
         B     SDSWED              INDEX = 200
         B     SDSNWED             INDEX = 204
         B     SDSTHU              INDEX = 208
         B     SDSNTHU             INDEX = 212
         B     SDSFRI              INDEX = 216
         B     SDSNFRI             INDEX = 220
         B     SDSSAT              INDEX = 224
         B     SDSNSAT             INDEX = 228
         B     SDSWE               INDEX = 232
         B     SDSNWE              INDEX = 236
         B     SDSWD               INDEX = 240
         B     SDSNWD              INDEX = 244
         B     SDSALLD             INDEX = 248
         B     ERROR012            INDEX = 252
         B     ERROR012            INDEX = 256
         B     ERROR012            INDEX = 260
         B     ERROR012            INDEX = 264
         B     ERROR012            INDEX = 268
         B     ERROR012            INDEX = 272
         B     ERROR012            INDEX = 276
         B     ERROR012            INDEX = 280
         B     ERROR012            INDEX = 284
         B     ERROR012            INDEX = 288
         B     ERROR012            INDEX = 292
         B     ERROR012            INDEX = 296
         B     ERROR012            INDEX = 300
         B     ERROR012            INDEX = 304
         B     ERROR012            INDEX = 308
         B     ERROR012            INDEX = 312
         B     ERROR012            INDEX = 316
         B     ERROR012            INDEX = 320
         B     ERROR012            INDEX = 324
         B     ERROR012            INDEX = 328
         B     ERROR012            INDEX = 332
         B     ERROR012            INDEX = 336
         B     ERROR012            INDEX = 340
PRMSDAY8 CLI   0(R7),C' '          END OF SUBPARAMETERS?
         BE    PRMEND              YES, GO GET NEXT OPTION CARD
         CLI   0(R7),C','          PROPER SUBPARAMETER SEPARATOR?
         BNE   ERROR052            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R1,R7               SET START OF NEXT SUBPARM
         B     PRMSDAY1            GO GET NEXT PRINT SUBPARAMETER
         EJECT
***********************************************************************
*                                                                     *
*        DETERMINE LENGTH OF THE ENDDAY OPTION THEN SEARCH            *
*        A KEYWORD TABLE TO FIND A MATCH AND ROUTINE INDEX.           *
*                                                                     *
***********************************************************************
PRMEDAY  OI    SWITCH+6,SELEDAY    TURN SELECTION BY START DAY IND
         LR    R1,R7               SAVE RECORD ADDRESS
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE EDAY PARMS PRESENT
         BE    ERROR092            NONE, ERROR
PRMEDAY1 SLR   R3,R3               SET LENGTH TO ZERO
PRMEDAY2 CLI   0(R7),C' '          END OF PARM
         BE    PRMEDAY3            YES, BRANCH
         CLI   0(R7),C','          END OF PARM
         BE    PRMEDAY3            YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMEDAY2            LOOP
PRMEDAY3 LTR   R3,R3               TEST LENGTH
         BZ    ERROR093            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF OPTIONS KEYWORD TBL
PRMEDAY4 CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR094            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMEDAY5            YES, BRANCH
         EX    R3,COMPOKEY         COMPARE OPTION KEYWORD
         BE    PRMEDAY6            MATCH, BRANCH
PRMEDAY5 LA    R4,36(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMEDAY4            LOOP
PRMEDAY6 CLI   21(R4),C'Y'         SEE IF ELIGIBLE DAY OPTION
         BNE   ERROR094            NO, ERROR
         LH    R15,2(R4)           LOAD OPTION INDEX FROM TABLE
***********************************************************************
*                                                                     *
*        GO TO THE PROPER ROUTINE FOR THE START DAY SUBPARAMETER      *
*        ON THE INPUT CARD ACCORDING TO THE ROUTINE INDEX IN THE      *
*        KEYWORD TABLE.                                               *
*                                                                     *
***********************************************************************
         B     PRMEDAY7(R15)       BRANCH TO PROPER ROUTINE BY INDEX
PRMEDAY7 B     ERROR094            INDEX = 00
         B     ERROR094            INDEX = 04
         B     ERROR094            INDEX = 08
         B     ERROR094            INDEX = 12
         B     ERROR094            INDEX = 16
         B     ERROR094            INDEX = 20
         B     ERROR094            INDEX = 24
         B     ERROR094            INDEX = 28
         B     ERROR094            INDEX = 32
         B     ERROR094            INDEX = 36
         B     ERROR094            INDEX = 40
         B     ERROR094            INDEX = 44
         B     ERROR094            INDEX = 48
         B     ERROR094            INDEX = 52
         B     ERROR094            INDEX = 56
         B     ERROR094            INDEX = 60
         B     ERROR094            INDEX = 64
         B     ERROR094            INDEX = 68
         B     ERROR094            INDEX = 72
         B     ERROR094            INDEX = 76
         B     ERROR094            INDEX = 80
         B     ERROR094            INDEX = 84
         B     ERROR094            INDEX = 88
         B     ERROR094            INDEX = 92
         B     ERROR094            INDEX = 96
         B     ERROR094            INDEX = 100
         B     ERROR094            INDEX = 104
         B     ERROR094            INDEX = 108
         B     ERROR094            INDEX = 112
         B     ERROR094            INDEX = 116
         B     ERROR094            INDEX = 120
         B     ERROR094            INDEX = 124
         B     ERROR094            INDEX = 128
         B     ERROR094            INDEX = 132
         B     ERROR094            INDEX = 136
         B     ERROR094            INDEX = 140
         B     ERROR094            INDEX = 144
         B     ERROR094            INDEX = 148
         B     ERROR094            INDEX = 152
         B     ERROR094            INDEX = 156
         B     ERROR094            INDEX = 160
         B     ERROR094            INDEX = 164
         B     ERROR094            INDEX = 168
         B     ERROR094            INDEX = 172
         B     EDSSUN              INDEX = 176
         B     EDSNSUN             INDEX = 180
         B     EDSMON              INDEX = 184
         B     EDSNMON             INDEX = 188
         B     EDSTUE              INDEX = 192
         B     EDSNTUE             INDEX = 196
         B     EDSWED              INDEX = 200
         B     EDSNWED             INDEX = 204
         B     EDSTHU              INDEX = 208
         B     EDSNTHU             INDEX = 212
         B     EDSFRI              INDEX = 216
         B     EDSNFRI             INDEX = 220
         B     EDSSAT              INDEX = 224
         B     EDSNSAT             INDEX = 228
         B     EDSWE               INDEX = 232
         B     EDSNWE              INDEX = 236
         B     EDSWD               INDEX = 240
         B     EDSNWD              INDEX = 244
         B     EDSALLD             INDEX = 248
         B     ERROR094            INDEX = 252
         B     ERROR094            INDEX = 256
         B     ERROR094            INDEX = 260
         B     ERROR094            INDEX = 264
         B     ERROR094            INDEX = 268
         B     ERROR094            INDEX = 272
         B     ERROR094            INDEX = 276
         B     ERROR094            INDEX = 280
         B     ERROR094            INDEX = 284
         B     ERROR094            INDEX = 288
         B     ERROR094            INDEX = 292
         B     ERROR094            INDEX = 296
         B     ERROR094            INDEX = 300
         B     ERROR094            INDEX = 304
         B     ERROR094            INDEX = 308
         B     ERROR094            INDEX = 312
         B     ERROR094            INDEX = 316
         B     ERROR094            INDEX = 320
         B     ERROR094            INDEX = 324
         B     ERROR094            INDEX = 328
         B     ERROR094            INDEX = 332
         B     ERROR094            INDEX = 336
         B     ERROR094            INDEX = 340
PRMEDAY8 CLI   0(R7),C' '          END OF SUBPARAMETERS?
         BE    PRMEND              YES, GO GET NEXT OPTION CARD
         CLI   0(R7),C','          PROPER SUBPARAMETER SEPARATOR?
         BNE   ERROR052            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R1,R7               SET START OF NEXT SUBPARM
         B     PRMEDAY1            GO GET NEXT PRINT SUBPARAMETER
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY PERM TAPE MOUNTS                        *
*                                                                     *
*        PERMTAPES>NNNNNN                                             *
*        PERMTAPES<NNNNNN                                             *
*                                                                     *
*        INSURE THAT THE NUMBER OF TAPE MOUNTS IS A NUMERIC FIELD     *
*        FROM 1 TO 6 DIGITS LONG                                      *
*                                                                     *
***********************************************************************
PRMPTP   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR054            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMPTP1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMPTP2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMPTP1  OI    SWITCH+5,SELPTPGE   TURN ON SELECT PERM MOUNT GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMPTP1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMPTP1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR054            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR054            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMPTP1A        LOOP
         B     ERROR054            TOO LONG ERROR
PRMPTP1B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK MOUNT COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALPTPGE        SAVE MOUNT COUNT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMPTP2  OI    SWITCH+5,SELPTPLE   TURN ON SELECT MOUNT LE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMPTP2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMPTP2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR054            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR054            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMPTP2A        LOOP
         B     ERROR054            TOO LONG ERROR
PRMPTP2B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK MOUNT COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALPTPLE        SAVE MOUNT COUNT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY SCRATCH TAPE MOUNTS                     *
*                                                                     *
*        SCRTAPES>NNNNNN                                              *
*        SCRTAPES<NNNNNN                                              *
*                                                                     *
*        INSURE THAT THE NUMBER OF TAPE MOUNTS IS A NUMERIC FIELD     *
*        FROM 1 TO 6 DIGITS LONG                                      *
*                                                                     *
***********************************************************************
PRMSTP   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR055            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMSTP1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMSTP2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMSTP1  OI    SWITCH+5,SELSTPGE   TURN ON SELECT PERM MOUNT GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMSTP1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMSTP1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR055            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR055            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMSTP1A        LOOP
         B     ERROR055            TOO LONG ERROR
PRMSTP1B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK MOUNT COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALSTPGE        SAVE MOUNT COUNT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMSTP2  OI    SWITCH+5,SELSTPLE   TURN ON SELECT MOUNT LE INDICATOR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMSTP2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMSTP2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR055            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR055            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMSTP2A        LOOP
         B     ERROR055            TOO LONG ERROR
PRMSTP2B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK MOUNT COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALSTPLE        SAVE MOUNT COUNT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                SELECT BY EXPANDED STORAGE PAGE COUNT                *
*                                                                     *
*        EXPAGING>NNNNNNNNN                                           *
*        EXPAGING<NNNNNNNNN                                           *
*                                                                     *
*        INSURE THAT THE NUMBER OF PAGES IS A NUMERIC FIELD FROM      *
*        1 TO 9 DIGITS LONG                                           *
*                                                                     *
***********************************************************************
PRMEPG   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR056            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMEPG1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMEPG2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMEPG1  OI    SWITCH+5,SELEPGGE   TURN ON SELECT EXP PAGING GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMEPG1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMEPG1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR056            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR056            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMEPG1A        LOOP
         B     ERROR056            TOO LONG ERROR
PRMEPG1B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK PAGE COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALEPGGE        SAVE PAGE COUNT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMEPG2  OI    SWITCH+5,SELEPGLE   TURN ON SELECT EXP PAGING LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMEPG2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMEPG2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR056            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR056            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMEPG2A        LOOP
         B     ERROR056            TOO LONG ERROR
PRMEPG2B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK PAGE COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALEPGLE        SAVE PAGE COUNT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                SELECT BY AUXILLARY STORAGE PAGE COUNT               *
*                                                                     *
*        AUXAGING>NNNNNNNNN                                           *
*        AUXAGING<NNNNNNNNN                                           *
*                                                                     *
*        INSURE THAT THE NUMBER OF PAGES IS A NUMERIC FIELD FROM      *
*        1 TO 9 DIGITS LONG                                           *
*                                                                     *
***********************************************************************
PRMAPG   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR057            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMAPG1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMAPG2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMAPG1  OI    SWITCH+5,SELAPGGE   TURN ON SELECT AUX PAGING GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMAPG1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMAPG1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR057            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR057            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMAPG1A        LOOP
         B     ERROR057            TOO LONG ERROR
PRMAPG1B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK PAGE COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALAPGGE        SAVE PAGE COUNT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMAPG2  OI    SWITCH+5,SELAPGLE   TURN ON SELECT AUX PAGING LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMAPG2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMAPG2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR057            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR057            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMAPG2A        LOOP
         B     ERROR057            TOO LONG ERROR
PRMAPG2B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK PAGE COUNT
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALAPGLE        SAVE PAGE COUNT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY TOTAL SERVICE UNIT COUNT                *
*                                                                     *
*        SERVUNIT>NNNNNNNNN                                           *
*        SERVUNIT<NNNNNNNNN                                           *
*                                                                     *
*        INSURE THAT THE NUMBER OF TOTAL SERVICE UNITS IS A NUMERIC   *
*        FIELD FROM 1 TO 9 DIGITS LONG                                *
*                                                                     *
***********************************************************************
PRMTSU   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR058            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMTSU1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMTSU2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMTSU1  OI    SWITCH+4,SELTSUGE   TURN ON SELECT TOT SERV UNIT GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMTSU1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMTSU1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR058            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR058            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMTSU1A        LOOP
         B     ERROR058            TOO LONG ERROR
PRMTSU1B BCTR R15,0                MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK TOTAL SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALTSUGE        SAVE TOTAL SERV UNIT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMTSU2  OI    SWITCH+4,SELTSULE   TURN ON SELECT TOT SERV UNIT LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMTSU2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMTSU2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR058            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR058            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMTSU2A        LOOP
         B     ERROR058            TOO LONG ERROR
PRMTSU2B BCTR R15,0                MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK TOTAL SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALTSULE        SAVE TOTAL SERV UNIT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY CPU   SERVICE UNIT COUNT                *
*                                                                     *
*        CSERVUNIT>NNNNNNNNN                                          *
*        CSERVUNIT<NNNNNNNNN                                          *
*                                                                     *
*        INSURE THAT THE NUMBER OF CPU SERVICE UNITS IS A NUMERIC     *
*        FIELD FROM 1 TO 9 DIGITS LONG                                *
*                                                                     *
***********************************************************************
PRMCSU   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR104            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMCSU1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMCSU2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMCSU1  OI    SWITCH+7,SELCSUGE   TURN ON SELECT CPU SERV UNIT GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMCSU1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMCSU1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR104            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR104            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMCSU1A        LOOP
         B     ERROR104            TOO LONG ERROR
PRMCSU1B BCTR R15,0                MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK CPU   SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALCSUGE        SAVE CPU   SERV UNIT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMCSU2  OI    SWITCH+7,SELCSULE   TURN ON SELECT CPU SERV UNIT LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMCSU2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMCSU2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR104            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR104            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMCSU2A        LOOP
         B     ERROR104            TOO LONG ERROR
PRMCSU2B BCTR R15,0                MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK CPU   SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALCSULE        SAVE CPU   SERV UNIT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY I/O   SERVICE UNIT COUNT                *
*                                                                     *
*        ISERVUNIT>NNNNNNNNN                                          *
*        ISERVUNIT<NNNNNNNNN                                          *
*                                                                     *
*        INSURE THAT THE NUMBER OF I/O SERVICE UNITS IS A NUMERIC     *
*        FIELD FROM 1 TO 9 DIGITS LONG                                *
*                                                                     *
***********************************************************************
PRMISU   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR105            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMISU1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMISU2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMISU1  OI    SWITCH+7,SELISUGE   TURN ON SELECT I/O SERV UNIT GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMISU1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMISU1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR105            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR105            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMISU1A        LOOP
         B     ERROR105            TOO LONG ERROR
PRMISU1B BCTR R15,0                MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK I/O   SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALISUGE        SAVE I/O   SERV UNIT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMISU2  OI    SWITCH+7,SELISULE   TURN ON SELECT I/O SERV UNIT LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMISU2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMISU2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR105            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR105            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMISU2A        LOOP
         B     ERROR105            TOO LONG ERROR
PRMISU2B BCTR R15,0                MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK I/O   SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALISULE        SAVE I/O   SERV UNIT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY MSO   SERVICE UNIT COUNT                *
*                                                                     *
*        MSERVUNIT>NNNNNNNNN                                          *
*        MSERVUNIT<NNNNNNNNN                                          *
*                                                                     *
*        INSURE THAT THE NUMBER OF MSO SERVICE UNITS IS A NUMERIC     *
*        FIELD FROM 1 TO 9 DIGITS LONG                                *
*                                                                     *
***********************************************************************
PRMMSU   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR106            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMMSU1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMMSU2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMMSU1  OI    SWITCH+7,SELMSUGE   TURN ON SELECT MSO SERV UNIT GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMMSU1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMMSU1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR106            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR106            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMMSU1A        LOOP
         B     ERROR106            TOO LONG ERROR
PRMMSU1B BCTR R15,0                MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK MSO   SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALMSUGE        SAVE MSO   SERV UNIT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMMSU2  OI    SWITCH+7,SELMSULE   TURN ON SELECT MSO SERV UNIT LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMMSU2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMMSU2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR106            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR106            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMMSU2A        LOOP
         B     ERROR106            TOO LONG ERROR
PRMMSU2B BCTR R15,0                MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK MSO   SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALMSULE        SAVE MSO   SERV UNIT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY SRB   SERVICE UNIT COUNT                *
*                                                                     *
*        SSERVUNIT>NNNNNNNNN                                          *
*        SSERVUNIT<NNNNNNNNN                                          *
*                                                                     *
*        INSURE THAT THE NUMBER OF SRB SERVICE UNITS IS A NUMERIC     *
*        FIELD FROM 1 TO 9 DIGITS LONG                                *
*                                                                     *
***********************************************************************
PRMSSU   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR107            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMSSU1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMSSU2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMSSU1  OI    SWITCH+8,SELSSUGE   TURN ON SELECT SRB SERV UNIT GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMSSU1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMSSU1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR107            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR107            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMSSU1A        LOOP
         B     ERROR107            TOO LONG ERROR
PRMSSU1B BCTR R15,0                MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK SRB   SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALSSUGE        SAVE SRB   SERV UNIT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMSSU2  OI    SWITCH+8,SELSSULE   TURN ON SELECT SRB SERV UNIT LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMSSU2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMSSU2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR107            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR107            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMSSU2A        LOOP
         B     ERROR107            TOO LONG ERROR
PRMSSU2B BCTR R15,0                MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK SRB   SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALSSULE        SAVE SRB   SERV UNIT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY VIO PAGE COUNT                          *
*                                                                     *
*        VIOPAGING>NNNNNNNNN                                          *
*        VIOPAGING<NNNNNNNNN                                          *
*                                                                     *
*        INSURE THAT THE NUMBER OF VIO PAGES IS A NUMERIC FIELD       *
*        FROM 1 TO 9 DIGITS LONG                                      *
*                                                                     *
***********************************************************************
PRMVIO   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    ERROR059            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMVIO1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMVIO2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMVIO1  OI    SWITCH+6,SELVIOGE   TURN ON SELECT TOT SERV UNIT GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMVIO1A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMVIO1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR059            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR059            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMVIO1A        LOOP
         B     ERROR059            TOO LONG ERROR
PRMVIO1B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK TOTAL SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALVIOGE        SAVE TOTAL SERV UNIT GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMVIO2  OI    SWITCH+6,SELVIOLE   TURN ON SELECT TOT SERV UNIT LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PRMVIO2A CLI   0(R7),C' '          END OF COUNT?
         BE    PRMVIO2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    ERROR059            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    ERROR059            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMVIO2A        LOOP
         B     ERROR059            TOO LONG ERROR
PRMVIO2B BCTR  R15,0               MAKE LENGTH OF COUNT REL ZERO
         EX    R15,PACKINDX        PACK TOTAL SERVICE UNITS
         CVB   R15,DOUBLE          CONVERT TO BINARY
         ST    R15,VALVIOLE        SAVE TOTAL SERV UNIT LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY ZAAP CPU TIME                           *
*                                                                     *
*        ZAAPTIME>NNNNNN                                              *
*        ZAAPTIME<NNNNNN                                              *
*                                                                     *
*        INSURE THAT THE CPU TIME IS A NUMERIC FIELD FROM 1 TO 6      *
*        OR 1 TO 8 DIGITS.                                            *
*                                                                     *
*        WHEN CPUTIMEFRACTS IS NOT SPECIFIED, THE MAX. 6 DIGITS ARE   *
*        IN MINUTES, OTHERWISE, THE MAX. 8 DIGITS ARE 1/100 SECONDS.  *
*                                                                     *
*                                                                     *
*        CPUTIMEFRACTS MUST BE SPECIFIED BEFORE ZAAPTIME              *
*                                                                     *
***********************************************************************
PRMZAA   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    PRMZAAER            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMZAA1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMZAA2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMZAA1  OI    SWITCH+9,SELZAAGE   TURN ON SELECT ZAAP CPUTIME GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMZAA01            YES, SET MAXIMUM LENGTH
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         B     PRMZAA02            BRANCH
PRMZAA01 LA    R14,8+1             LOAD MAXIMUM LENGTH + 1
PRMZAA02 SLR   R15,R15             CLEAR LENGTH CTR
PRMZAA1A CLI   0(R7),C' '          END OF TIME?
         BE    PRMZAA1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PRMZAAER            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PRMZAAER            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMZAA1A        LOOP
         B     PRMZAAER            TOO LONG ERROR
PRMZAA1B BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMZAA05            NO, INPUT IS IN MINUTES
         M     R14,=F'6000'        CONVERT MINUTES TO SEC/100
PRMZAA05 ST    R15,VALZAAGE        SAVE ZAAP CPU TIME GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMZAA2  OI    SWITCH+9,SELZAALE   TURN ON SELECT ZAAP CPUTIME LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMZAA11            YES, SET MAXIMUM LENGTH
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         B     PRMZAA12            BRANCH
PRMZAA11 LA    R14,8+1             LOAD MAXIMUM LENGTH + 1
PRMZAA12 SLR   R15,R15             CLEAR LENGTH CTR
PRMZAA2A CLI   0(R7),C' '          END OF TIME?
         BE    PRMZAA2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PRMZAAER            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PRMZAAER            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMZAA2A        LOOP
         B     PRMZAAER            TOO LONG ERROR
PRMZAA2B BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMZAA15            NO, INPUT IS IN MINUTES
         M     R14,=F'6000'        CONVERT MINUTES TO SEC/100
PRMZAA15 ST    R15,VALZAALE        SAVE ZAAP CPU TIME LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE
PRMZAAER TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BZ    ERROR135            NO, INPUT IS IN MINUTES
         B     ERROR136            YES
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY ZIIP CPU TIME                           *
*                                                                     *
*        ZIIPTIME>NNNNNN                                              *
*        ZIIPTIME<NNNNNN                                              *
*                                                                     *
*        INSURE THAT THE CPU TIME IS A NUMERIC FIELD FROM 1 TO 6      *
*        OR 1 TO 8 DIGITS.                                            *
*                                                                     *
*        WHEN CPUTIMEFRACTS IS NOT SPECIFIED, THE MAX. 6 DIGITS ARE   *
*        IN MINUTES, OTHERWISE, THE MAX. 8 DIGITS ARE 1/100 SECONDS.  *
*                                                                     *
*                                                                     *
*        CPUTIMEFRACTS MUST BE SPECIFIED BEFORE ZIIPTIME              *
*                                                                     *
***********************************************************************
PRMZII   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    PRMZIIER            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMZII1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMZII2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMZII1  OI    SWITCH+9,SELZIIGE   TURN ON SELECT ZIIP CPUTIME GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMZII01            YES, SET MAXIMUM LENGTH
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         B     PRMZII02            BRANCH
PRMZII01 LA    R14,8+1             LOAD MAXIMUM LENGTH + 1
PRMZII02 SLR   R15,R15             CLEAR LENGTH CTR
PRMZII1A CLI   0(R7),C' '          END OF TIME?
         BE    PRMZII1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PRMZIIER            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PRMZIIER            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMZII1A        LOOP
         B     PRMZIIER            TOO LONG ERROR
PRMZII1B BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMZII05            NO, INPUT IS IN MINUTES
         M     R14,=F'6000'        CONVERT MINUTES TO SEC/100
PRMZII05 ST    R15,VALZIIGE        SAVE ZIIP CPU TIME GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMZII2  OI    SWITCH+9,SELZIILE   TURN ON SELECT ZIIP CPUTIME LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMZII11            YES, SET MAXIMUM LENGTH
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         B     PRMZII12            BRANCH
PRMZII11 LA    R14,8+1             LOAD MAXIMUM LENGTH + 1
PRMZII12 SLR   R15,R15             CLEAR LENGTH CTR
PRMZII2A CLI   0(R7),C' '          END OF TIME?
         BE    PRMZII2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PRMZIIER            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PRMZIIER            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMZII2A        LOOP
         B     PRMZIIER            TOO LONG ERROR
PRMZII2B BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMZII15            NO, INPUT IS IN MINUTES
         M     R14,=F'6000'        CONVERT MINUTES TO SEC/100
PRMZII15 ST    R15,VALZIILE        SAVE ZIIP CPU TIME LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE
PRMZIIER TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BZ    ERROR137            NO, INPUT IS IN MINUTES
         B     ERROR138            YES
         EJECT
***********************************************************************
*                                                                     *
*                   SELECT BY ZAAP+ZAAP CPU TIME                      *
*                                                                     *
*        SPECTIME>NNNNNN                                              *
*        SPECTIME<NNNNNN                                              *
*                                                                     *
*        INSURE THAT THE CPU TIME IS A NUMERIC FIELD FROM 1 TO 6      *
*        OR 1 TO 8 DIGITS.                                            *
*                                                                     *
*        WHEN CPUTIMEFRACTS IS NOT SPECIFIED, THE MAX. 6 DIGITS ARE   *
*        IN MINUTES, OTHERWISE, THE MAX. 8 DIGITS ARE 1/100 SECONDS.  *
*                                                                     *
*                                                                     *
*        CPUTIMEFRACTS MUST BE SPECIFIED BEFORE SPEPTIME              *
*                                                                     *
***********************************************************************
PRMSPE   CLI   0(R7),C' '          MAKE SURE NOT BLANK
         BE    PRMSPEER            NOT THERE, ERROR
         CLI   0(R7),C'>'          SEE IF GE OPERATOR
         BE    PRMSPE1             YES, BRANCH
         CLI   0(R7),C'<'          SEE IF LE OPERATOR
         BE    PRMSPE2             YES, BRANCH
         B     ERROR032            NO, ERROR
PRMSPE1  OI    SWITCH+9,SELSPEGE   TURN ON SELECT CPUTIME GE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMSPE01            YES, SET MAXIMUM LENGTH
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         B     PRMSPE02            BRANCH
PRMSPE01 LA    R14,8+1             LOAD MAXIMUM LENGTH + 1
PRMSPE02 SLR   R15,R15             CLEAR LENGTH CTR
PRMSPE1A CLI   0(R7),C' '          END OF TIME?
         BE    PRMSPE1B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PRMSPEER            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PRMSPEER            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMSPE1A        LOOP
         B     PRMSPEER            TOO LONG ERROR
PRMSPE1B BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMSPE05            NO, INPUT IS IN MINUTES
         M     R14,=F'6000'        CONVERT MINUTES TO SEC/100
PRMSPE05 ST    R15,VALSPEGE        SAVE SPECIALTY ENGINE TIME GE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
PRMSPE2  OI    SWITCH+9,SELSPELE   TURN ON SELECT CPUTIME LE IND
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMSPE11            YES, SET MAXIMUM LENGTH
         LA    R14,6+1             LOAD MAXIMUM LENGTH + 1
         B     PRMSPE12            BRANCH
PRMSPE11 LA    R14,8+1             LOAD MAXIMUM LENGTH + 1
PRMSPE12 SLR   R15,R15             CLEAR LENGTH CTR
PRMSPE2A CLI   0(R7),C' '          END OF TIME?
         BE    PRMSPE2B            YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PRMSPEER            YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PRMSPEER            YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PRMSPE2A        LOOP
         B     PRMSPEER            TOO LONG ERROR
PRMSPE2B BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CVB   R14,DOUBLE          CONVERT TO BINARY
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BO    PRMSPE15            NO, INPUT IS IN MINUTES
         M     R14,=F'6000'        CONVERT MINUTES TO SEC/100
PRMSPE15 ST    R15,VALSPELE        SAVE SPECIALTY ENGINE TIME LE VALUE
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE
PRMSPEER TM    SWITCH+8,CPUFRACT   CPU TIME WITH 1/100?
         BZ    ERROR139            NO, INPUT IS IN MINUTES
         B     ERROR140            YES
         EJECT
***********************************************************************
*                                                                     *
*                     TOTALS OPTION                                   *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMTOT   OI    SWITCH+4,SELTOT     TURN ON TOTALS IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
***********************************************************************
*                                                                     *
*                     AVERAGES OPTION                                 *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMAVG   OI    SWITCH+4,SELTOT+SELAVG TURN ON AVERAGE IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
***********************************************************************
*                                                                     *
*                     NODETAIL OPTION                                 *
*                                                                     *
*        TURN ON THE NO DETAIL REPORT OPTION BIT                      *
*                                                                     *
***********************************************************************
PRMNOD   OI    SWITCH+4,SELNODET+SELTOT TURN ON NO DETAIL IND
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                       EXCLUDE BY JOBNAME                            *
*                                                                     *
*        EXJOBNAME=JJJJJJJJ(NN)                                       *
*                                                                     *
*        INSURE THAT THE PARM IS EXACTLY 1 TO EIGHT ALPHANUMERIC      *
*        CHARACTERS LONG.  THE OPTIONAL INDEX VALUE CAN BE            *
*        SPECIFIED WITHIN PARENTHESIS TO SPECIFY THE OFFSET           *
*        WITHIN THE ACTUAL JOBNAME THAT THE SPECIFIED "JOBNAME"       *
*        IS SUPPOSED TO START.  THE OPTIONAL INDEX VALUE MUST         *
*        CONTAIN 1 TO 2 NUMERIC DIGITS.                               *
*                                                                     *
***********************************************************************
XPRMJBN  OI    SWITCH,SELJOBNM     TURN ON SELECT JOBNAME INDICATOR
         MVI   VALJOBNM,X'00'      INITIALIZE
         MVI   VALJOBNM+1,X'00'       JOBNAME
         MVC   VALJOBNM+2(8),=CL8' '     ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         SLR   R15,R15             CLEAR COUNTER REGISTER
XPRMJBN1 CLI   0(R7),C' '          END OF JOBNM?
         BE    XPRMJBN5            YES, BRANCH
         CLI   0(R7),C'('          START OF OFFSET FIELD?
         BE    XPRMJBN2            YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         LA    R7,1(,R7)           ADD 1 TO JOBNAME POINTER
         B     XPRMJBN1            LOOP
XPRMJBN2 LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR071            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR072            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         LA    R7,1(R7)            POINT TO INDEX VALUE
         LR    R1,R7               SAVE PARM ADDRESS
         SLR   R15,R15             CLEAR COUNTER REG
         CLI   0(R7),C')'          END OF INDEX
         BE    XPRMJBN3            YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   1(R7),C')'          END OF INDEX
         BE    XPRMJBN3            YES, BRANCH
         LA    R15,1(,R15)         ADD 1 TO LENGTH COUNTER
         CLI   2(R7),C')'          END OF INDEX
         BE    XPRMJBN3            YES, BRANCH
         B     ERROR073            INDEX LENGTH EXCEEDS 2 CHARACTERS
XPRMJBN3 LTR   R15,R15             SEE IF ZERO LENGTH
         BZ    XPRMJBN6            YES, NO INDEX
         LR    R14,R15             SAVE INDEX LENGTH
         LR    R2,R7               SAVE INDEX POINTER
XPRMJBN4 CLI   0(R2),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR074            YES, ERROR
         CLI   0(R2),C'9'          TEST FOR GT NINE
         BH    ERROR074            YES, ERROR
         LA    R2,1(,R2)           INDEX TO NEXT CHAR
         BCT   R14,XPRMJBN4        LOOP
         BCTR  R15,0               MAKE INDEX LENGTH RELATIVE TO ZERO
         EX    R15,PACKINDX        PACK THE INDEX VALUE
         CVB   R15,DOUBLE          CONVERT INDEX VALUE TO BINARY
         BCTR  R15,0               MAKE INDEX VALUE RELATIVE TO ZERO
         STC   R15,VALJOBNM+1      SAVE INDEX VALUE
         B     XPRMJBN6            BRANCH
XPRMJBN5 LTR   R15,R15             TEST LENGTH OF JOBNAME
         BZ    ERROR070            ZERO, ERROR
         CH    R15,=H'8'           SEE IF LENGTH EXCEEDS 8
         BH    ERROR070            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVJOBNM         MOVE JOBNAME TO SAVE AREA
         STC   R15,VALJOBNM        SAVE JOBNAME LENGTH
         MVI   VALJOBNM+1,X'00'    SET INDEX TO ZERO
XPRMJBN6 ICM   R15,B'1111',XJOBNTBL LOAD ADDRESS OF EXJOBNAME TABLE
         BNZ   XPRMJBN7            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 EXJOBNAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XJOBNTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMJBN7 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMJBN8 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMJBN9            YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR075            YES, ERROR
         B     XPRMJBN8            NO, LOOP
XPRMJBN9 MVC   0(10,R15),VALJOBNM  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                       EXCLUDE BY JOBNO                              *
*                                                                     *
*        EXJOBNO=TTT.....                                             *
*                                                                     *
*        INSURE THAT THE PARM IS EXACTLY 8 CHARACTERS LONG AND        *
*        HAS THE FOLLOWING FORMS:                                     *
*                                                                     *
*        JOB.....  OR  STC.....  OR  TSU..... OR                      *
*        J0 .....  OR  S0 .....  OR  T0 .....                         *
*                                                                     *
*        WHERE ..... IS THE NUMERIC JOB/STC/TSU NUMBER                *
*                                                                     *
***********************************************************************
XPRMJNO  OI    SWITCH,SELJOBNO     TURN ON SELECT JOBNO INDICATOR
         MVC   VALJOBNO,=CL8' '    INITIALIZE JOB NUMBER ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         MVC   VALJOBNO,0(R7)      SAVE JOBNO VALUE
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE JOBNO NOT BLANK
         BE    ERROR076            NOT THERE, ERROR
         CLC   0(3,R7),=C'JOB'     SEE IF STARTS WITH 'JOB'
         BE    XPRMJNO1            YES, BRANCH
         CLC   0(2,R7),=C'J0'      SEE IF STARTS WITH 'J0'
         BE    XPRMJNO1            YES, BRANCH
         CLC   0(3,R7),=C'STC'     SEE IF STARTS WITH 'STC'
         BE    XPRMJNO1            YES, BRANCH
         CLC   0(2,R7),=C'S0'      SEE IF STARTS WITH 'S0'
         BE    XPRMJNO1            YES, BRANCH
         CLC   0(3,R7),=C'TSU'     SEE IF STARTS WITH 'TSU'
         BE    XPRMJNO1            YES, BRANCH
         CLC   0(2,R7),=C'T0'      SEE IF STARTS WITH 'T0'
         BE    XPRMJNO1            YES, BRANCH
         B     ERROR076            NO, ERROR
XPRMJNO1 LA    R7,3(,R7)           INCREMENT PAST JOB TYPE
         LA    R14,5               SET LENGTH TO 5
XPRMJNO2 CLI   0(R7),C'0'          TEST FOR LESS THAN ZERO
         BL    ERROR076            YES, ERROR
         CLI   0(R7),C'9'          TEST FOR GT NINE
         BH    ERROR076            YES, ERROR
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         BCT   R14,XPRMJNO2        LOOP
         CLI   0(R7),C' '          END OF JOBNO
         BNE   ERROR076            NO, ERROR
XPRMJNO3 ICM   R15,B'1111',XJBNOTBL LOAD ADDRESS OF EXJOBNO TABLE
         BNZ   XPRMJNO4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=8008         GET ROOM FOR 1000 EXJOBNO ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XJBNOTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMJNO4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMJNO5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMJNO6            YES, GO SAVE NEW ENTRY
         LA    R15,08(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR077            YES, ERROR
         B     XPRMJNO5            NO, LOOP
XPRMJNO6 MVC   0(08,R15),VALJOBNO  SAVE NEW ENTRY
         MVI   08(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY SYSTEM ID                             *
*                                                                     *
*        EXSYSTEM=SSSS                                                *
*                                                                     *
*        WHERE SSSS IS THE SMF SYSTEM ID.  THIS FIELD ONLY HAS        *
*        MEANING IF THE INPUT SMF DATA HAS COME FROM MULTIPLE         *
*        MVS SYSTEMS.                                                 *
*                                                                     *
***********************************************************************
XPRMSYS  OI    SWITCH,SELSYSID     TURN ON SELECT SYSID INDICATOR
         MVC   VALSYSID,=CL4' '    INITIALIZE SYSID
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE SYSID NOT BLANK
         BE    ERROR078            NOT THERE, ERROR
         MVC   VALSYSID(4),0(R7)   SAVE SYS ID
XPRMSYS1 ICM   R15,B'1111',XSYSTBL LOAD ADDRESS OF EXSYSID TABLE
         BNZ   XPRMSYS2            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=4004         GET ROOM FOR 1000 EXSYSID ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XSYSTBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMSYS2 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMSYS3 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMSYS4            YES, GO SAVE NEW ENTRY
         LA    R15,04(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR079            YES, ERROR
         B     XPRMSYS3            NO, LOOP
XPRMSYS4 MVC   0(04,R15),VALSYSID  SAVE NEW ENTRY
         MVI   04(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY PROCSTEP NAME                         *
*                                                                     *
*        EXPROCSTEP=SSSSSSSS                                          *
*                                                                     *
*        INSURE THAT THE PROC STEP NAME IS 1 TO 8 CHARACTERS LONG     *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
XPRMPST  OI    SWITCH+4,SELPSTEP   TURN ON SELECT PROC STEP IND
         MVC   VALPSTEP(2),=X'0000' INITIALIZE PROC STEP
         MVC   VALPSTEP+2(8),=CL8' '  NAME ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE PROC STEP NAME NOT BLANK
         BE    ERROR080            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
XPRMPST1 CLI   0(R7),C' '          END OF PROC STEP NAME
         BE    XPRMPST2            YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     XPRMPST1            LOOP
XPRMPST2 CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR080            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALPSTEP        SAVE LENGTH OF PROC STEP NAME
         MVC   VALPSTEP+2(8),0(R1) SAVE PROC STEP NAME
XPRMPST3 ICM   R15,B'1111',XPSTPTBL LOAD ADDRESS OF EXPSTEP TABLE
         BNZ   XPRMPST4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 EXPSTEP ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XPSTPTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMPST4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMPST5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMPST6            YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR081            YES, ERROR
         B     XPRMPST5            NO, LOOP
XPRMPST6 MVC   0(10,R15),VALPSTEP  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY JOBSTEP NAME                          *
*                                                                     *
*        EXJOBSTEP=SSSSSSSS                                           *
*                                                                     *
*        INSURE THAT THE JOB STEP NAME IS 1 TO 8 CHARACTERS LONG      *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
XPRMJST  OI    SWITCH+4,SELJSTEP   TURN ON SELECT JOB STEP IND
         MVC   VALJSTEP(2),=X'0000' INITIALIZE JOB STEP
         MVC   VALJSTEP+2(8),=CL8' '  NAME ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE JOB STEP NAME NOT BLANK
         BE    ERROR082            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
XPRMJST1 CLI   0(R7),C' '          END OF JOB STEP NAME
         BE    XPRMJST2            YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     XPRMJST1            LOOP
XPRMJST2 CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR082            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALJSTEP        SAVE LENGTH OF JOB STEP NAME
         MVC   VALJSTEP+2(8),0(R1) SAVE JOB STEP NAME
XPRMJST3 ICM   R15,B'1111',XJSTPTBL LOAD ADDRESS OF EXJSTEP TABLE
         BNZ   XPRMJST4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 EXJSTEP ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XJSTPTBL        STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMJST4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMJST5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMJST6            YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR083            YES, ERROR
         B     XPRMJST5            NO, LOOP
XPRMJST6 MVC   0(10,R15),VALJSTEP  SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY PROGRAM NAME                          *
*                                                                     *
*        EXPROGRAM=PPPPPPPP                                           *
*                                                                     *
*        INSURE THAT THE PROGRAM NAME IS 1 TO 8 CHARACTERS LONG       *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
XPRMPGM  OI    SWITCH,SELPGM       TURN ON SELECT PGM INDICATOR
         MVC   VALPGM(2),=X'0000'  INITIALIZE PROGRAM
         MVC   VALPGM+2(8),=CL8' '    NAME ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE PGM NAME NOT BLANK
         BE    ERROR084            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
XPRMPGM1 CLI   0(R7),C' '          END OF PROGRAM NAME
         BE    XPRMPGM2            YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     XPRMPGM1            LOOP
XPRMPGM2 CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR084            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALPGM          SAVE LENGTH OF PROGRAM NAME
         MVC   VALPGM+2(8),0(R1)   SAVE PROGRAM NAME
XPRMPGM3 ICM   R15,B'1111',XPGMTBL LOAD ADDRESS OF EXPGM NAME TABLE
         BNZ   XPRMPGM4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 EXPGM NAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XPGMTBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMPGM4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMPGM5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMPGM6            YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR085            YES, ERROR
         B     XPRMPGM5            NO, LOOP
XPRMPGM6 MVC   0(10,R15),VALPGM    SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY SECURITY USERID                       *
*                                                                     *
*        EXUSERID=UUUUUUUU                                            *
*                                                                     *
*        INSURE THAT THE USERID NAME IS 1 TO 8 CHARACTERS LONG        *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
XPRMUID  OI    SWITCH+1,SELUID     TURN ON SELECT USERID INDICATOR
         MVC   VALUID(2),=X'0000'  INITIALIZE SECURITY
         MVC   VALUID+2(8),=CL8' '    USERID ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE USERID NOT BLANK
         BE    ERROR086            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
XPRMUID1 CLI   0(R7),C' '          END OF USERID
         BE    XPRMUID2            YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     XPRMUID1            LOOP
XPRMUID2 CH    R15,=H'8'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR086            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALUID          SAVE LENGTH OF USERID
         MVC   VALUID+2(8),0(R1)   SAVE USERID
XPRMUID3 ICM   R15,B'1111',XUIDTBL LOAD ADDRESS OF EXUID NAME TABLE
         BNZ   XPRMUID4            NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=10010        GET ROOM FOR 1000 EXUID NAME ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XUIDTBL         STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMUID4 SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMUID5 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMUID6            YES, GO SAVE NEW ENTRY
         LA    R15,10(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR087            YES, ERROR
         B     XPRMUID5            NO, LOOP
XPRMUID6 MVC   0(10,R15),VALUID    SAVE NEW ENTRY
         MVI   10(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    EXCLUDE BY CONDITION CODE                        *
*                                                                     *
*        EXCCODE=CCCCC                                                *
*                                                                     *
*        INSURE THAT THE CONDITION CODE IS 1 TO 5 CHARACTERS LONG     *
*        SAVING THE LENGTH FOR A GENERIC COMPARE.                     *
*                                                                     *
***********************************************************************
XPRMCC   OI    SWITCH+1,SELCC      TURN ON SELECT CCODE INDICATOR
         MVC   VALCC(2),=X'0000'   INITIALIZE CONDITION
         MVC   VALCC+2(5),=CL5' '     CODE ENTRY
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R1,R7               SAVE PARM ADDRESS
         CLI   0(R7),C' '          MAKE SURE CCODE NOT BLANK
         BE    ERROR088            NOT THERE, ERROR
         SLR   R15,R15             SET LENGTH TO 0
XPRMCC1  CLI   0(R7),C' '          END OF CCODE
         BE    XPRMCC2             YES, BRANCH
         LA    R7,1(,R7)           INDEX TO NEXT CHAR
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     XPRMCC1             LOOP
XPRMCC2  CH    R15,=H'5'           SEE IF EXCEEDS MAX LENGTH
         BH    ERROR088            YES, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         STH   R15,VALCC           SAVE LENGTH OF CCODE
         MVC   VALCC+2(5),0(R1)    SAVE CCODE
XPRMCC3  ICM   R15,B'1111',XCCTBL  LOAD ADDRESS OF EXCCODE TABLE
         BNZ   XPRMCC4             NOT ZERO, ALREADY GOT STORAGE
         GETMAIN R,LV=7007         GET ROOM FOR 1000 EXCCODE ENTRIES
         LR    R15,R1              SAVE TABLE ADDRESS
         ST    R15,XCCTBL          STORE TABLE ADDRESS
         MVI   0(R15),X'FF'        FLAG END OF TABLE
XPRMCC4  SLR   R14,R14             SET ENTRY COUNTER TO  ZERO
XPRMCC5  CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    XPRMCC6             YES, GO SAVE NEW ENTRY
         LA    R15,07(,R15)        INCREMENT TO NEXT TABLE ENTRY
         LA    R14,1(,R14)         ADD 1 TO ENTRY COUNT
         CH    R14,=H'1000'        SEE IF EXCEEDS MAXIMUM ENTRY COUNT
         BNL   ERROR089            YES, ERROR
         B     XPRMCC5             NO, LOOP
XPRMCC6  MVC   0(07,R15),VALCC     SAVE NEW ENTRY
         MVI   07(R15),X'FF'       FLAG NEW END OF TABLE
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                      ENTER SUBTOTAL CRITERIA                        *
*                                                                     *
*        SUBTOTAL=A,B,C,D                                             *
*                                                                     *
*        THIS ROUTINE WILL VALIDATE THE LIST OF SUBTOTAL OPTIONS      *
*                                                                     *
*        NOTE THAT ALL OF THE ELIGIBLE SUBPARAMETERS ARE KEYWORDS     *
*        EXCEPT FOR JOBNAME.  IT CAN HAVE THE FOLLOWING FORMAT:       *
*                                                                     *
*        JOBNAME(OFFSET,LENGTH) WHERE                                 *
*                                                                     *
*           OFFSET IS A VALUE FROM 1 TO 7 INDICATING THE STARTING     *
*                  POSITION IN JOBNAME FOR SUBTOTALING TO USE.        *
*                                                                     *
*           LENGTH IS A VALUE FROM 1 TO 8 INDICATING THE LENGTH       *
*                  OF THE PORTION OF JOBNAME STARTING AT "OFFSET"     *
*                  FOR SUBTOTALING TO USE.                            *
*                                                                     *
***********************************************************************
PRMSUB   OI    SWITCH+8,SELSUBT    TURN ON SELECT SUBTOTAL INDICATOR
         OI    SWITCH+4,SELTOT     TURN ON TOTALS ALSO (BY IMPLICATION)
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
         LR    R2,R7               SAVE START ADDRESS OF SUBPARM
         CLI   0(R7),C' '          MAKE SURE SUBTOTAL SUBPARMS PRESENT
         BE    ERROR108            NONE, ERROR
         XC    SUBTOPT(16),SUBTOPT ZERO THE 4 SUBTOTAL OPTIONS
         LA    R5,SUBTOPT          POINT TO SUBTOTAL OPTIONS LIST
         MVC   SUBTITLE(56),BLANKS BLANK THE 4 SUBTOTAL TITLES
         LA    R6,SUBTITLE         POINT TO SUBTOTAL TITLES
         XC    SUBTNBR,SUBTNBR     SET NUMBER OF SUBTOTAL PARMS TO 0
PRMSUB01 CLC   SUBTNBR,=H'4'       HAVE WE ALREADY PROCESSED 4 PARMS
         BNL   ERROR109            YES, ERROR
         SLR   R3,R3               SET LENGTH TO ZERO
PRMSUB02 CLI   0(R7),C' '          END OF SUBTOTAL PARM
         BE    PRMSUB03            YES, BRANCH
         CLI   0(R7),C','          END OF SUBTOTAL PARM
         BE    PRMSUB03            YES, BRANCH
         CLI   0(R7),C'('          END OF SUBTOTAL PARM
         BE    PRMSUB03            YES, BRANCH
         LA    R3,1(,R3)           ADD 1 TO LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHAR OF PARM
         B     PRMSUB02            LOOP
PRMSUB03 LTR   R3,R3               TEST LENGTH
         BZ    ERROR110            ZERO, ERROR
         BCTR  R3,0                MAKE MACHINE LENGTH
         L     R4,=V(OPTKEY)       LOAD ADDRESS OF SUBTOTAL KEYWORD TBL
PRMSUB04 CLI   0(R4),X'FF'         END OF TABLE
         BE    ERROR111            YES, ERROR, INVALID KEYWORD
         CH    R3,0(R4)            SEE IF LENGTH LT MINIMUM LENGTH
         BL    PRMSUB05            YES, BRANCH
         EX    R3,COMPXPRM         COMPARE SUBTOTAL PARM
         BE    PRMSUB06            MATCH, BRANCH
PRMSUB05 LA    R4,36(,R4)          INCREMENT TO NEXT TABLE ENTRY
         B     PRMSUB04            LOOP
PRMSUB06 CLI   22(R4),C'Y'         SEE IF ELIGIBLE SUBTOTAL OPTION
         BNE   ERROR111            NO, ERROR
         LH    R15,SUBTNBR         LOAD NUMBER OF SUBTOTAL PARMS
         LA    R15,1(,R15)         ADD 1 TO NUMBER OF PARMS
         STH   R15,SUBTNBR         SAVE NEW NUMBER OF SUBTOTAL PARMS
         STC   R15,0(R5)           SET PARM NUMBER
         MVC   2(2,R5),2(R4)       SAVE PARM BRANCH TABLE OFFSET
         CLC   2(2,R4),=H'0'       SEE IF JOBNAME PARM
         BNE   PRMSUB16            NO, BRANCH
***********************************************************************
*        PROCESS THE JOBNAME SUBTOTAL PARAMETER                       *
***********************************************************************
PRMSUB07 MVC   SUBTJOBO,=H'0'      SET JOBNAME OFFSET TO ZERO
         MVC   SUBTJOBL,=H'7'      SET JOBNAME LENGTH TO 7 (REL 0)
         CLI   0(R7),C'('          SEE IF START OF INDEX/LENGTH SPECS
         BNE   PRMSUB15            NO, SKIP INDEX/LENGTH
         LR    R1,R7               POINT TO START OF SUBPARAMETERS
         L     R15,=V(JOBSUB)      LOAD ADDRESS OF JOB SUBPARMS ROUTINE
         BALR  R14,R15             GO TO PARSE JOB SUBPARMS ROUTINE
         LR    R7,R1               POINT TO CLOSING ")" OF PARAMETERS
         LTR   R15,R15             TEST RETURN CODE
         BZ    PRMSUB08            ZERO, FORMAT IS OK
         CH    R15,=H'1'           SEE IF RC=1
         BE    PRMSUB15            YES, CANNOT HAPPEN, BUT CONTINUE
         CH    R15,=H'2'           SEE IF RC=2
         BE    ERROR112            YES, ERROR, NO CLOSING ")"
         CH    R15,=H'3'           SEE IF RC=3
         BE    ERROR113            YES, TOO MANY SUBPARMS
PRMSUB08 LH    R15,JSUBCNT         LOAD NUMBER OF SUBPARMS
         CH    R15,=H'2'           SEE IF LESS THAN 2 SUBPARMS
         BL    ERROR114            YES, MUST HAVE 2 SUBPARMS
PRMSUB09 LH    R15,JSUB1L          LOAD LENGTH OF OFFSET
         LTR   R15,R15             TEST LENGTH
         BZ    PRMSUB12            ZERO, NULL, LEAVE DEFAULT OF 1
         CH    R15,=H'2'           SEE IF LENGTH GT 2
         BH    ERROR116            YES, ERROR
         L     R14,JSUB1A          LOAD ADDRESS OF OFFSET
PRMSUB10 CLI   0(R14),C'0'         SEE IF NUMERIC PARM
         BL    ERROR115            NO, ERROR
         CLI   0(R14),C'9'         SEE IF NUMERIC PARM
         BH    ERROR115            NO, ERROR
         LA    R14,1(,R14)         INCREMENT TO NEXT CHARACTER OF PARM
         BCT   R15,PRMSUB10        LOOP
         L     R14,JSUB1A          RELOAD ADDRESS OF OFFSET
         LH    R15,JSUB1L          RELOAD LENGTH OF OFFSET
PRMSUB11 BCTR  R15,0               MAKE PARM LENGTH RELATIVE TO 0
         EX    R15,PACKSUBT        PACK OFFSET
         CVB   R15,DOUBLE          CONVERT OFFSET TO BINARY
         CH    R15,=H'0'           SEE IF OFFSET = 0
         BE    ERROR117            YES, ERROR
         CH    R15,=H'8'           SEE IF OFFSET GT 8
         BH    ERROR117            YES, ERROR
         BCTR  R15,0               MAKE OFFSET RELATIVE TO 0
         STH   R15,SUBTJOBO        SAVE OFFSET
PRMSUB12 LH    R15,JSUB2L          LOAD LENGTH OF LENGTH
         LTR   R15,R15             TEST LENGTH
         BZ    PRMSUB15            ZERO, NULL, LEAVE DEFAULT OF 8
         CH    R15,=H'2'           SEE IF LENGTH GT 2
         BH    ERROR118            YES, ERROR
         L     R14,JSUB2A          LOAD ADDRESS OF LENGTH
PRMSUB13 CLI   0(R14),C'0'         SEE IF NUMERIC PARM
         BL    ERROR119            NO, ERROR
         CLI   0(R14),C'9'         SEE IF NUMERIC PARM
         BH    ERROR119            NO, ERROR
         LA    R14,1(,R14)         INCREMENT TO NEXT CHARACTER OF PARM
         BCT   R15,PRMSUB13        LOOP
         L     R14,JSUB2A          RELOAD ADDRESS OF LENGTH
         LH    R15,JSUB2L          RELOAD LENGTH OF LENGTH
PRMSUB14 CH    R15,=H'2'           SEE IF PARM LENGTH IS GT 2
         BH    ERROR116            YES, ERROR
         BCTR  R15,0               MAKE PARM LENGTH RELATIVE TO 0
         EX    R15,PACKSUBT        PACK LENGTH
         CVB   R15,DOUBLE          CONVERT LENGTH TO BINARY
         CH    R15,=H'0'           SEE IF LENGTH = 0
         BE    ERROR120            YES, ERROR
         CH    R15,=H'8'           SEE IF LENGTH GT 8
         BH    ERROR120            YES, ERROR
         BCTR  R15,0               MAKE LENGTH RELATIVE TO 0
         STH   R15,SUBTJOBL        SAVE LENGTH
         LA    R7,1(,R7)           INCREMENT PAST ')'
******************************************************
*     SAVE JOBNAME PARAMETER                         *
*       R2 - START ADDRESS OF SUBPARAMETER           *
*       R7 - END ADDRESS OF SUBPARAMETER             *
******************************************************
PRMSUB15 LR    R3,R7               CALCULATE MACHINE
         SR    R3,R2                  LENGTH OF
         BCTR  R3,0                      PARM
         SPACE 3
******************************************************
*     SAVE JOBNAME PARAMETER                         *
*       R2 - START ADDRESS OF SUBPARAMETER           *
*       R3 - MACHINE LENGTH OF SUBPARAMETER          *
******************************************************
PRMSUB16 EX    R3,SAVEPRM          SAVE SUBPARM VALUE
         CLI   0(R7),C' '          END OF SUBPARAMETERS?
         BE    PRMEND              YES, GO GET NEXT OPTION CARD
         CLI   0(R7),C','          PROPER SUBPARAMETER SEPARATOR?
         BNE   ERROR121            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R2,R7               SAVE START ADDRESS OF SUBPARM
         LA    R5,4(,R5)           POINT TO NEXT SUBTOTALS OPTION LST
         LA    R6,14(,R6)          POINT TO NEXT SUBTOTALS TITLE
         B     PRMSUB01            GO GET NEXT SUBTOTAL SUBPARAMETER
COMPXPRM CLC   0(0,R2),4(R4)       **** EXECUTE ONLY ****
PACKSUBT PACK  DOUBLE,0(0,R14)     **** EXECUTE ONLY ****
SAVEPRM  MVC   0(0,R6),0(R2)       **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*                                                                     *
*                     NOJOB OPTION                                    *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMNOJB  OI    SWITCH+8,SELNOBAT   TURN ON NOBATCH IND
         B     PRMEND              GO GET NEXT OPTION CARD
         SPACE 3
         EJECT
***********************************************************************
*                                                                     *
*                 START DAY-OF-THE-WEEK ROUTINES                      *
*                                                                     *
*        HANDLE THE FOLLOWING SDAY SUBPARAMETERS:                     *
*                                                                     *
*        SUNDAY/NOSUNDAY         SELECT OR BYPASS THIS DAY            *
*        MONDAY/NOMONDAY         SELECT OR BYPASS THIS DAY            *
*        TUESDAY/NOTUESDAY       SELECT OR BYPASS THIS DAY            *
*        WEDNESDAY/NOWEDNESDAY   SELECT OR BYPASS THIS DAY            *
*        THURSDAY/NOTHURSDAY     SELECT OR BYPASS THIS DAY            *
*        FRIDAY/NOFRIDAY         SELECT OR BYPASS THIS DAY            *
*        SATURDAY/NOSATURDAY     SELECT OR BYPASS THIS DAY            *
*                                                                     *
*        WEEKEND/NOWEEKEND       SELECT OR BYPASS SAT AND SUN         *
*        WEEKDAY/NOWEEKDAY       SELECT OR BYPASS MON - FRI           *
*        EVERYDAY/ALLDAYS        SELECT SUN - SAT                     *
*                                                                     *
***********************************************************************
SDSSUN   OI    SDAYSW,SUN          TURN ON SUNDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNSUN  NI    SDAYSW,255-SUN      TURN OFF SUNDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSMON   OI    SDAYSW,MON          TURN ON MONDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNMON  NI    SDAYSW,255-MON      TURN OFF MONDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSTUE   OI    SDAYSW,TUE          TURN ON TUESDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNTUE  NI    SDAYSW,255-TUE      TURN OFF TUESDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSWED   OI    SDAYSW,WED          TURN ON WEDNESDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNWED  NI    SDAYSW,255-WED      TURN OFF WEDNESDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSTHU   OI    SDAYSW,THU          TURN ON THURSDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNTHU  NI    SDAYSW,255-THU      TURN OFF THURSDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSFRI   OI    SDAYSW,FRI          TURN ON FRIDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNFRI  NI    SDAYSW,255-FRI      TURN OFF FRIDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSSAT   OI    SDAYSW,SAT          TURN ON SATURDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNSAT  NI    SDAYSW,255-SAT      TURN OFF SATURDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSWE    OI    SDAYSW,SAT+SUN      TURN ON SATURDAY AND SUNDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNWE   NI    SDAYSW,255-SAT-SUN  TURN OFF SATURDAY AND SUNDAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSWD    OI    SDAYSW,MON+TUE+WED+THU+FRI TURN ON WEEKDAYS
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSNWD   NI    SDAYSW,255-MON-TUE-WED-THU-FRI TURN OFF WEEKDAYS
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
SDSALLD  OI    SDAYSW,SUN+MON+TUE+WED+THU+FRI+SAT TURN ON EVERY DAY
         B     PRMSDAY8            GO TO DAY-OF-WEEK END
         EJECT
***********************************************************************
*                                                                     *
*                   END DAY-OF-THE-WEEK ROUTINES                      *
*                                                                     *
*        HANDLE THE FOLLOWING EDAY SUBPARAMETERS:                     *
*                                                                     *
*        SUNDAY/NOSUNDAY         SELECT OR BYPASS THIS DAY            *
*        MONDAY/NOMONDAY         SELECT OR BYPASS THIS DAY            *
*        TUESDAY/NOTUESDAY       SELECT OR BYPASS THIS DAY            *
*        WEDNESDAY/NOWEDNESDAY   SELECT OR BYPASS THIS DAY            *
*        THURSDAY/NOTHURSDAY     SELECT OR BYPASS THIS DAY            *
*        FRIDAY/NOFRIDAY         SELECT OR BYPASS THIS DAY            *
*        SATURDAY/NOSATURDAY     SELECT OR BYPASS THIS DAY            *
*                                                                     *
*        WEEKEND/NOWEEKEND       SELECT OR BYPASS SAT AND SUN         *
*        WEEKDAY/NOWEEKDAY       SELECT OR BYPASS MON - FRI           *
*        EVERYDAY/ALLDAYS        SELECT SUN - SAT                     *
*                                                                     *
***********************************************************************
EDSSUN   OI    EDAYSW,SUN          TURN ON SUNDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNSUN  NI    EDAYSW,255-SUN      TURN OFF SUNDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSMON   OI    EDAYSW,MON          TURN ON MONDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNMON  NI    EDAYSW,255-MON      TURN OFF MONDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSTUE   OI    EDAYSW,TUE          TURN ON TUESDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNTUE  NI    EDAYSW,255-TUE      TURN OFF TUESDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSWED   OI    EDAYSW,WED          TURN ON WEDNESDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNWED  NI    EDAYSW,255-WED      TURN OFF WEDNESDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSTHU   OI    EDAYSW,THU          TURN ON THURSDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNTHU  NI    EDAYSW,255-THU      TURN OFF THURSDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSFRI   OI    EDAYSW,FRI          TURN ON FRIDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNFRI  NI    EDAYSW,255-FRI      TURN OFF FRIDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSSAT   OI    EDAYSW,SAT          TURN ON SATURDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNSAT  NI    EDAYSW,255-SAT      TURN OFF SATURDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSWE    OI    EDAYSW,SAT+SUN      TURN ON SATURDAY AND SUNDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNWE   NI    EDAYSW,255-SAT-SUN  TURN OFF SATURDAY AND SUNDAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSWD    OI    EDAYSW,MON+TUE+WED+THU+FRI TURN ON WEEKDAYS
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSNWD   NI    EDAYSW,255-MON-TUE-WED-THU-FRI TURN OFF WEEKDAYS
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         SPACE 3
EDSALLD  OI    EDAYSW,SUN+MON+TUE+WED+THU+FRI+SAT TURN ON EVERY DAY
         B     PRMEDAY8            GO TO DAY-OF-WEEK END
         EJECT
***********************************************************************
*                                                                     *
*                     JOBLEVEL OPTION                                 *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMJOBL  TM    SWITCH+6,SELINT     SEE IF INTERVAL ALSO SPECIFIED
         BO    ERROR091            YES, ERROR
         OI    SWITCH+6,SELJOBL    TURN ON JOBLEVEL IND
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     INTERVAL OPTION                                 *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMINT   TM    SWITCH+6,SELJOBL    SEE IF JOBLEVEL ALSO SPECIFIED
         BO    ERROR091            YES, ERROR
         OI    SWITCH+6,SELINT     TURN ON INTERVAL IND
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     TIMEINCLUSIVE OPTION                            *
*                                                                     *
*        TURN ON THE CORRECT OPTION BIT                               *
*                                                                     *
***********************************************************************
PRMTIMEI OI    SWITCH+7,SELTIMEI   TURN ON TIMEINCLUSIVE IND
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                     SELECT BY INCLUSIVE RANGE                       *
*                                                                     *
*        IRANGE=SDATE,STIME:EDATE,ETIME                               *
*                                                                     *
*        SDATE AND STIME SPECIFY THE START OF THE INCLUSIVE           *
*        RANGE.  EDATE AND ETIME SPECIFY THE END OF THE               *
*        INCLUSIVE RANGE.  THIS RANGE WILL BE USED TO SELECT          *
*        ALL OR PART OF AN SMF RECORD FOR REPORTING.  A PARTIAL       *
*        RECORD WILL BE CREATED FROM THE NORMAL SMF DATA IF           *
*        IF THE SPECIFIED RANGE COVERS ONLY A PORTION OF THE          *
*        TIME COVERED BY THE SMF DATA.                                *
*                                                                     *
*        EACH DATE CAN BE ANY OF THE FOLLOWING FORMATS:               *
*                                                                     *
*        YY.DDD                                                       *
*        YYYY.DDD                                                     *
*        MM/DD/YY                                                     *
*        YYYY/MM/DD                                                   *
*                                                                     *
*        EACH TIME MUST HAVE THE FOLLOWING FORMAT:                    *
*                                                                     *
*        HH.MM                                                        *
*                                                                     *
***********************************************************************
PRMIRNG  OI    SWITCH+7,SELIRNG    TURN ON SELECT BY INCLUSIVE RANGE
         CLI   0(R7),C'='          INSURE '=' ONLY
         BNE   ERROR032            NO, ERROR
         LA    R7,1(,R7)           INCREMENT PAST LOGICAL OPERATOR
PRMIRNG1 LR    R1,R7               SAVE PARM ADDRESS
         BAL   R14,PRMDTT          GO PROCESS THIS DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR097            NOT ZERO, INVALID START DATE
         MVC   DATES,DATEJUL       SAVE START DATE
PRMIRNG2 CLI   0(R1),C','          SEE IF SEP BETWEEN DATE AND TIME
         BNE   ERROR098            NO, ERROR
         LA    R1,1(,R1)           YES, INCREMENT PAST ','
         BAL   R14,PRMTT           GO PROCESS THIS TIME
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR099            NOT ZERO, INVALID START TIME
         MVC   TIMES,CONVTIME      SAVE START TIME
PRMIRNG3 CLI   0(R1),C':'          SEE IF SEP BETWEEN START AND END
         BNE   ERROR100            NO, ERROR
         LA    R1,1(,R1)           YES, INCREMENT PAST ':'
         BAL   R14,PRMDTT          GO PROCESS THIS DATE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR101            NOT ZERO, INVALID END DATE
         MVC   DATEE,DATEJUL       SAVE END DATE
PRMIRNG4 CLI   0(R1),C','          SEE IF SEP BETWEEN DATE AND TIME
         BNE   ERROR102            NO, ERROR
         LA    R1,1(,R1)           YES, INCREMENT PAST ','
         BAL   R14,PRMTT           GO PROCESS THIS TIME
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR103            NOT ZERO, INVALID END TIME
         MVC   TIMEE,CONVTIME      SAVE END TIME
         CLI   0(R1),C' '          SEE IF PROPER END OF END TIME
         BNE   ERROR103            NO, ERROR
PRMIRNG5 MVC   IRSDATE,DATES       SAVE IRANGE START DATE
         MVC   IRSTIME,TIMES       SAVE IRANGE START TIME
         MVC   IREDATE,DATEE       SAVE IRANGE END   DATE
         MVC   IRETIME,TIMEE       SAVE IRANGE END   TIME
         B     PRMEND              GO GET NEXT OPTION CARD
         EJECT
***********************************************************************
*                                                                     *
*                    RETURN TO CALLER                                 *
*                                                                     *
***********************************************************************
PRMEND   SLR   R15,R15             SET RETURN CODE TO ZERO
PRMEND1  L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         RETURN (14,12),RC=(15)    RETURN TO CALLER
COMPOKEY CLC   0(0,R1),4(R4)       **** EXECUTE ONLY ****
PACKINDX PACK  DOUBLE,0(0,R1)      **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        VALIDITY CHECK ANY OF THE TIME PARMS.                        *
*                                                                     *
*        REGISTER 1 ON ENTRY POINTS TO THE INPUT TIME.                *
*                                                                     *
*        THE INPUT TIME MUST BE IN THE FORM HHH.MM.SS                 *
*                                                                     *
*        REGISTER 14 ON ENTRY IS THE RETURN ADDRESS.                  *
*                                                                     *
*        THE VALIDATED TIME IN THE FORM HHHMMSS WILL BE AT            *
*        LABEL TMOUT.                                                 *
*                                                                     *
*        IN AN ERROR IS DETECTED, THE RETURN CODE WILL BE SET         *
*        TO 8.                                                        *
*                                                                     *
***********************************************************************
PARMTM   ST    R14,RETURN          SAVE RETURN ADDRESS
         XC    TMOUTH,TMOUTH       SET HOURS TO ZERO
         XC    TMOUTM,TMOUTM       SET MINUTES TO ZERO
         XC    TMOUTS,TMOUTS       SET SECONDS TO ZERO
         XC    TMOUT,TMOUT         SET TIME TO ZERO
         LR    R7,R1               SAVE ADDRESS OF INPUT TIME
         CLI   0(R7),C' '          MAKE SURE INPUT TIME NOT BLANK
         BE    PARMTM8             NOT THERE, ERROR
         LR    R1,R7               SAVE ADDR OF TIME
         LA    R14,5+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
PARMTM1  CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM2             YES, BRANCH
         CLI   0(R7),C'.'          END OF HOURS?
         BE    PARMTM2             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PARMTM8             YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PARMTM8             YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PARMTM1         LOOP
         B     PARMTM8             TOO LONG, ERROR
PARMTM2  BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CP    DOUBLE,=P'999'      SEE IF EXCEEDS 999 HOURS
         BH    PARMTM8             YES, ERROR
         CVB   R15,DOUBLE          CONVERT HOURS TO BINARY
         ST    R15,TMOUTH          SAVE HOURS
         CLI   0(R7),C'.'          SEE IF ANY MORE?
         BNE   PARMTM7             NO, DONE
         LA    R7,1(,R7)           INCREMENT PAST '.'
         LR    R1,R7               SAVE ADDRESS OF TIME
         LA    R14,4+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
         CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM7             YES, DONE
PARMTM3  CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM4             YES, BRANCH
         CLI   0(R7),C'.'          END OF MINUTES?
         BE    PARMTM4             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PARMTM8             YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PARMTM8             YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PARMTM3         LOOP
         B     PARMTM8             TOO LONG, ERROR
PARMTM4  LTR   R15,R15             TEST FOR ZERO LENGTH MINUTES
         BE    PARMTM8             YES, ERROR
         BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK TIME
         CP    DOUBLE,=P'59'       SEE IF EXCEEDS 59 MINUTES
         BH    PARMTM8             YES, ERROR
         CVB   R15,DOUBLE          CONVERT MINUTES TO BINARY
         ST    R15,TMOUTM          SAVE MINUTES
         CLI   0(R7),C'.'          SEE IF ANY MORE?
         BNE   PARMTM7             NO, DONE
         LA    R7,1(,R7)           INCREMENT PAST '.'
         LR    R1,R7               SAVE ADDRESS OF TIME
         LA    R14,4+1             LOAD MAXIMUM LENGTH + 1
         SLR   R15,R15             CLEAR LENGTH CTR
         CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM7             YES, DONE
PARMTM5  CLI   0(R7),C' '          END OF TIME?
         BE    PARMTM6             YES, BRANCH
         CLI   0(R7),C'0'          SEE IF LT 0
         BL    PARMTM8             YES, ERROR
         CLI   0(R7),C'9'          SEE IF GT 9
         BH    PARMTM8             YES, ERROR
         LA    R15,1(,R15)         ADD 1 TO LENGTH CTR
         LA    R7,1(,R7)           ADD 1 TO PARM PTR
         BCT   R14,PARMTM5         LOOP
         B     PARMTM8             TOO LONG, ERROR
PARMTM6  LTR   R15,R15             TEST FOR ZERO LENGTH SECONDS
         BE    PARMTM8             YES, ERROR
         BCTR  R15,0               MAKE LENGTH OF TIME REL ZERO
         EX    R15,PACKINDX        PACK ET
         CP    DOUBLE,=P'59'       SEE IF EXCEEDS 59 SECONDS
         BH    PARMTM8             YES, ERROR
         CVB   R15,DOUBLE          CONVERT SECONDS TO BINARY
         ST    R15,TMOUTS          SAVE SECONDS
PARMTM7  SLR   R15,R15             CLEAR TIME VALUE
         L     R14,TMOUTH          LOAD HOURS
         MH    R14,=H'3600'        MULTIPLY BY SECONDS/HOUR
         AR    R15,R14             ADD TO ACCUMULATOR
         L     R14,TMOUTM          LOAD MINUTES
         MH    R14,=H'60'          MULTIPLY BY SECONDS/MINUTE
         AR    R15,R14             ADD TO ACCUMULATOR
         A     R15,TMOUTS          ADD SECONDS TO ACCUMULATOR
         MH    R15,=H'100'         MULTIPLY BY 100 FOR HUNDRETHS
         ST    R15,TMOUT           SAVE TIME IN HUNDRETHS OF A SECOND
         B     PARMTM9             DONE
PARMTM8  LA    R15,8               SET RETURN CODE TO 8
         B     PARMTM10            RETURN TO CALLER
PARMTM9  LA    R15,0               SET RETURN CODE TO 0
PARMTM10 L     R14,RETURN          RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        ERROR ROUTINES FOR PRMCHK ROUTINE                            *
*                                                                     *
***********************************************************************
ERROR001 LA    R15,1               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR002 LA    R15,2               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR003 LA    R15,3               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR004 LA    R15,4               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR005 LA    R15,5               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR006 LA    R15,6               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR007 LA    R15,7               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR008 LA    R15,8               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR009 LA    R15,9               LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR010 LA    R15,10              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR011 LA    R15,11              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR012 LA    R15,12              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR014 LA    R15,14              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR015 LA    R15,15              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR016 LA    R15,16              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR017 LA    R15,17              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR018 LA    R15,18              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR019 LA    R15,19              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR020 LA    R15,20              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR021 LA    R15,21              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR022 LA    R15,22              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR023 LA    R15,23              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR024 LA    R15,24              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR025 LA    R15,25              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR026 LA    R15,26              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR027 LA    R15,27              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR028 LA    R15,28              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR029 LA    R15,29              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR032 LA    R15,32              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR033 LA    R15,33              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR034 LA    R15,34              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR035 LA    R15,35              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR036 LA    R15,36              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR037 LA    R15,37              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR038 LA    R15,38              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR039 LA    R15,39              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR040 LA    R15,40              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR041 LA    R15,41              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR042 LA    R15,42              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR043 LA    R15,43              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR044 LA    R15,44              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR045 LA    R15,45              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR049 LA    R15,49              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR050 LA    R15,50              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR051 LA    R15,51              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR052 LA    R15,52              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR053 LA    R15,53              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR054 LA    R15,54              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR055 LA    R15,55              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR056 LA    R15,56              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR057 LA    R15,57              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR058 LA    R15,58              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR059 LA    R15,59              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR060 LA    R15,60              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR061 LA    R15,61              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR062 LA    R15,62              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR063 LA    R15,63              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR064 LA    R15,64              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR065 LA    R15,65              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR066 LA    R15,66              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR067 LA    R15,67              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR068 LA    R15,68              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR069 LA    R15,69              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR070 LA    R15,70              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR071 LA    R15,71              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR072 LA    R15,72              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR073 LA    R15,73              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR074 LA    R15,74              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR075 LA    R15,75              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR076 LA    R15,76              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR077 LA    R15,77              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR078 LA    R15,78              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR079 LA    R15,79              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR080 LA    R15,80              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR081 LA    R15,81              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR082 LA    R15,82              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR083 LA    R15,83              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR084 LA    R15,84              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR085 LA    R15,85              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR086 LA    R15,86              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR087 LA    R15,87              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR088 LA    R15,88              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR089 LA    R15,89              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR091 LA    R15,91              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR092 LA    R15,92              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR093 LA    R15,93              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR094 LA    R15,94              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR097 LA    R15,97              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR098 LA    R15,98              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR099 LA    R15,99              LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR100 LA    R15,100             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR101 LA    R15,101             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR102 LA    R15,102             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR103 LA    R15,103             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR104 LA    R15,104             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR105 LA    R15,105             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR106 LA    R15,106             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR107 LA    R15,107             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR108 LA    R15,108             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR109 LA    R15,109             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR110 LA    R15,110             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR111 LA    R15,111             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR112 LA    R15,112             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR113 LA    R15,113             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR114 LA    R15,114             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR115 LA    R15,115             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR116 LA    R15,116             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR117 LA    R15,117             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR118 LA    R15,118             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR119 LA    R15,119             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR120 LA    R15,120             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR121 LA    R15,121             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR123 LA    R15,123             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR124 LA    R15,124             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR125 LA    R15,125             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR126 LA    R15,126             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR127 LA    R15,127             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR128 LA    R15,128             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR129 LA    R15,129             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR130 LA    R15,130             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR131 LA    R15,131             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR132 LA    R15,132             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR133 LA    R15,133             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR134 LA    R15,134             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR135 LA    R15,135             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR136 LA    R15,136             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR137 LA    R15,137             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR138 LA    R15,138             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR139 LA    R15,139             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
ERROR140 LA    R15,140             LOAD MESSAGE INDEX
         B     PRMEND1             GET OUT OF PRMCHK ROUTINE
         SPACE 3
         LTORG
SAVE5    DS    18F                 ROUTINE SAVE AREA
         DROP  R9,R10,R11,R12
         POP   USING
         EJECT
         PUSH  USING
***********************************************************************
*                                                                     *
*                              DATERTN                                *
*                                                                     *
*                   CONVERT DATES TO OTHER FORMATS                    *
*                                                                     *
*        THIS ROUTINE WILL CONVERT AN INPUT DATE FIELD IN ONE         *
*        DATE FORMAT TO ANOTHER FORMAT IN THE OUTPUT FIELD.           *
*        THE DATE TYPES ARE AS FOLLOWS:                               *
*                                                                     *
*        JULIAN    - 4 DIGIT PACKED DECIMAL DATE (YYYYDDDS)           *
*                                                                     *
*        GREGORIAN - 5 DIGIT PACKED DECIMAL DATE (0YYYYMMDDS)         *
*                                                                     *
*        CENTURY   - 4 BYTE FULLWORD NUMBER OF DAYS SINCE             *
*                    DECEMBER 31, 1899.                               *
*                                                                     *
*                                                                     *
*        REGISTER 1 ON ENTRY TO THIS ROUTINE POINTS TO A LIST OF      *
*        THREE ADDRESSES.  THEY ARE AS FOLLOWS:                       *
*                                                                     *
*        1 - ADDRESS OF A 2 BYTE FIELD IDENTIFYING THE TYPE OF        *
*            CONVERSTION TO PERFORM.  IT WILL BE A CHARACTER          *
*            COMBINATION AS FOLLOWS:                                  *
*                                                                     *
*            JG - CONVERT FIELD 1 FROM JULIAN TO FIELD 2 AS           *
*                 GREGORIAN                                           *
*                                                                     *
*            JC - CONVERT FIELD 1 FROM JULIAN TO FIELD 2 AS           *
*                 CENTURY                                             *
*                                                                     *
*            GJ - CONVERT FIELD 1 FROM GREGORIAN TO FIELD 2 AS        *
*                 JULIAN                                              *
*                                                                     *
*            GC - CONVERT FIELD 1 FROM GREGORIAN TO FIELD 2 AS        *
*                 CENTURY                                             *
*                                                                     *
*            CJ - CONVERT FIELD 1 FROM CENTURY TO FIELD 2 AS          *
*                 JULIAN                                              *
*                                                                     *
*            CG - CONVERT FIELD 1 FROM CENTURY TO FIELD 2 AS          *
*                 GREGORIAN                                           *
*                                                                     *
*        2 - ADDRESS OF THE INPUT FIELD.  THE TYPE OF CONVERSION      *
*            REQUESTED WILL INDICATE THE FORMAT OF THIS FIELD         *
*                                                                     *
*        3 - ADDRESS OF THE OUTPUT FIELD.  THE TYPE OF CONVERSION     *
*            REQUESTED WILL INDICATE THE FORMAT OF THIS FIELD         *
*                                                                     *
*                                                                     *
*                                                                     *
*        REGISTER 15 ON RETURN TO THE CALLER WILL CONTAIN THE         *
*        RETURN CODE FROM CONVERSION.  THE RETURN CODES ARE           *
*        AS FOLLOWS:                                                  *
*                                                                     *
*         0 - CONVERSION WAS SUCCESSFUL                               *
*                                                                     *
*         8 - CONVERSION FAILED DUE TO INVALID INPUT PARM LIST        *
*                                                                     *
*        16 - CONVERSION FAILED DUE TO INVALID INPUT DATE SYNTAX      *
*                                                                     *
***********************************************************************
DATERTN  CSECT
         SAVE  (14,12)             SAVE REGISTERS
         USING DATERTN,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE6           LOAD ADDR OF NEW SAVE AREA
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         ST    R1,DTPARM           SAVE ADDRESS OF PARM LIST
***********************************************************************
*                                                                     *
*        VALIDATE THE INPUT PARM LIST                                 *
*                                                                     *
***********************************************************************
DTP      L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,0(R1)            LOAD PARM 1 ADDRESS
         MVC   DTYPE,0(R2)         SAVE DATE TYPE
         CLC   DTYPE,=C'JG'        SEE IF JULIAN/GREGORIAN
         BE    DTPJG               YES, GO DO IT
         CLC   DTYPE,=C'JC'        SEE IF JULIAN/CENTURY
         BE    DTPJC               YES, GO GO IT
         CLC   DTYPE,=C'GJ'        SEE IF GREGORIAN/JULIAN
         BE    DTPGJ               YES, GO DO IT
         CLC   DTYPE,=C'GC'        SEE IF GREGORIAN/CENTURY
         BE    DTPGC               YES, GO GO IT
         CLC   DTYPE,=C'CJ'        SEE IF CENTURY/JULIAN
         BE    DTPCJ               YES, GO DO IT
         CLC   DTYPE,=C'CG'        SEE IF CENTURY/GREGORIAN
         BE    DTPCG               YES, GO DO IT
         B     DTRC8               INVALID, GET OUT RC=8
DTPJG    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTJUL,0(R2)         SAVE JULIAN DATE
         BAL   R14,DTVJUL          GO VALIDATE JULIAN FORMAT
         BAL   R14,DTJG            GO CONVERT TO GREGORIAN FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(05,R2),DTGREG     RETURN GREGORIAN DATE
         B     DTRC0               RETURN TO CALLER
DTPJC    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTJUL,0(R2)         SAVE JULIAN DATE
         BAL   R14,DTVJUL          GO VALIDATE JULIAN FORMAT
         BAL   R14,DTJC            GO CONVERT TO CENTURY FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(04,R2),DTCENT     RETURN CENTURY DATE
         B     DTRC0               RETURN TO CALLER
DTPGJ    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTGREG,0(R2)        SAVE GREGORIAN DATE
         BAL   R14,DTVGRG          GO VALIDATE GREGORIAN FORMAT
         BAL   R14,DTGJ            GO CONVERT TO JULIAN FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(04,R2),DTJUL      RETURN JULIAN DATE
         B     DTRC0               RETURN TO CALLER
DTPGC    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTGREG,0(R2)        SAVE GREGORIAN DATE
         BAL   R14,DTVGRG          GO VALIDATE GREGORIAN FORMAT
         BAL   R14,DTGJ            GO CONVERT TO JULIAN FORMAT
         BAL   R14,DTJC            GO CONVERT TO CENTURY FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(04,R2),DTCENT     RETURN CENTURY DATE
         B     DTRC0               RETURN TO CALLER
DTPCJ    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTCENT,0(R2)        SAVE CENTURY DATE
         BAL   R14,DTVCEN          GO VALIDATE CENTURY FORMAT
         BAL   R14,DTCJ            GO CONVERT TO JULIAN FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(04,R2),DTJUL      RETURN JULIAN DATE
         B     DTRC0               RETURN TO CALLER
DTPCG    L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,4(R1)            LOAD PARM 2 ADDRESS
         MVC   DTCENT,0(R2)        SAVE CENTURY DATE
         BAL   R14,DTVCEN          GO VALIDATE CENTURY FORMAT
         BAL   R14,DTCJ            GO CONVERT TO JULIAN FORMAT
         BAL   R14,DTJG            GO CONVERT TO GREGORIAN FORMAT
         L     R1,DTPARM           RELOAD ADDRESS OF PARM LIST
         L     R2,8(R1)            LOAD PARM 3 ADDRESS
         MVC   0(05,R2),DTGREG     RETURN GREGORIAN DATE
         B     DTRC0               RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        RETURN TO CALLER                                             *
*                                                                     *
***********************************************************************
DTRC0    L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         RETURN (14,12),RC=0       RETURN TO CALLER WITH RC=0
         SPACE 3
DTRC8    L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         RETURN (14,12),RC=8       RETURN TO CALLER WITH RC=8
         SPACE 3
DTRC16   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         RETURN (14,12),RC=16      RETURN TO CALLER WITH RC=16
         EJECT
***********************************************************************
*                                                                     *
*        VALIDATE THAT JULIAN DATE IS IN FORMAT YYYY.DDD              *
*                                                                     *
***********************************************************************
DTVJUL   UNPK  DTVER,DTJUL         UNPACK JULIAN DATE
         OI    DTVER+7,X'F0'       MAKE PRINTABLE
DTVJUL01 LA    R15,8               SET FIELD LENGTH
         LA    R1,DTVER            POINT TO START OF FIELD
DTVJUL02 CLI   0(R1),C'0'          SEE IF NUMERIC
         BL    DTRC16              NO, GET OUT RC=16
         CLI   0(R1),C'9'          SEE IF NUMERIC
         BH    DTRC16              NO, GET OUT RC=16
DTVJUL03 LA    R1,1(,R1)           POINT TO NEXT CHARACTER IN FIELD
         BCT   R15,DTVJUL02        LOOP
         CLC   DTVER+1(2),=C'19'   TEST CENTURY PORTION OF DATE
         BL    DTRC16              BEFORE 1900, GET OUT RC=16
         CLC   DTVER+1(2),=C'20'   TEST CENTURY PORTION OF DATE
         BH    DTRC16              AFTER 2099, GET OUT RC=16
         NI    DTMISC,255-LEAPYEAR TURN OFF LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'28' SET FEB TO 28 DAYS
         PACK  DTDBL,DTVER+1(4)    PACK YEAR
         DP    DTDBL,=P'4'         DIVIDE BY 4
         CP    DTDBL+7(1),=P'0'    TEST REMAINDER
         BNZ   DTVJUL04            NOT ZERO, NOT LEAP YEAR
         OI    DTMISC,LEAPYEAR     TURN ON LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
DTVJUL04 PACK  DTDBL,DTVER+5(3)    PACK JULIAN DAY
         CVB   R2,DTDBL            CONVERT JULIAN DAY TO BINARY
         LTR   R2,R2               SEE IF JULIAN DAY IS ZERO
         BZ    DTRC16              YES, GET OUT RC=16
         CH    R2,=H'365'          SEE IF JULIAN DAY IS GT 365
         BNH   DTVJUL05            NO, OK
         CH    R2,=H'366'          SEE IF JULIAN DAY IS GT 366
         BH    DTRC16              YES, GET OUT RC=16
         TM    DTMISC,LEAPYEAR     SEE IF LEAP YEAR
         BNO   DTRC16              NO, GET OUT RC=16
DTVJUL05 BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        VALIDATE THAT GREGORIAN DATE IS IN FORMAT YYYY/MM/DD         *
*                                                                     *
***********************************************************************
DTVGRG   UNPK  DTVER,DTGREG        UNPACK GREGORIAN DATE
         OI    DTVER+7,X'F0'       MAKE PRINTABLE
DTVGRG01 LA    R15,8               SET FIELD LENGTH
         LA    R1,DTVER            POINT TO START OF FIELD
DTVGRG02 CLI   0(R1),C'0'          SEE IF NUMERIC
         BL    DTRC16              NO, GET OUT RC=16
         CLI   0(R1),C'9'          SEE IF NUMERIC
         BH    DTRC16              NO, GET OUT RC=16
DTVGRG03 LA    R1,1(,R1)           POINT TO NEXT CHARACTER IN FIELD
         BCT   R15,DTVGRG02        LOOP
         CLC   DTVER(2),=C'19'     TEST CENTURY PORTION OF DATE
         BL    DTRC16              BEFORE 1900, GET OUT RC=16
         CLC   DTVER(2),=C'20'     TEST CENTURY PORTION OF DATE
         BH    DTRC16              AFTER 2099, GET OUT RC=16
         CLC   DTVER+4(2),=C'00' SEE IF MONTH IS ZERO
         BE    DTRC16              YES, GET OUT RC=16
         CLC   DTVER+4(2),=C'12' SEE IF MONTH IS GREATER THAN 12
         BH    DTRC16              YES, GET OUT RC=16
         NI    DTMISC,255-LEAPYEAR TURN OFF LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'28' SET FEB TO 28 DAYS
         PACK  DTDBL,DTVER(4)      PACK YEAR
         DP    DTDBL,=P'4'         DIVIDE BY 4
         CP    DTDBL+7(1),=P'0'    TEST REMAINDER
         BNZ   DTVGRG04            NOT ZERO, NOT LEAP YEAR
         OI    DTMISC,LEAPYEAR     TURN ON LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
DTVGRG04 PACK  DTDBL,DTVER+4(2)    PACK MONTH
         CVB   R2,DTDBL            CONVERT MONTH TO BINARY
         BCTR  R2,0                MAKE RELATIVE TO ZERO
         SLA   R2,1                MULTIPLY BY 2 FOR TABLE OFFSET
         A     R2,=A(DTDAYTBL)     CALCULATE ENTRY IN DAY TABLE
         PACK  DTDBL,DTVER+6(2)    PACK DAY
         CVB   R3,DTDBL            CONVERT DAY TO BINARY
         LTR   R3,R3               SEE IF DAY IS ZERO
         BZ    DTRC16              YES, GET OUT RC=16
         CH    R3,0(R2)            SEE IF DAY EXCEEDS MAX FOR MONTH
         BH    DTRC16              YES, GET OUT RC=16
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        VALIDATE THAT CENTURY DATE IS IN FORMAT NNNNNN AND           *
*        NOT GREATER THAN 2 CENTURIES LONG                            *
*                                                                     *
***********************************************************************
DTVCEN   L     R15,DTCENT          LOAD CENTURY DATE
         CH    R15,=H'1'           TEST DATE
         BL    DTRC16              ZERO OR NEGATIVE, GET OUT RC=16
         C     R15,=F'73050'       TEST DATE
         BH    DTRC16              GT 200 YEARS, GET OUT RC=16
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        CONVERT JULIAN DATE TO GREGORIAN                             *
*                                                                     *
*        THE INPUT JULIAN DATE IS IN FIELD DTJUL                      *
*        THE OUTPUT GREGORIAN DATE WILL BE IN FIELD DTGREG            *
*                                                                     *
***********************************************************************
DTJG     NI    DTMISC,255-LEAPYEAR TURN OFF LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'28' SET FEB TO 28 DAYS
         ZAP   DTDBL,DTJUL         MOVE JULIAN DATE TO WORK
         SRP   DTDBL,64-3,0        SHIFT OFF DAY TO LEAVE ONLY YEAR
         ZAP   DTGREG,DTDBL        SET GREGORIAN YEAR
         DP    DTDBL,=P'4'         DIVIDE YEAR BY 4
         CP    DTDBL+7(1),=P'0'    TEST REMAINDER
         BNZ   DTJG01              NOT ZERO, NOT LEAP YEAR
         OI    DTMISC,LEAPYEAR     TURN ON LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
DTJG01   LA    R2,12               SET LOOP COUNTER
         LA    R3,1                SET MONTH COUNTER
         ZAP   DTDBL,DTJUL+2(2)    MOVE JULIAN DAY TO WORK
         CVB   R1,DTDBL            CONVERT DAY TO BINARY
         LA    R15,DTDAYTBL        LOAD ADDR OF DAY OF THE MONTH TABLE
DTJG02   CH    R1,0(R15)           SEE IF DAYS GT DAYS IN THIS MONTH
         BNH   DTJG03              NO, DONE
         SH    R1,0(R15)           SUBTRACT DAYS IN THIS MONTH FROM TOT
         LA    R3,1(,R3)           ADD 1 TO MONTH COUNTER
         LA    R15,2(,R15)         INCREMENT TO NEXT ENTRY IN DAY TABLE
         BCT   R2,DTJG02           LOOP
DTJG03   CVD   R3,DTDBL            CONVERT MONTH TO PACKED
         SRP   DTGREG,2,0          SHIFT YEAR FOR MONTH
         AP    DTGREG,DTDBL        ADD MONTH TO GREGORIAN DATE
         CVD   R1,DTDBL            CONVERT DAY TO PACKED
         SRP   DTGREG,2,0          SHIFT YEAR AND MONTH FOR DAY
         AP    DTGREG,DTDBL        ADD DAY TO GREGORIAN DATE
DTJG04   BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        CONVERT GREGORIAN DATE TO JULIAN                             *
*                                                                     *
*        THE INPUT GREGORIAN DATE IS IN FIELD DTGREG                  *
*        THE OUTPUT JULIAN DATE WILL BE IN FIELD DTJUL                *
*                                                                     *
***********************************************************************
DTGJ     NI    DTMISC,255-LEAPYEAR TURN OFF LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'28' SET FEB TO 28 DAYS
         ZAP   DTDBL,DTGREG        MOVE GREGORIAN DATE TO WORK
         SRP   DTDBL,64-4,0        SHIFT OFF MONTH AND DAY LEAVING YEAR
         ZAP   DTJUL,DTDBL         SET JULIAN YEAR
         DP    DTDBL,=P'4'         DIVIDE BY 4
         CP    DTDBL+7(1),=P'0'    TEST REMAINDER
         BNZ   DTGJ01              NOT ZERO, NOT LEAP YEAR
         OI    DTMISC,LEAPYEAR     TURN ON LEAP YEAR INDICATOR
         MVC   DTDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
DTGJ01   ZAP   DTDBL,DTGREG+2(3)   MOVE YEAR AND DAY TO WORK
         NI    DTDBL+5,X'0F'       SANITIZE IT
         SRP   DTDBL,64-2,0        SHIFT OFF DAY LEAVING MONTH
         CVB   R2,DTDBL            SET LOOP COUNTER TO MONTH
         SLR   R3,R3               SET JULIAN DAY TO ZERO
         ZAP   DTDBL,DTGREG+3(2)   MOVE DAY TO WORK
         NI    DTDBL+6,X'0F'       SANITIZE IT
         CVB   R1,DTDBL            CONVERT DAY TO BINARY
         AR    R3,R1               ADD GREGORIAN DAY TO JULIAN DAY
         LA    R15,DTDAYTBL        LOAD ADDR OF DAY OF THE MONTH TABLE
         CH    R2,=H'1'            SEE IF JANUARY
         BE    DTGJ03              YES, DO NOT DAYTBL
         BCTR  R2,0                REDUCE LOOP COUNTER BY 1
DTGJ02   AH    R3,0(R15)           ADD DAYS FOR MONTH TO JULIAN DAY
         LA    R15,2(,R15)         INCREMENT TO NEXT ENTRY IN DAY TABLE
         BCT   R2,DTGJ02           LOOP
DTGJ03   CVD   R3,DTDBL            CONVERT DAYS TO PACKED
         SRP   DTJUL,3,0           SHIFT YEAR FOR DAY
         AP    DTJUL,DTDBL         ADD DAY TO JULIAN DATE
DTGJ04   BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        CONVERT JULIAN DATE TO CENTURY                               *
*                                                                     *
*        THE INPUT JULIAN DATE IS IN FIELD DTJUL                      *
*        THE OUTPUT CENTURY DATE WILL BE IN FIELD DTCENT              *
*                                                                     *
*                                                                     *
*        CDATE = ((JULYEAR - 1900) * 365) + JULDAY +                  *
*                ((JULYEAR - 1897) / 4)                               *
*                                                                     *
*                                                                     *
***********************************************************************
DTJC     SLR   R3,R3               ZERO CENTURY YEAR
DTJC01   ZAP   DTDBL,DTJUL         MOVE JULIAN DATE TO WORK
         SRP   DTDBL,64-3,0        SHIFT OFF DAY TO LEAVE ONLY YEAR
         CVB   R2,DTDBL            CONVERT YEAR TO BINARY
         SH    R2,=H'1900'         SUBTRACT 1900
         MH    R2,=H'365'          MULTIPLY BY 365
         AR    R3,R2               ADD SUBTOTAL TO CENTURY DATE
DTJC02   ZAP   DTDBL,DTJUL+2(2)    MOVE JULIAN DAY TO WORK
         CVB   R2,DTDBL            CONVERT DAY TO BINARY
         AR    R3,R2               ADD SUBTOTAL TO CENTURY DATE
DTJC03   ZAP   DTDBL,DTJUL         MOVE JULIAN DATE TO WORK
         SRP   DTDBL,64-3,0        SHIFT OFF DAY TO LEAVE ONLY YEAR
         CVB   R2,DTDBL            CONVERT YEAR TO BINARY
         SH    R2,=H'1897'         SUBTRACT 1897
         SRA   R2,2                DIVIDE BY 4
         AR    R3,R2               ADD SUBTOTAL TO CENTURY DATE
         ST    R3,DTCENT           SAVE CENTURY DATE
DTJC04   BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        CONVERT CENTURY DATE TO JULIAN                               *
*                                                                     *
*        THE INPUT CENTURY DATE IS IN FIELD DTCENT                    *
*        THE OUTPUT JULIAN DATE WILL BE IN FIELD DTJUL                *
*                                                                     *
***********************************************************************
DTCJ     LA    R2,1900             SET YEAR TO 1900
         L     R3,DTCENT           LOAD CENTURY DATE
DTCJ01   LA    R15,365             SET MAX DAYS FOR YEAR TO 365
         CVD   R2,DTDBL            CONVERT YEAR TO PACKED
         DP    DTDBL,=P'4'         DIVIDE BY 4
         CP    DTDBL+7(1),=P'0'    TEST REMAINDER
         BNZ   DTCJ02              NOT ZERO, NOT LEAP YEAR
         LA    R15,366             SET MAX DAYS FOR YEAR TO 366
DTCJ02   CR    R3,R15              SEE IF LAST YEAR
         BNH   DTCJ03              YES, BRANCH
         SR    R3,R15              SUBTRACT DAYS FOR YEAR FROM TOTAL
         LA    R2,1(,R2)           INCREMENT TO NEXT YEAR
         B     DTCJ01              LOOP
DTCJ03   CVD   R2,DTDBL            CONVERT YEAR TO PACKED
         ZAP   DTJUL,DTDBL         MOVE YEAR TO JULIAN DATE
         SRP   DTJUL,3,0           SHIFT YEAR FOR DAYS
DTCJ04   CVD   R3,DTDBL            CONVERT DAYS TO PACKED
         AP    DTJUL,DTDBL         ADD DAYS TO JULIAN DATE
DTCJ05   BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*        CONSTANTS AND WORK AREAS                                     *
***********************************************************************
         LTORG
SAVE6    DS    18F
DTPARM   DS    F                   ADDRESS OF INPUT PARM
DTDBL    DS    D                   DOUBLE WORD WORK AREA
DTVER    DS    D                   DOUBLE WORD WORK AREA
DTYPE    DS    CL2                 INPUT DATE CONVERSION TYPE
DTJUL    DS    PL4                 JULIAN DATE (YYYYDDDS)
DTGREG   DS    PL5                 GREGORIAN DATE (0YYYYNNDDS)
DTCENT   DS    F                   CENTURY DATE (NNNNN)
DTMISC   DC    X'00'               MISCELLANEOUS BIT SWITCHES
LEAPYEAR EQU   X'80'               SPECIFIED YEAR IS A LEAP YEAR
***********************************************************************
*        DAY-PER-MONTH TABLE                                          *
***********************************************************************
DTDAYTBL DS    0H
         DC    H'31'
         DC    H'28'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DROP  R9,R10,R11,R12
         POP   USING
         SPACE 3
ACCUM    CSECT
***********************************************************************
*                                                                     *
*        RECORD FIELD ACCUMULATORS                                    *
*                                                                     *
***********************************************************************
ACC1     DC    PL16'0'             ACCUMULATOR 1  (LINE COUNTER)
ACC2     DC    PL16'0'             ACCUMULATOR 2  (ELAP TIME)
ACC3     DC    PL16'0'             ACCUMULATOR 3  (CPU TIME)
ACC4     DC    PL16'0'             ACCUMULATOR 4  (EXCPS)
ACC5     DC    PL16'0'             ACCUMULATOR 5  (REGION BELOW)
ACC6     DC    PL16'0'             ACCUMULATOR 6  (REGION ABOVE)
ACC7     DC    PL16'0'             ACCUMULATOR 7  (TOTAL TAPES)
ACC8     DC    PL16'0'             ACCUMULATOR 8  (NON-SCRATCH TAPES)
ACC9     DC    PL16'0'             ACCUMULATOR 9  (SCRATCH TAPES)
ACC10    DC    PL16'0'             ACCUMULATOR 10 (EXP PAGING)
ACC11    DC    PL16'0'             ACCUMULATOR 11 (AUX PAGING)
ACC12    DC    PL16'0'             ACCUMULATOR 12 (TOT SERVICE UNITS)
ACC13    DC    PL16'0'             ACCUMULATOR 13 (VIO PAGING)
ACC14    DC    PL16'0'             ACCUMULATOR 14 (CPU SERVICE UNITS)
ACC15    DC    PL16'0'             ACCUMULATOR 15 (I/O SERVICE UNITS)
ACC16    DC    PL16'0'             ACCUMULATOR 16 (MSO SERVICE UNITS)
ACC17    DC    PL16'0'             ACCUMULATOR 17 (SRB SERVICE UNITS)
ACC18    DC    PL16'0'             ACCUMULATOR 18 (ZAAP CPU TIME)
ACC19    DC    PL16'0'             ACCUMULATOR 19 (ZIIP CPU TIME)
ACC20    DC    PL16'0'             ACCUMULATOR 20 (ZAAP+ZIIP CPU TIME)
SACC1    DC    PL16'0'             ACCUMULATOR 1  (LINE COUNTER)
SACC2    DC    PL16'0'             ACCUMULATOR 2  (ELAP TIME)
SACC3    DC    PL16'0'             ACCUMULATOR 3  (CPU TIME)
SACC4    DC    PL16'0'             ACCUMULATOR 4  (EXCPS)
SACC5    DC    PL16'0'             ACCUMULATOR 5  (REGION BELOW)
SACC6    DC    PL16'0'             ACCUMULATOR 6  (REGION ABOVE)
SACC7    DC    PL16'0'             ACCUMULATOR 7  (TOTAL TAPES)
SACC8    DC    PL16'0'             ACCUMULATOR 8  (NON-SCRATCH TAPES)
SACC9    DC    PL16'0'             ACCUMULATOR 9  (SCRATCH TAPES)
SACC10   DC    PL16'0'             ACCUMULATOR 10 (EXP PAGING)
SACC11   DC    PL16'0'             ACCUMULATOR 11 (AUX PAGING)
SACC12   DC    PL16'0'             ACCUMULATOR 12 (TOT SERVICE UNITS)
SACC13   DC    PL16'0'             ACCUMULATOR 13 (VIO PAGING)
SACC14   DC    PL16'0'             ACCUMULATOR 14 (CPU SERVICE UNITS)
SACC15   DC    PL16'0'             ACCUMULATOR 15 (I/O SERVICE UNITS)
SACC16   DC    PL16'0'             ACCUMULATOR 16 (MSO SERVICE UNITS)
SACC17   DC    PL16'0'             ACCUMULATOR 17 (SRB SERVICE UNITS)
SACC18   DC    PL16'0'             ACCUMULATOR 18 (ZAAP CPU TIME)
SACC19   DC    PL16'0'             ACCUMULATOR 19 (ZIIP CPU TIME)
SACC20   DC    PL16'0'             ACCUMULATOR 20 (ZAAP+ZIIP CPU TIME)
ACCS1    DC    20PL16'0'           ACCUMULATORS FOR SUBTOTAL LEVEL 1
ACCS2    DC    20PL16'0'           ACCUMULATORS FOR SUBTOTAL LEVEL 2
ACCS3    DC    20PL16'0'           ACCUMULATORS FOR SUBTOTAL LEVEL 3
ACCS4    DC    20PL16'0'           ACCUMULATORS FOR SUBTOTAL LEVEL 4
ACCST    DC    20PL16'0'           ACCUMULATORS FOR TOTALS
         EJECT
CONSTANT CSECT
***********************************************************************
*                                                                     *
*        PROGRAM CONSTANTS AND WORK AREAS                             *
*                                                                     *
***********************************************************************
JG       DC    C'JG'               CONVERT DATE CONSTANT
JC       DC    C'JC'               CONVERT DATE CONSTANT
CJ       DC    C'CJ'               CONVERT DATE CONSTANT
CG       DC    C'CG'               CONVERT DATE CONSTANT
GJ       DC    C'GJ'               CONVERT DATE CONSTANT
GC       DC    C'GC'               CONVERT DATE CONSTANT
BLANKS   DC    CL133' '            STRING OF BLANKS
LOWDATE  DC    PL4'9999999'        LOWEST DATE IN SMF DATA
LOWTIME  DC    X'7FFFFFFF'         LOWEST TIME IN SMF DATA
HIGHDATE DC    PL4'0'              HIGHEST DATE IN SMF DATA
HIGHTIME DC    F'0'                HIGHEST TIME IN SMF DATA
ABCODE   DS    F                   SAVE AREA FOR USER ABEND CODE
RETURN   DS    F                   SAVE AREA FOR ROUTINE ADDRESS
SAVEPRMD DS    18F                 SAVE AREA FOR PRMDTT ROUTINE
SAVEPRMT DS    18F                 SAVE AREA FOR PRMTT  ROUTINE
WKDAYRET DS    F                   RETURN ADDRESS FROM WKDAY
DATEJUL  DS    PL4                 JULIAN DATE (YYYYDDDS)
DATEGREG DS    PL5                 GREGORIAN DATE (0YYYYMMDDS)
DATEWORK DS    ZL8                 DATE WORK AREA
CINSDT   DS    PL4                 CELAP ROUTINE START DATE (YYYYDDDS)
CINEDT   DS    PL4                 CELAP ROUTINE END   DATE (YYYYDDDS)
CINSTM   DS    F                   CELAP ROUTINE START TIME (SEC/100)
CINETM   DS    F                   CELAP ROUTINE END   TIME (SEC/100)
COUTEL   DS    F                   CELAP ROUTINE ELAPSED TIME (SEC/100)
DOUBLE   DS    D                   DOUBLE WORD WORK AREA
WORK     DS    16C                 MISCELLANEOUS WORK AREA
DECR1    DS    F                   ELAPSED TIME ADJUSTMENT VALUE 1
DECR2    DS    F                   ELAPSED TIME ADJUSTMENT VALUE 2
FWORK1   DS    F                   FULLWORD WORK AREA
FWORK2   DS    F                   FULLWORD WORK AREA
ADJPIN   DS    F                   INPUT TO ADJP ROUTINE
ADJPOUT  DS    F                   OUTPUT FROM ADJP ROUTINE
ADJPCT   DS    F                   ADJUSTMENT PERCENT FOR IRANGE
DBL      DS    D                   DOUBLE WORD WORK AREA
PJDATE   DS    XL4                 SMF DATE (YYYYDDDS)
MMB      DS    H                   BINARY MONTH
DDB      DS    H                   BINARY DAY
YYYYB    DS    H                   BINARY YEAR
DAYOFWK  DS    H                   DAY-OF-WEEK NUMBER
         SPACE 3
BIGMASK1 DC    X'40202020202020202020202020202020202020206B2020206B2020X
               206B2020206B202120'
BIGMASK2 DC    X'4040202020202020202020202020202020206B2020206B2020206BX
               2021207A20207A2020'
BIGMASK3 DC    X'402020202020202020202020202020202020202020206B2020206BX
               2020206B2021204B20'
BIGMASK4 DC    X'40402020202020202020202020206B2020206B2020206B202120'
BIGMASK5 DC    X'4020202020202020202020206B2020206B2021207A20207A2020'
BIGMASK6 DC    X'4020202020202020202020206B2020206B2020206B2021204B20'
BIGMASK7 DC    X'404020202020202020202020202020206B2020206B2020206B2021X
               207A20207A20204B2020'
BIGMASK8 DC    X'402020202020202020206B2020206B2021207A20207A20204B2020X
               '
ASTERS1  DC    C'               ****************     '
ASTERS2  DC    C'     ****************     '
RETADD   DC    F'0'                RETURN ADDRESS FROM CURRENT ROUTINE
VALJOBNM DC    X'00',X'00',CL8' '  DEFAULT JOBNAME VALUE
JOBNMTBL DC    F'0'                JOBNAME TABLE
XJOBNTBL DC    F'0'                EXCLUDED JOBNAME TABLE
VALJOBNO DC    CL8' '              DEFAULT JOBNO VALUE
JOBNOTBL DC    F'0'                JOB NUMBER TABLE
XJBNOTBL DC    F'0'                EXCLUDED JOB NUMBER TABLE
DATETBL  DC    F'0'                DATE TABLE
VALTIME  DC    C'00.00',C'99.99'   DEFAULT TIME RANGES
STIMETBL DC    F'0'                START TIME TABLE
ETIMETBL DC    F'0'                STOP  TIME TABLE
VALSYSID DC    C'    '             DEFAULT SYSID VALUE
SYSIDTBL DC    F'0'                SYSID TABLE
XSYSTBL  DC    F'0'                EXCLUDED SYSID TABLE
VALPSTEP DC    AL2(0),CL8' '       DEFAULT PROC STEP VALUE
PSTEPTBL DC    F'0'                PROC STEP NAME TABLE
XPSTPTBL DC    F'0'                EXCLUDED PROC STEP NAME TABLE
VALJSTEP DC    AL2(0),CL8' '       DEFAULT JOB  STEP VALUE
JSTEPTBL DC    F'0'                JOB STEP NAME TABLE
XJSTPTBL DC    F'0'                EXCLUDED JOB STEP NAME TABLE
VALPGM   DC    AL2(0),CL8' '       DEFAULT PROGRAM VALUE
PGMTBL   DC    F'0'                PROGRAM NAME TABLE
XPGMTBL  DC    F'0'                EXCLUDED PROGRAM NAME TABLE
VALUID   DC    AL2(0),CL8' '       DEFAULT USERID VALUE
UIDTBL   DC    F'0'                USERID NAME TABLE
XUIDTBL  DC    F'0'                EXCLUDED USERID NAME TABLE
VALCC    DC    AL2(0),CL5' '       DEFAULT CCODE VALUE
CCTBL    DC    F'0'                CONDITION CODE TABLE
XCCTBL   DC    F'0'                EXCLUDED CONDITION CODE TABLE
VALETGE  DC    F'0'                DEFAULT ELAPTIME GE VALUE
VALETLE  DC    F'0'                DEFAULT ELAPTIME LE VALUE
VALBCGE  DC    F'0'                DEFAULT BLOCK COUNT GE VALUE
VALBCLE  DC    F'0'                DEFAULT BLOCK COUNT LE VALUE
VALCTGE  DC    F'0'                DEFAULT CPUTIME GE VALUE
VALCTLE  DC    F'0'                DEFAULT CPUTIME LE VALUE
VALZAAGE DC    F'0'                DEFAULT ZAAPTIME GE VALUE
VALZAALE DC    F'0'                DEFAULT ZAAPTIME LE VALUE
VALZIIGE DC    F'0'                DEFAULT ZIIPTIME GE VALUE
VALZIILE DC    F'0'                DEFAULT ZIIPTIME LE VALUE
VALSPEGE DC    F'0'                DEFAULT SPECTIME GE VALUE
VALSPELE DC    F'0'                DEFAULT SPECTIME LE VALUE
VALRBGE  DC    F'0'                DEFAULT REGION BELOW GE VALUE
VALRBLE  DC    F'0'                DEFAULT REGION BELOW LE VALUE
VALRAGE  DC    F'0'                DEFAULT REGION ABOVE GE VALUE
VALRALE  DC    F'0'                DEFAULT REGION ABOVE LE VALUE
VALMNTGE DC    F'0'                DEFAULT MOUNTS GE VALUE
VALMNTLE DC    F'0'                DEFAULT MOUNTS LE VALUE
VALCPPGE DC    F'0'                DEFAULT CPUPCT GE VALUE
VALCPPLE DC    F'0'                DEFAULT CPUPCT LE VALUE
VALTYPE  DC    C' '                DEFAULT JOB TYPE
VALSTCNT DC    F'0'                DEFAULT STOP COUNT
VALPTPGE DC    F'0'                DEFAULT PERM TAPE GE VALUE
VALPTPLE DC    F'0'                DEFAULT PERM TAPE LE VALUE
VALSTPGE DC    F'0'                DEFAULT SCRATCH TAPE GE VALUE
VALSTPLE DC    F'0'                DEFAULT SCRATCH TAPE LE VALUE
VALEPGGE DC    F'0'                DEFAULT EXT STG PAGING GE VALUE
VALEPGLE DC    F'0'                DEFAULT EXT STG PAGING LE VALUE
VALAPGGE DC    F'0'                DEFAULT AUX STG PAGING GE VALUE
VALAPGLE DC    F'0'                DEFAULT AUX STG PAGING LE VALUE
VALTSUGE DC    F'0'                DEFAULT TOT SERV UNITS GE VALUE
VALCSUGE DC    F'0'                DEFAULT CPU SERV UNITS GE VALUE
VALISUGE DC    F'0'                DEFAULT I/O SERV UNITS GE VALUE
VALMSUGE DC    F'0'                DEFAULT MSO SERV UNITS GE VALUE
VALSSUGE DC    F'0'                DEFAULT SRB SERV UNITS GE VALUE
VALTSULE DC    F'0'                DEFAULT TOT SERV UNITS LE VALUE
VALCSULE DC    F'0'                DEFAULT CPU SERV UNITS LE VALUE
VALISULE DC    F'0'                DEFAULT I/O SERV UNITS LE VALUE
VALMSULE DC    F'0'                DEFAULT MSO SERV UNITS LE VALUE
VALSSULE DC    F'0'                DEFAULT SRB SERV UNITS LE VALUE
VALVIOGE DC    F'0'                DEFAULT VIO PAGES GE VALUE
VALVIOLE DC    F'0'                DEFAULT VIO PAGES LE VALUE
OUTCNT   DC    F'0'                ACTUAL OUTPUT COUNT
LOWIDATE DC    PL4'9999999'        LOWEST INCLUSIVE DATE
HIIDATE  DC    PL4'0'              HIGHEST INCLUSIVE DATE
LOWITIME DC    AL4((99*360000)+(99*6000)) LOWEST INCLUSIVE TIME
HIITIME  DC    AL4(0)                     HIGHEST INCLUSIVE TIME
DATES    DC    PL4'0'              START DATE
DATEE    DC    PL4'99999'          END DATE
IRSDATE  DC    PL4'0'              IRANGE START DATE
IRSTIME  DC    F'0'                IRANGE START TIME
IREDATE  DC    PL4'0'              IRANGE END   DATE
IRETIME  DC    F'0'                IRANGE END   TIME
CONVTIME DC    F'0'                CONVERTED TIME IN HUNDRETHS OF A SEC
TIMES    DC    F'0'                START TIME
TIMEE    DC    AL4(2147483647)     END TIME
SWITCH   DC    X'000000000000000000000000' MULTIPURPOSE SWITCHES
*        SWITCH+0 INDICATORS
ENDFILE  EQU   X'80'               END OF FILE REACHED ON SMFIN
SELSORT  EQU   X'40'               SORT REQUESTED
SELDATE  EQU   X'20'               DATE SELECTION REQUESTED
SELSTIME EQU   X'10'               START TIME SELECTION REQUESTED
SELJOBNM EQU   X'08'               JOBNAME SELECTION REQUESTED
SELJOBNO EQU   X'04'               JOB NUMBER SELECTION REQUESTED
SELSYSID EQU   X'02'               SYSID SELECTION REQUESTED
SELPGM   EQU   X'01'               PROGRAM NAME SELECTION REQUESTED
*        SWITCH+1 INDICATORS
SELETGE  EQU   X'80'               SELECT ON ELAPTIME GE
SELETLE  EQU   X'40'               SELECT ON ELAPTIME LE
SELCTGE  EQU   X'20'               SELECT ON CPUTIME GE
SELCTLE  EQU   X'10'               SELECT ON CPUTIME LE
SELMNTGE EQU   X'08'               SELECT ON MOUNTS GE
SELMNTLE EQU   X'04'               SELECT ON MOUNTS LE
SELUID   EQU   X'02'               USERID SELECTION REQUESTED
SELCC    EQU   X'01'               CONDITION CODE SELECTION REQUESTED
*        SWITCH+2 INDICATORS
SELBCGE  EQU   X'80'               SELECT ON BLOCK COUNT GE
SELBCLE  EQU   X'40'               SELECT ON BLOCK COUNT LE
SELRBGE  EQU   X'20'               SELECT ON REGION BELOW GE
SELRBLE  EQU   X'10'               SELECT ON REGION BELOW LE
SELRAGE  EQU   X'08'               SELECT ON REGION ABOVE GE
SELRALE  EQU   X'04'               SELECT ON REGION ABOVE LE
SELCPPGE EQU   X'02'               SELECT ON CPU PERCENT GE
SELCPPLE EQU   X'01'               SELECT ON CPU PERCENT LE
*        SWITCH+3 INDICATORS
SELTYPE  EQU   X'80'               SELECT ON JOB TYPE
SELNOFLU EQU   X'40'               SELECT NO STEPS WHICH FLUSHED
SELNOABN EQU   X'20'               SELECT NO STEPS WHICH ABENDED
SELNOTST EQU   X'10'               SELECT NO TEST JOBS
SELNOPRD EQU   X'08'               SELECT NO PRODUCTION JOBS
SELNOSTC EQU   X'04'               SELECT NO STARTED TASKS
SELNOTSU EQU   X'02'               SELECT NO TSO USERS
SELSTCNT EQU   X'01'               SELECT ON STOP COUNT
*        SWITCH+4 INDICATORS
SELPSTEP EQU   X'80'               SELECT ON PROC STEP
SELJSTEP EQU   X'40'               SELECT ON JOB STEP
SELTSUGE EQU   X'20'               SELECT ON TOTAL SERV UNITS GE
SELTSULE EQU   X'10'               SELECT ON TOTAL SERV UNITS LE
SELTOT   EQU   X'08'               WANT ACCUMULATED TOTALS
SELAVG   EQU   X'04'               WANT AVERAGES OF TOTALS
SELNODET EQU   X'02'               DO NOT WANT DETAIL REPORT
SELPRINT EQU   X'01'               SELECTIVE PRINT
*        SWITCH+5 INDICATORS
SELPTPGE EQU   X'80'               SELECT ON PERM TAPES GE
SELPTPLE EQU   X'40'               SELECT ON PERM TAPES LE
SELSTPGE EQU   X'20'               SELECT ON SCRATCH TAPES GE
SELSTPLE EQU   X'10'               SELECT ON SCRATCH TAPES LE
SELEPGGE EQU   X'08'               SELECT ON EXP PAGING GE
SELEPGLE EQU   X'04'               SELECT ON EXP PAGING LE
SELAPGGE EQU   X'02'               SELECT ON AUX PAGING GE
SELAPGLE EQU   X'01'               SELECT ON AUX PAGING LE
*        SWITCH+6 INDICATORS
SELVIOGE EQU   X'80'               SELECT ON VIO PAGES GE
SELVIOLE EQU   X'40'               SELECT ON VIO PAGES LE
SELSDAY  EQU   X'20'               SELECT ON START DAY-OF-WEEK
SELEDAY  EQU   X'10'               SELECT ON END   DAY-OF-WEEK
SELJOBL  EQU   X'08'               SELECT JOBLEVEL RECORDS ONLY
OPTOUT   EQU   X'04'               OPTIONAL OUTPUT FILE SPECIFIED
SELINT   EQU   X'02'               SELECT INTERVAL RECORDS ONLY
SELETIME EQU   X'01'               STOP TIME SELECTION REQUESTED
*        SWITCH+7 INDICATORS
SELTIMEI EQU   X'80'               SELECT ON TIMEINCLUSIVE BASIS
SELIRNG  EQU   X'40'               SELECT ON INCLUSIVE RANGE
SELCSUGE EQU   X'20'               SELECT ON CPU   SERV UNITS GE
SELCSULE EQU   X'10'               SELECT ON CPU   SERV UNITS LE
SELISUGE EQU   X'08'               SELECT ON I/O   SERV UNITS GE
SELISULE EQU   X'04'               SELECT ON I/O   SERV UNITS LE
SELMSUGE EQU   X'02'               SELECT ON MSO   SERV UNITS GE
SELMSULE EQU   X'01'               SELECT ON MSO   SERV UNITS LE
*        SWITCH+8 INDICATORS
SELSSUGE EQU   X'80'               SELECT ON SRB   SERV UNITS GE
SELSSULE EQU   X'40'               SELECT ON SRB   SERV UNITS LE
SELSUBT  EQU   X'20'               WANT SUBTOTALS
SELNOBAT EQU   X'10'               SELECT NO BATCH JOBS
CPUFRACT EQU   X'08'               DISPLAY CPU TIME WITH 1/100S
*        SWITCH+9 INDICATORS
SELZAALE EQU   X'80'               SELECT ON ZAAP CPUTIME LE
SELZAAGE EQU   X'40'               SELECT ON ZAAP CPUTIME GE
SELZIILE EQU   X'20'               SELECT ON ZIIP CPUTIME LE
SELZIIGE EQU   X'10'               SELECT ON ZIIP CPUTIME GE
SELSPELE EQU   X'08'               SELECT ON ZAAP+ZIIP CPUTIME LE
SELSPEGE EQU   X'04'               SELECT ON ZAAP+ZIIP CPUTIME GE
*
SDAYSW   DC    X'00'               START DAY-OF-WEEK SWITCHES
EDAYSW   DC    X'00'               END   DAY-OF-WEEK SWITCHES
SUN      EQU   X'80'               SELECT SUNDAY
MON      EQU   X'40'               SELECT MONDAY
TUE      EQU   X'20'               SELECT TUESDAY
WED      EQU   X'10'               SELECT WEDNESDAY
THU      EQU   X'08'               SELECT THURSDAY
FRI      EQU   X'04'               SELECT FRIDAY
SAT      EQU   X'02'               SELECT SATURDAY
*
***********************************************************************
*        FIXED LENGTH RECORD CREATED FROM SMF TYPE 30 RECORD          *
***********************************************************************
         CNOP  0,4
INREC    DS    0CL200
INJBN    DS    CL8              1  JOB NAME
INJNM    DS    CL8              9  JOB ID
INSJDATE DS    PL4              17 START JULIAN DATE
INSTIME  DS    F                21 START TIME (SEC/100)
INEJDATE DS    PL4              25 END JULIAN DATE
INETIME  DS    F                29 END TIME (SEC/100)
INSID    DS    CL4              33 SMF SYSTEM ID
INPSN    DS    CL8              37 PROC STEP NAME
INSTM    DS    CL8              45 JOB STEP NAME
INPGM    DS    CL8              53 PROGRAM NAME
INRUD    DS    CL8              61 SECURITY USERID
INSDAY   DS    H                69 START DAY-OF-THE-WEEK (1-7)
INEDAY   DS    H                71 END   DAY-OF-THE-WEEK (1-7)
INSTPCC  DS    CL5              73 STEP CONDITION CODE
INSGDATE DS    PL5              78 START GREGORIAN DATE
INEGDATE DS    PL5              83 END   GREGORIAN DATE
INTYPE   DS    C                88 JOB TYPE (T/P)
INELAP   DS    F                89 ELAPSED TIME (SEC/100)
INTEP    DS    F                93 STEP TOTAL EXCPS
INTOTCPU DS    F                97 STEP TOTAL CPU
INSTGB16 DS    F               101 STEP REGION USED BELOW 16M
INSTGA16 DS    F               105 STEP REGION USED ABOVE 16M
INTPR    DS    F               109 STEP TOTAL SPECIFIC TAPE MOUNTS
INPTM    DS    F               113 STEP TOTAL SCRATCH TAPE MOUNTS
INMNTS   DS    F               117 STEP TOTAL TAPE MOUNTS
INCPP    DS    F               121 STEP CPU PERCENT BUSY
INEXPTOT DS    F               125 STEP EXP STG PAGE TOTAL
INAUXTOT DS    F               129 STEP AUX STG PAGE TOTAL
INTSRV   DS    F               133 STEP TOTAL FOR TOTAL SERVICE UNITS
INVIOTOT DS    F               137 STEP VIO PAGE TOTAL
INCSRV   DS    F               141 STEP TOTAL FOR CPU   SERVICE UNITS
INISRV   DS    F               145 STEP TOTAL FOR IO    SERVICE UNITS
INMSRV   DS    F               149 STEP TOTAL FOR MSO   SERVICE UNITS
INSSRV   DS    F               153 STEP TOTAL FOR SRB   SERVICE UNITS
INZAACPU DS    F               157 STEP ZAAP CPU
INZIICPU DS    F               161 STEP ZIIP CPU
INSPECPU DS    F               165 STEP ZAAP+ZIIP CPU
         DC    CL40' '
*
DDNAME   DS    CL8                 DDNAME FIELD FOR TIOT SEARCH ROUTINE
RGNBWRK  DC    F'0'                REGION BELOW (IN M)        WORK AREA
RGNAWRK  DC    F'0'                REGION ABOVE (IN M)        WORK AREA
SUWRKT   DC    F'0'                TOT SERVICE UNITS (IN K)   WORK AREA
SUWRKC   DC    F'0'                CPU SERVICE UNITS (IN K)   WORK AREA
SUWRKI   DC    F'0'                I/O SERVICE UNITS (IN K)   WORK AREA
SUWRKM   DC    F'0'                MSO SERVICE UNITS (IN K)   WORK AREA
SUWRKS   DC    F'0'                SRB SERVICE UNITS (IN K)   WORK AREA
LINECT   DC    PL2'99'             LINE COUNTER
PAGECT   DC    PL3'0'              PAGE COUNTER
OUTTIME  DS    CL12                CONVERTED TIME AREA (HHH:MM:SS.TT)
WKCC     DS    0CL6                WORK AREA FOR CONDITION CODE
WKCCT    DS    CL1                 WORK AREA FOR CONDITION CODE TYPE
WKCCV    DS    CL5                 WORK AREA FOR CONDITION CODE VALUE
HIGHCC   DS    0CL6                HIGH CONDITION CODE TYPE AND VALUE
HIGHCCT  DS    CL1                 HIGH CONDITION CODE TYPE
HIGHCCV  DS    CL5                 HIGH CONDITION CODE VALUE
TMOUT    DS    F                   CONVERTED TIME AREA IN SEC/100
TMOUTH   DS    F                   CONVERTED TIME (HOURS PORTION)
TMOUTM   DS    F                   CONVERTED TIME (MINUTES PORTION)
TMOUTS   DS    F                   CONVERTED TIME (SECONDS PORTION)
SUBTJOBO DC    H'0'                SUBTOTAL JOBNAME OFFSET
SUBTJOBL DC    F'0'                SUBTOTAL JOBNAME LENGTH
SUBTNBR  DC    H'0'                SUBTOTAL JOBNAME SUBPARAMETER PARMS
SUBTOPT  DC    4F'0'               SUBTOTAL OPTION LIST
         DC    X'FFFFFFFF'         END OF SUBTOTAL OPTION LIST
SUBTITLE DC    4CL14' '            SUBTOTAL TITLES
JSUB1A   DC    F'0'                ADDRESS OF JOBNAME SUBPARM 1
JSUB2A   DC    F'0'                ADDRESS OF JOBNAME SUBPARM 2
JSUB3A   DC    F'0'                ADDRESS OF JOBNAME SUBPARM 3
JSUB1L   DC    H'0'                LENGTH  OF JOBNAME SUBPARM 1
JSUB2L   DC    H'0'                LENGTH  OF JOBNAME SUBPARM 2
JSUB3L   DC    H'0'                LENGTH  OF JOBNAME SUBPARM 3
JSUBCNT  DC    H'0'                NUMBER OF JOBNAME SUBPARMS
CURRFLDS DS    0F                  SUBTOTAL CURRENT  SEQUENCE FIELDS
CURRFLD1 DC    CL10' '             SUBTOTAL CURRENT  SEQUENCE FIELD 1
CURRFLD2 DC    CL10' '             SUBTOTAL CURRENT  SEQUENCE FIELD 2
CURRFLD3 DC    CL10' '             SUBTOTAL CURRENT  SEQUENCE FIELD 3
CURRFLD4 DC    CL10' '             SUBTOTAL CURRENT  SEQUENCE FIELD 4
PREVFLDS DS    0F                  SUBTOTAL PREVIOUS SEQUENCE FIELDS
PREVFLD1 DC    CL10' '             SUBTOTAL PREVIOUS SEQUENCE FIELD 1
PREVFLD2 DC    CL10' '             SUBTOTAL PREVIOUS SEQUENCE FIELD 2
PREVFLD3 DC    CL10' '             SUBTOTAL PREVIOUS SEQUENCE FIELD 3
PREVFLD4 DC    CL10' '             SUBTOTAL PREVIOUS SEQUENCE FIELD 4
ACCWRK1  DC    PL16'0'             ACCUMULATOR WORK AREA
ACCWRK2  DC    PL16'0'             ACCUMULATOR WORK AREA
ACCWRK3  DC    PL08'0'             ACCUMULATOR WORK AREA
ACCWRK4  DC    PL08'0'             ACCUMULATOR WORK AREA
STEPCNT  DC    PL05'0'             SELECTED STEP COUNT
ROUND    DC    PL05'0'             CALCULATION ROUNDING FACTOR
DAYTABLE DC    CL21'SUNMONTUEWEDTHUFRISAT' DAYS OF THE SEEK
         CNOP  0,4
SORTPARM DC    X'80',AL3(SORTA)
         DC    H'0'
SORTA    DC    H'28'               LENGTH OF PARAMETER LIST
         DC    A(SORTM)            ADDRESS OF START OF SORT STMT
         DC    A(SORTENDM)         ADDRESS OF END OF SORT STMT
         DC    A(RECM)             ADDRESS OF START OF RECORD STMT
         DC    A(RECENDM)          ADDRESS OF END OF RECORD STMT
         DC    A(E15)              ADDRESS OF E15 EXIT
         DC    A(E35)              ADDRESS OF E35 EXIT
         DC    F'80000'            MAIN STORAGE FOR SORT
SORTM    DC    C' SORT FIELDS=('   START OF SORT FIELDS STMT
SRTFLDS  DC    C'           '      ROOM FOR FIRST SORT FIELD + ','
         DC    C'           '      ROOM FOR SECOND SORT FIELD + ','
         DC    C'           '      ROOM FOR THIRD SORT FIELD + ','
         DC    C'           '      ROOM FOR FOURTH SORT FIELD + ','
         DC    C'           '      ROOM FOR FIFTH SORT FIELD + ')'
SORTENDM DC    C' '                END OF SORT FIELDS STMT
RECM     DC    C' RECORD TYPE=F,LENGTH=200'
RECENDM  DC    C' '                END OF RECORD STMT
SRTFLDCT DC    PL3'0'              SORT FIELD COUNT
         SPACE 3
HEAD     DS    0CL133              PARM HEADINGS
         DC    C'1'                ANS CONTROL CHARACTER
         DC    30C' '
OTITLE1  DC    CL50'INPUT PARMS SELECTED FOR FLSMFJOB REL 8.0'
         DC    52C' '
         SPACE 3
CARDREC  DS    0CL133              PARM CARDS
         DC    C'0'                ANS CONTROL CHARACTER
         DC    30C' '
CARDAREA DC    80C' '              SAVE AREA FOR INPUT CARD
         DC    22C' '
         SPACE 3
INCLREC  DS    CL133' '            TIME INCLUSIVE INFO RECORD
         ORG   INCLREC
         DC    C'0'                ANS CONTROL CHARACTER
         DC    30C' '
         DC    C'THE TIME INCLUSIVE RANGE IS '
INCSDATE DS    CL10                INCLUSIVE START DATE
         DC    C' '
INCSTIME DS    CL5                 INCLUSIVE START TIME
         DC    C' TO '
INCEDATE DS    CL10                INCLUSIVE END   DATE
         DC    C' '
INCETIME DS    CL5                 INCLUSIVE END   TIME
         ORG
WARNREC  DS    CL133' '            WARNING INFO RECORD
         ORG   WARNREC
         DC    C'0'                ANS CONTROL CHARACTER
WARNMSG  DC    CL120' '
         ORG
         SPACE 3
HEAD1    DS    0CL133              HEADING LINE1
         DC    C'1'                ANS CONTROL CHARACTER
         DC    40C' '
OTITLE2  DC    CL50'JOB RESOURCE UTILIZATION REPORT'
         DC    31C' '
         DC    CL4'PAGE'
OPAGCT   DC    CL6' '              PAGE COUNT
         DC    C' '
         SPACE 3
HEAD2A   DC    CL1'0',CL132' '     HEADING LINE2A
         SPACE 3
HEAD2B   DC    CL1' ',CL132' '     HEADING LINE2B
         SPACE 3
HEAD3    DC    CL1'0',CL132' '     TOTALS HEADING
         ORG   HEAD3+1
         DC    C'SMF START DATE: '
HLDATE   DS    CL10
         DC    C' '
HLTIME   DS    CL5
         ORG HEAD3+132-30
         DC    C'SMF END DATE: '
HHDATE   DS    CL10
         DC    C' '
HHTIME   DS    CL5
         ORG
HEAD4    DC    CL1'0',CL132' '     TOTALS HEADING
         ORG   HEAD4+17+35-10
         DC    C'TOTALS'
         ORG   HEAD4+17+35+5+25-12
         DC    C'AVERAGES'
         ORG
         SPACE 3
DETAIL   DC    CL133' '            DETAIL PRINT RECORD
TDETAIL  DC    CL133' '            DETAIL PRINT RECORD FOR TOTALS
         SPACE 3
OJOBNAME DC    CL8' '              JOBNAME
OJOBNO   DC    CL8' '              JOBNUMBER
OJSDATE  DC    CL8' '              START JULIAN DATE (YYYY.DDD)
OJEDATE  DC    CL8' '              END   JULIAN DATE (YYYY.DDD)
OGSDATE  DC    CL10' '             START GREGORIAN DATE (YYYY/MM/DD)
OGEDATE  DC    CL10' '             END   GREGORIAN DATE (YYYY/MM/DD)
OSTIME   DC    CL5' '              START TIME (HH:MM)
OETIME   DC    CL5' '              END   TIME (HH:MM)
OSYSID   DC    CL4' '              SMF SYSTEM ID
OPSTEP   DC    CL8' '              PROC STEP NAME
OJSTEP   DC    CL8' '              JOB STEP NAME
OPGMNM   DC    CL8' '              PROGRAM NAME
OUSERID  DC    CL8' '              USERID
OCCODE   DC    CL5' '              STEP CONDITION CODE
OELAPTM  DC    CL9' '              STEP ELAPSED TIME (HHH:MM:SS)
OCPUTM   DC    CL10' '             STEP CPU TIME AS MMMM:SS OR
*                                  MMMM:SS.TH
OZAAPTM  DC    CL10' '             STEP ZAAP CPU TIME AS MMMM:SS OR
*                                  MMMM:SS.TH
OZIIPTM  DC    CL10' '             STEP ZIIP CPU TIME AS MMMM:SS OR
*                                  MMMM:SS.TH
OSPECTM  DC    CL10' '             STEP SPEC CPU TIME AS MMMM:SS OR
*                                  MMMM:SS.TH
ORGNB16  DC    CL7' '              REGION USED BELOW 16M (NNNN.NM)
ORGNA16  DC    CL7' '              REGION USED ABOVE 16M (NNNN.NM)
OMOUNTS  DC    CL3' '              TOTAL NUMBER OF TAPE MOUNTS
OEXCPS   DC    CL10' '             STEP TOTAL EXCP COUNT (NN,NNN,NNN)
OCPU#    DC    CL3' '              STEP AVERAGE CPU PERCENT
OTYPE    DC    CL1' '              TEST/PRODUCTION JOB TYPE
OPTAPES  DC    CL3' '              TOTAL NUMBER OF PERM TAPE MOUNTS
OSTAPES  DC    CL3' '              TOTAL NUMBER OF SCRATCH TAPE MOUNTS
OEXPPAG  DC    CL8' '              PAGES TO/FROM EXP STORAGE
OAUXPAG  DC    CL8' '              PAGES TO/FROM AUX STORAGE
OTSUS    DC    CL9' '              TOTAL SERVICE UNITS (IN K)
OVIOPAG  DC    CL8' '              PAGES TO/FROM AUX STORAGE
OSDAY    DC    CL3' '              START DAY-OF-THE-WEEK
OEDAY    DC    CL3' '              END   DAY-OF-THE-WEEK
OCSUS    DC    CL9' '              CPU SERVICE UNITS (IN K)
OISUS    DC    CL9' '              IO  SERVICE UNITS (IN K)
OMSUS    DC    CL9' '              MSO SERVICE UNITS (IN K)
OSSUS    DC    CL9' '              SRB SERVICE UNITS (IN K)
         SPACE 3
MSGWTO   WTO   '123456789 123456789 123456789 123456789 123456789 12345X
               6789 123456789 123456789 123456789 123456789 123456789 1X
               23456789 ',ROUTCDE=11,MF=L
         EJECT
         PRINT NOGEN
SYSIN    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,EODAD=ENDPARM,LRECL=80
SMFIN    DCB   DDNAME=SMFIN,MACRF=GL,DSORG=PS,EODAD=EOF,BFTEK=A
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,LRECL=133,RECFM=FBA
DATAOUT  DCB   DDNAME=DATAOUT,MACRF=PM,DSORG=PS,LRECL=200,RECFM=FB
         PRINT GEN
         EJECT
SMFT6    DSECT
         IFASMFR 30
         EJECT
         DCBD  DSORG=QS,DEVD=DA
         EJECT
***********************************************************************
*                                                                     *
*        THIS IS A TABLE OF ERROR MESSAGES                            *
*                                                                     *
*        EACH ENTRY IS 120 BYTES LONG.  EACH ENTRY CONTAINS THE       *
*        EXACT TEXT TO BE PLACED IN A WTO MESSAGE IF THIS ERROR       *
*        OCCURS.  AN ERROR INDEX WILL BE USED TO SPECIFY WHICH        *
*        ERROR MESSAGE WILL BE USED.  THIS TECHNIQUE PREVENTS         *
*        ALL OF THE ERROR MESSAGES FROM USING UP A LOT OF BASE        *
*        REGISTERS.                                                   *
*                                                                     *
*        AN ERROR INDEX OF 1 WILL CAUSE THE FIRST 120 CHARACTERS      *
*        TO BE USED.  AN ERROR INDEX OF 2 WILL CAUSE THE NEXT         *
*        120 CHARACTERS TO BE USED, ETC.                              *
*                                                                     *
***********************************************************************
MSGTBL   CSECT
         DC    CL120'SMF1001 - INVALID KEYWORD ON INPUT SYSIN CARD     X
                                                                       X
                             '
         DC    CL120'SMF1002 - INVALID JOBNAME VALUE ON SYSIN CARD - MUX
               ST 1 TO 8 ALPHANUMERIC CHARACTERS                       X
                             '
         DC    CL120'SMF1003 - INVALID JOBNAME VALUE ON SYSIN CARD - INX
               DEX FIELD WAS NOT PRECEDED BY THE JOBNAME               X
                             '
         DC    CL120'SMF1004 - INVALID JOBNAME VALUE ON SYSIN CARD - JOX
               BNAME EXCEEDS 8 CHARACTERS                              X
                             '
         DC    CL120'SMF1005 - INVALID JOBNAME VALUE ON SYSIN CARD - INX
               DEX LENGTH EXCEEDS 2 CHARACTERS                         X
                             '
         DC    CL120'SMF1006 - INVALID JOBNAME VALUE ON SYSIN CARD - INX
               DEX VALUE IS NOT NUMERIC                                X
                             '
         DC    CL120'SMF1007 - INVALID DATE VALUE ON SYSIN CARD - BEGINX
                DATE NOT IN THE FORM YY.DDD, YYYY.DDD, MM/DD/YY, OR YYYX
               Y/MM/DD       '
         DC    CL120'SMF1008 - INVALID DATE VALUE ON SYSIN CARD - BEGINX
                DATE NOT SEPARATED FROM END DATE BY ":"                X
                             '
         DC    CL120'SMF1009 - INVALID DATE VALUE ON SYSIN CARD - END DX
               ATE NOT IN THE FORM YY.DDD, YYYY.DDD, MM/DD/YY, OR YYYY/X
               MM/DD         '
         DC    CL120'SMF1010 - INVALID SDAY SUBPARAMETER ON SYSIN CARD X
               - NO SUBPARAMETERS ENTERED                              X
                             '
         DC    CL120'SMF1011 - INVALID SDAY SUBPARAMETER ON SYSIN CARD X
               - NULL PARAMETER ENTERED                                X
                             '
         DC    CL120'SMF1012 - INVALID SDAY SUBPARAMETER ON SYSIN CARD X
               - UNKNOWN SUBPARAMETER ENTERED                          X
                             '
         DC    CL120'SMF1013 - INVALID COMBINATION OF END DAY-OF-WEEK SX
               ELECT STATEMENTS RESULTING IN NO ELIGIBLE DAYS          X
                             '
         DC    CL120'SMF1014 - INVALID START TIME VALUE ON SYSIN CARD -X
                BEGIN TIME NOT IN THE FORM HH.MM                       X
                             '
         DC    CL120'SMF1015 - INVALID START TIME VALUE ON SYSIN CARD -X
                BEGIN TIME NOT SEPARATED FROM END TIME BY ":"          X
                             '
         DC    CL120'SMF1016 - INVALID START TIME VALUE ON SYSIN CARD -X
                END TIME NOT IN THE FORM HH.MM                         X
                             '
         DC    CL120'SMF1017 - INVALID STOP TIME VALUE ON SYSIN CARD - X
               BEGIN TIME NOT IN THE FORM HH.MM                        X
                             '
         DC    CL120'SMF1018 - INVALID STOP TIME VALUE ON SYSIN CARD - X
               BEGIN TIME NOT SEPARATED FROM END TIME BY ":"           X
                             '
         DC    CL120'SMF1019 - INVALID STOP TIME VALUE ON SYSIN CARD - X
               END TIME NOT IN THE FORM HH.MM                          X
                             '
         DC    CL120'SMF1020 - MORE THAN 1000 STOP TIME RANGE SELECT STX
               ATEMENTS ENTERED                                        X
                             '
         DC    CL120'SMF1021 - INVALID SYSTEM VALUE ON SYSIN CARD - MUSX
               T BE 1 TO 4 ALPHANUMERIC CHARACTERS                     X
                             '
         DC    CL120'SMF1022 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - NO SUBPARAMETERS ENTERED                              X
                             '
         DC    CL120'SMF1023 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - MORE THAN 5 SUBPARAMETERS ENTERED                     X
                             '
         DC    CL120'SMF1024 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - UNKNOWN SUBPARAMETER ENTERED                          X
                             '
         DC    CL120'SMF1025 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - SUBPARAMETERS NOT SEPARATED BY ","                    X
                             '
         DC    CL120'SMF1026 - INVALID SORT SUBPARAMETER ON SYSIN CARD X
               - NULL PARAMETER ENTERED                                X
                             '
         DC    CL120'SMF1027 - INVALID ELAPSED TIME VALUE ON SYSIN CARDX
                - MUST BE IN THE FORM OF HHH.MM.SS                     X
                             '
         DC    CL120'SMF1028 - INVALID CPU TIME VALUE ON SYSIN CARD - MX
               UST BE NUMERIC NUMBER OF MINUTES (MAX. 6 DIGITS)        X
                             '
         DC    CL120'SMF1029 - INVALID TOTAL TAPE MOUNT VALUE ON SYSIN X
               CARD - MUST BE 1 TO 6 NUMERIC DIGITS                    X
                             '
         DC    CL120'SMF1030 - SYSPRINT DD STATEMENT MISSING - JOB ABORX
               TED                                                     X
                             '
         DC    CL120'SMF1031 - SMFIN DD STATEMENT MISSING - JOB ABORTEDX
                                                                       X
                             '
         DC    CL120'SMF1032 - INVALID KEYWORD OPERATOR ON SYSIN INPUT X
               CARD - NOT VALID FOR THIS KEYWORD                       X
                             '
         DC    CL120'SMF1033 - NULL KEYWORD ON SYSIN INPUT CARD        X
                                                                       X
                             '
         DC    CL120'SMF1034 - INVALID CPU PERCENT VALUE ON SYSIN CARD X
               - MUST BE 1 TO 3 NUMERIC DIGITS                         X
                             '
         DC    CL120'SMF1035 - INVALID JOBNO VALUE ON SYSIN CARD - MUSTX
                START WITH JOB/STC/TSU FOLLOWED BY A 5 DIGIT JOB NUMBERX
                             '
         DC    CL120'SMF1036 - INVALID REGION SIZE ABOVE VALUE ON SYSINX
                CARD - MUST BE 1 TO 5 NUMERIC DIGITS (IN MEG)          X
                             '
         DC    CL120'SMF1037 - INVALID PROGRAM NAME VALUE ON SYSIN CARDX
                - MUST BE 1 TO 8 ALPHANUMERIC CHARACTERS               X
                             '
         DC    CL120'SMF1038 - INVALID REGION SIZE BELOW VALUE ON SYSINX
                CARD - MUST BE 1 TO 5 NUMERIC DIGITS (IN MEG)          X
                             '
         DC    CL120'SMF1039 - INVALID USERID VALUE ON SYSIN CARD - MUSX
               T BE 1 TO 8 ALPHANUMERIC CHARACTERS                     X
                             '
         DC    CL120'SMF1040 - INVALID I/O COUNT VALUE ON SYSIN CARD - X
               MUST BE 1 TO 9 NUMERIC DIGITS                           X
                             '
         DC    CL120'SMF1041 - INVALID CONDITION CODE VALUE ON SYSIN CAX
               RD - MUST BE 1 TO 5 ALPHANUMERIC CHARACTERS             X
                             '
         DC    CL120'SMF1042 - INVALID JOB TYPE VALUE ON SYSIN CARD - MX
               UST BE "T" OR "P" TO INDICATE TEST OR PRODUCTION        X
                             '
         DC    CL120'SMF1043 - INVALID STOP COUNT VALUE ENTERED ON SYSIX
               N CARD - MUST BE 1 TO 9 NUMERIC DIGITS                  X
                             '
         DC    CL120'SMF1044 - INVALID PROC STEP NAME ON SYSIN CARD - MX
               UST BE 1 TO 8 ALPHANUMERIC CHARACTERS                   X
                             '
         DC    CL120'SMF1045 - INVALID JOB STEP NAME ON SYSIN CARD - MUX
               ST BE 1 TO 8 ALPHANUMERIC CHARACTERS                    X
                             '
         DC    CL120'SMF1046 - INTERNAL ERROR - NO FIELDS SELECTED FOR X
               PRINTING                                                X
                             '
         DC    CL120'SMF1047 - INTERNAL ERROR - PRINT SELECTED FOR NON-X
               PRINTABLE OPTION                                        X
                             '
         DC    CL120'SMF1048 - PRINT SPECIFICATION ERROR - THE GENERATEX
               D PRINT LINE EXCEEDS 133 CHARACTERS                     X
                             '
         DC    CL120'SMF1049 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - NULL PARAMETER ENTERED                               X
                             '
         DC    CL120'SMF1050 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - UNKNOWN SUBPARAMETER ENTERED                         X
                             '
         DC    CL120'SMF1051 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
               - MORE THAN 30 SUBPARAMETERS ENTERED                    X
                             '
         DC    CL120'SMF1052 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - SUBPARAMETERS NOT SEPARATED BY ","                   X
                             '
         DC    CL120'SMF1053 - INVALID PRINT SUBPARAMETER ON SYSIN CARDX
                - NO SUBPARAMETERS ENTERED                             X
                             '
         DC    CL120'SMF1054 - INVALID NON-SCRATCH TAPE MOUNT VALUE ON X
               SYSIN CARD - MUST BE 1 TO 6 NUMERIC DIGITS              X
                             '
         DC    CL120'SMF1055 - INVALID SCRATCH TAPE MOUNT VALUE ON SYSIX
               N CARD - MUST BE 1 TO 6 NUMERIC DIGITS                  X
                             '
         DC    CL120'SMF1056 - INVALID EXPANDED STORAGE PAGE COUNT VALUX
               E ON SYSIN CARD - MUST BE 1 TO 9 NUMERIC DIGITS         X
                             '
         DC    CL120'SMF1057 - INVALID AUXILLARY STORAGE PAGE COUNT VALX
               UE ON SYSIN CARD - MUST BE 1 TO 9 NUMERIC DIGITS        X
                             '
         DC    CL120'SMF1058 - INVALID TOTAL SERVICE UNIT COUNT VALUE OX
               N SYSIN CARD - MUST BE 1 TO 9 NUMERIC DIGITS            X
                             '
         DC    CL120'SMF1059 - INVALID VIO PAGE COUNT VALUE ON SYSIN CAX
               RD - MUST BE 1 TO 9 NUMERIC DIGITS                      X
                             '
         DC    CL120'SMF1060 - MORE THAN 1000 JOBNAME SELECT STATEMENTSX
                ENTERED                                                X
                             '
         DC    CL120'SMF1061 - MORE THAN 1000 JOB NUMBER SELECT STATEMEX
               NTS ENTERED                                             X
                             '
         DC    CL120'SMF1062 - MORE THAN 1000 DATE RANGE SELECT STATEMEX
               NTS ENTERED                                             X
                             '
         DC    CL120'SMF1063 - MORE THAN 1000 START TIME RANGE SELECT SX
               TATEMENTS ENTERED                                       X
                             '
         DC    CL120'SMF1064 - MORE THAN 1000 SYSTEM ID NAME SELECT STAX
               TEMENTS ENTERED                                         X
                             '
         DC    CL120'SMF1065 - MORE THAN 1000 PROC STEP NAME SELECT STAX
               TEMENTS ENTERED                                         X
                             '
         DC    CL120'SMF1066 - MORE THAN 1000 JOB STEP NAME SELECT STATX
               EMENTS ENTERED                                          X
                             '
         DC    CL120'SMF1067 - MORE THAN 1000 PROGRAM NAME SELECT STATEX
               MENTS ENTERED                                           X
                             '
         DC    CL120'SMF1068 - MORE THAN 1000 SECURITY USERID SELECT STX
               ATEMENTS ENTERED                                        X
                             '
         DC    CL120'SMF1069 - MORE THAN 1000 COMPLETION CODE SELECT STX
               ATEMENTS ENTERED                                        X
                             '
         DC    CL120'SMF1070 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               MUST BE 1 TO 8 ALPHANUMERIC CHARACTERS                  X
                             '
         DC    CL120'SMF1071 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               INDEX FIELD WAS NOT PRECEDED BY THE JOBNAME             X
                             '
         DC    CL120'SMF1072 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               JOBNAME EXCEEDS 8 CHARACTERS                            X
                             '
         DC    CL120'SMF1073 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               INDEX LENGTH EXCEEDS 2 CHARACTERS                       X
                             '
         DC    CL120'SMF1074 - INVALID EXJOBNAME VALUE ON SYSIN CARD - X
               INDEX VALUE IS NOT NUMERIC                              X
                             '
         DC    CL120'SMF1075 - MORE THAN 1000 EXJOBNAME SELECT STATEMENX
               TS ENTERED                                              X
                             '
         DC    CL120'SMF1076 - INVALID EXJOBNO VALUE ON SYSIN CARD - MUX
               ST START WITH JOB/STC/TSU FOLLOWED BY A 5 DIGIT JOB NUMBX
                ER           '
         DC    CL120'SMF1077 - MORE THAN 1000 EXJOBNUMBER SELECT STATEMX
               ENTS ENTERED                                            X
                             '
         DC    CL120'SMF1078 - INVALID EXSYSTEM VALUE ON SYSIN CARD - MX
               UST BE 1 TO 4 ALPHANUMERIC CHARACTERS                   X
                             '
         DC    CL120'SMF1079 - MORE THAN 1000 EXSYSTEM ID NAME SELECT SX
               TATEMENTS ENTERED                                       X
                             '
         DC    CL120'SMF1080 - INVALID EXPSTEP NAME ON SYSIN CARD - MUSX
               T BE 1 TO 8 ALPHANUMERIC CHARACTERS                     X
                             '
         DC    CL120'SMF1081 - MORE THAN 1000 EXPSTEP NAME SELECT STATEX
               MENTS ENTERED                                           X
                             '
         DC    CL120'SMF1082 - INVALID EXJSTEP NAME ON SYSIN CARD - MUSX
               T BE 1 TO 8 ALPHANUMERIC CHARACTERS                     X
                             '
         DC    CL120'SMF1083 - MORE THAN 1000 EXJSTEP NAME SELECT STATEX
               MENTS ENTERED                                           X
                             '
         DC    CL120'SMF1084 - INVALID EXPROGRAM NAME VALUE ON SYSIN CAX
               RD - MUST BE 1 TO 8 ALPHANUMERIC CHARACTERS             X
                             '
         DC    CL120'SMF1085 - MORE THAN 1000 EXPROGRAM NAME SELECT STAX
               TEMENTS ENTERED                                         X
                             '
         DC    CL120'SMF1086 - INVALID EXUSERID VALUE ON SYSIN CARD - MX
               UST BE 1 TO 8 ALPHANUMERIC CHARACTERS                   X
                             '
         DC    CL120'SMF1087 - MORE THAN 1000 EXUSERID SELECT STATEMENTX
               S ENTERED                                               X
                             '
         DC    CL120'SMF1088 - INVALID EXCONDITION CODE VALUE ON SYSIN X
               CARD - MUST BE 1 TO 5 ALPHANUMERIC CHARACTERS           X
                             '
         DC    CL120'SMF1089 - MORE THAN 1000 EXCOMPLETION CODE SELECT X
               STATEMENTS ENTERED                                      X
                             '
         DC    CL120'SMF1090 - INVALID COMBINATION OF START DAY-OF-WEEKX
                SELECT STATEMENTS RESULTING IN NO ELIGIBLE DAYS        X
                             '
         DC    CL120'SMF1091 - JOBLEVEL AND INTERVAL KEYWORDS ARE MUTUAX
               LLY EXCLUSIVE                                           X
                             '
         DC    CL120'SMF1092 - INVALID EDAY SUBPARAMETER ON SYSIN CARD X
               - NO SUBPARAMETERS ENTERED                              X
                             '
         DC    CL120'SMF1093 - INVALID EDAY SUBPARAMETER ON SYSIN CARD X
               - NULL PARAMETER ENTERED                                X
                             '
         DC    CL120'SMF1094 - INVALID EDAY SUBPARAMETER ON SYSIN CARD X
               - UNKNOWN SUBPARAMETER ENTERED                          X
                             '
         DC    CL120'SMF1095 - TIMEINCLUSIVE OPTION ENTERED BUT NO DATEX
                SELECTION WAS ENTERED - TIMEINC OPTION IGNORED         X
                             '
         DC    CL120'SMF1096 - TIMEINCLUSIVE OPTION ENTERED BUT NO TIMEX
                SELECTION WAS ENTERED - TIMEINC OPTION IGNORED         X
                             '
         DC    CL120'SMF1097 - INVALID IRANGE VALUE ON SYSIN CARD - BEGX
               IN DATE NOT IN THE FORM YY.DDD, YYYY.DDD, MM/DD/YY, OR YX
               YYY/MM/DD     '
         DC    CL120'SMF1098 - INVALID IRANGE VALUE ON SYSIN CARD - BEGX
               IN DATE NOT SEPARATED FROM BEGIN TIME BY ","            X
                             '
         DC    CL120'SMF1099 - INVALID IRANGE VALUE ON SYSIN CARD - BEGX
                IN TIME NOT IN THE FORM HH.MM                          X
                             '
         DC    CL120'SMF1100 - INVALID IRANGE VALUE ON SYSIN CARD - BEGX
               IN DATE AND TIME RANGE NOT SEPARATED FROM END DATE AND TX
               IME BY ":"    '
         DC    CL120'SMF1101 - INVALID IRANGE VALUE ON SYSIN CARD - ENDX
                DATE NOT IN THE FORM YY.DDD, YYYY.DDD, MM/DD/YY, OR YYYX
               Y/MM/DD       '
         DC    CL120'SMF1102 - INVALID IRANGE VALUE ON SYSIN CARD - ENDX
                DATE NOT SEPARATED FROM END TIME BY ","                X
                             '
         DC    CL120'SMF1103 - INVALID IRANGE VALUE ON SYSIN CARD - ENDX
                 TIME NOT IN THE FORM HH.MM                            X
                             '
         DC    CL120'SMF1104 - INVALID CPU SERVICE UNIT COUNT VALUE ON X
               SYSIN CARD - MUST BE 1 TO 9 NUMERIC DIGITS              X
                             '
         DC    CL120'SMF1105 - INVALID I/O SERVICE UNIT COUNT VALUE ON X
               SYSIN CARD - MUST BE 1 TO 9 NUMERIC DIGITS              X
                             '
         DC    CL120'SMF1106 - INVALID MSO SERVICE UNIT COUNT VALUE ON X
               SYSIN CARD - MUST BE 1 TO 9 NUMERIC DIGITS              X
                             '
         DC    CL120'SMF1107 - INVALID SRB SERVICE UNIT COUNT VALUE ON X
               SYSIN CARD - MUST BE 1 TO 9 NUMERIC DIGITS              X
                             '
         DC    CL120'SMF1108 - INVALID SUBTOTAL SUBPARAMETER ON SYSIN CX
               ARD - NO SUBPARAMETERS ENTERED                          X
                             '
         DC    CL120'SMF1109 - INVALID SUBTOTAL SUBPARAMETER ON SYSIN CX
               ARD - MORE THAN 4 SUBPARAMETERS ENTERED                 X
                             '
         DC    CL120'SMF1110 - INVALID SUBTOTAL SUBPARAMETER ON SYSIN CX
               ARD - NULL PARAMETER ENTERED                            X
                             '
         DC    CL120'SMF1111 - INVALID SUBTOTAL SUBPARAMETER ON SYSIN CX
               ARD - UNKNOWN SUBPARAMETER ENTERED                      X
                             '
         DC    CL120'SMF1112 - INVALID JOBNAME SPECIFICATION ON SUBTOTAX
               L SYSIN CARD - JOBNAME OFFSET/LENGTH VALUE NOT FOLLOWED X
               BY A ")"      '
         DC    CL120'SMF1113 - INVALID JOBNAME SPECIFICATION ON SUBTOTAX
               L SYSIN CARD - ONLY THE OFFSET AND LENGTH VALUES CAN BE X
               ENTERED       '
         DC    CL120'SMF1114 - INVALID JOBNAME SPECIFICATION ON SUBTOTAX
               L SYSIN CARD - JOBNAME OFFSET AND LENGTH VALUES MUST BOTX
               H BE ENTERED  '
         DC    CL120'SMF1115 - INVALID JOBNAME SPECIFICATION ON SUBTOTAX
               L SYSIN CARD - JOBNAME OFFSET VALUE IS NOT NUMERIC      X
                             '
         DC    CL120'SMF1116 - INVALID JOBNAME SPECIFICATION ON SUBTOTAX
               L SYSIN CARD - JOBNAME OFFSET VALUE CANNOT EXCEED 2 DIGIX
               TS IN LENGTH  '
         DC    CL120'SMF1117 - INVALID JOBNAME SPECIFICATION ON SUBTOTAX
               L SYSIN CARD - JOBNAME OFFSET VALUE MUST HAVE A VALUE OFX
                1 TO 8       '
         DC    CL120'SMF1118 - INVALID JOBNAME SPECIFICATION ON SUBTOTAX
               L SYSIN CARD - JOBNAME LENGTH VALUE CANNOT EXCEED 2 DIGIX
               T IN LENGTH   '
         DC    CL120'SMF1119 - INVALID JOBNAME SPECIFICATION ON SUBTOTAX
               L SYSIN CARD - JOBNAME LENGTH VALUE IS NOT NUMERIC      X
                             '
         DC    CL120'SMF1120 - INVALID JOBNAME SPECIFICATION ON SUBTOTAX
               L SYSIN CARD - JOBNAME LENGTH VALUE MUST HAVE A VALUE OFX
                1 TO 8       '
         DC    CL120'SMF1121 - INVALID SUBTOTAL SUBPARAMETER ON SYSIN CX
               ARD - SUBPARAMETERS NOT SEPARATED BY ","                X
                             '
         DC    CL120'SMF1122 - INTERNAL ERROR - PRINT SELECTED FOR NON-X
               PRINTABLE OPTION                                        X
                             '
         DC    CL120'SMF1123 - INVALID JOBNAME SPECIFICATION ON SORT SYX
               SIN CARD - JOBNAME OFFSET/LENGTH VALUE NOT FOLLOWED BY AX
                ")"          '
         DC    CL120'SMF1124 - INVALID JOBNAME SPECIFICATION ON SORT SYX
               SIN CARD - ONLY THE OFFSET, LENGTH, AND "A" OR "D" CAN BX
               E ENTERED     '
         DC    CL120'SMF1125 - INVALID JOBNAME SPECIFICATION ON SORT SYX
               SIN CARD - IF ONLY 1 SUBPARAMETER IS ENTERED IT MUST BE X
               A "A" OR "D"  '
         DC    CL120'SMF1126 - INVALID JOBNAME SPECIFICATION ON SORT SYX
               SIN CARD - JOBNAME OFFSET VALUE IS NOT NUMERIC          X
                             '
         DC    CL120'SMF1127 - INVALID JOBNAME SPECIFICATION ON SORT SYX
               SIN CARD - JOBNAME OFFSET VALUE CANNOT EXCEED 2 DIGITS IX
               N LENGTH      '
         DC    CL120'SMF1128 - INVALID JOBNAME SPECIFICATION ON SORT SYX
               SIN CARD - JOBNAME OFFSET VALUE MUST HAVE A VALUE OF 1 TX
               O 8           '
         DC    CL120'SMF1129 - INVALID JOBNAME SPECIFICATION ON SORT SYX
               SIN CARD - JOBNAME LENGTH VALUE CANNOT EXCEED 2 DIGITS IX
               N LENGTH      '
         DC    CL120'SMF1130 - INVALID JOBNAME SPECIFICATION ON SORT SYX
               SIN CARD - JOBNAME LENGTH VALUE IS NOT NUMERIC          X
                             '
         DC    CL120'SMF1131 - INVALID JOBNAME SPECIFICATION ON SORT SYX
               SIN CARD - JOBNAME LENGTH VALUE MUST HAVE A VALUE OF 1 TX
               O 8           '
         DC    CL120'SMF1132 - INVALID JOBNAME SPECIFICATION ON SORT SYX
               SIN CARD - THE THIRD SUBPARAMETER, IF SPECIFIED, MUST BEX
                A "A" OR "D" '
         DC    CL120'SMF1133 - CPUTIMEFRACTS MUST BE SPECIFIED BEFORE CX
               PUTIME AND PRINT STATEMENTS IN THE INPUT STREAM         X
                             '
         DC    CL120'SMF1134 - INVALID CPU TIME VALUE ON SYSIN CARD - MX
               UST BE NUMBER OF HUNDREDTHS OF A SECOND (MAX. 8 DIGITS) X
                             '
         DC    CL120'SMF1135 - INVALID ZAAP CPU TIME VALUE ON SYSIN CARX
               D - MUST BE NUMERIC NUMBER OF MINUTES (MAX. 6 DIGITS)   X
                             '
         DC    CL120'SMF1136 - INVALID ZAAP CPU TIME VALUE ON SYSIN CARX
               D - MUST BE NUMBER OF HUNDREDTHS OF A SECOND (MAX. 8 DIGX
               ITS)          '
         DC    CL120'SMF1137 - INVALID ZIIP CPU TIME VALUE ON SYSIN CARX
               D - MUST BE NUMERIC NUMBER OF MINUTES (MAX. 6 DIGITS)   X
                             '
         DC    CL120'SMF1138 - INVALID ZIIP CPU TIME VALUE ON SYSIN CARX
               D - MUST BE NUMBER OF HUNDREDTHS OF A SECOND (MAX. 8 DIGX
               ITS)          '
         DC    CL120'SMF1139 - INVALID SPECIALITY ENGINE CPU TIME VALUEX
                ON SYSIN CARD - MUST BE NUMERIC NUMBER OF MINUTES (MAX.X
                6 DIGITS)    '
         DC    CL120'SMF1140 - INVALID SPECIALITY ENGINE CPU TIME VALUEX
                ON SYSIN CARD - MUST BE NBR OF HUNDREDTHS OF A SECOND (X
               MAX. 8 DIGITS)'
         EJECT
***********************************************************************
*                                                                     *
*        THIS IS A TABLE OF INPUT OPTIONS                             *
*                                                                     *
*        EACH ENTRY IS 36 BYTES LONG.  AN ENTRY WHICH BEGINS          *
*        WITH A X'FF' INDICATES END OF THE TABLE.                     *
*                                                                     *
*        EACH ENTRY HAS THE FOLLOWING FORMAT:                         *
*                                                                     *
*        1)  HALFWORD MACHINE MINIMUM LENGTH OF THE KEYWORD           *
*            WHICH FOLLOWS.  FOR EXAMPLE - A VALUE OF 2 STATES        *
*            THAT THE FIRST 3 OR MORE CHARACTERS CAN ALSO BE          *
*            CONSIDERED A MATCH PROVIDING ABBREVIATIONS FOR           *
*            SOME OF THE KEYWORDS.                                    *
*                                                                     *
*        2)  HALFWORD INDEX VALUE.  THIS INDEX IS USED IN             *
*            IN SEVERAL PLACES AS A BRANCH TABLE OFFSET FOR           *
*            QUICK ENTRY TO PROCESSING FOR THAT KEYWORD.              *
*            IT IS USED FOR INPUT OPTIONS, SORT OPTIONS,              *
*            HEADING PROCESSING, OUTPUT PROCESSING, AND               *
*            TOTALS PROCESSING.  THE OFFSET FOR A KEYWORD             *
*            IS USED CONSISTANTLY IN EACH BRANCH TABLE.               *
*                                                                     *
*        3)  A 14 CHARACTER KEYWORD.  SHORTER FORMS OF THIS           *
*            VALUE MAY ALSO BE ACCEPTABLE DEPENDING ON THE            *
*            FIRST TWO BYTES OF THIS TABLE ENTRY.                     *
*                                                                     *
*        4)  1 CHARACTER OPTION INDICATOR.  IF THIS POSITION          *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED AS         *
*            A SELECTION OPTION WITH AN ACCOMPANYING VALUE TO         *
*            BE USED FOR COMPARISONS.                                 *
*                                                                     *
*        5)  1 CHARACTER SORT INDICATOR.  IF THIS POSITION            *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED AS         *
*            A SORT SUBPARAMETER.                                     *
*                                                                     *
*        6)  1 CHARACTER PRINTABLE INDICATOR.  IF THIS POSITION       *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED TO         *
*            SELECT A FIELD FOR PRINTING.                             *
*                                                                     *
*        7)  1 CHARACTER DAY INDICATOR.  IF THIS POSITION             *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED TO         *
*            SET DAYS-OF-THE-WEEK INDICATORS.                         *
*                                                                     *
*        8)  1 CHARACTER SUBTOTAL INDICATOR.  IF THIS POSITION        *
*            CONTAINS A "Y", THEN THIS KEYWORD CAN BE USED TO         *
*            GENERATE SUBTOTALS WITHIN THE REPORT.                    *
*                                                                     *
*        8)  1 DIGIT DEFAULT OUTPUT SEQUENCE NUMBER.  IF NO           *
*            PRINT STATEMENT IS ENTERED, THEN THIS DIGIT              *
*            DETERMINES WHICH OUTPUT FIELDS WILL BE PRINTED           *
*            AND IN WHAT ORDER.  A ZERO INDICATES NOT PRINTED         *
*            BY DEFAULT.  OTHERWISE, THE NUMBER INDICATES A           *
*            SEQUENCE NUMBER FROM 1 TO 30 FOR PRINTING.               *
*                                                                     *
*        10) 12 CHARACTER SORT CONTROL STATEMENT IF THIS              *
*            KEYWORD IS USED AS A SORT SUBPARAMETER.  THIS            *
*            IS USED TO BUILD THE SORT CONTROL STATEMENT.             *
*                                                                     *
***********************************************************************
OPTKEY   CSECT
 DC  AL2(4),AL2(000),C'JOBNAME       ',C'YYYNY',AL1(01),C'001,8,CH,A, '
 DC  AL2(4),AL2(000),C'JOBNM         ',C'YYYNY',AL1(01),C'001,8,CH,A, '
 DC  AL2(4),AL2(004),C'JOBNO         ',C'YYYN ',AL1(02),C'009,8,CH,A, '
 DC  AL2(4),AL2(004),C'JOBNUMBER     ',C'YYYN ',AL1(02),C'009,8,CH,A, '
 DC  AL2(3),AL2(004),C'JOBID         ',C'YYYN ',AL1(02),C'009,8,CH,A, '
 DC  AL2(1),AL2(008),C'SJDATE        ',C'NYYN ',AL1(00),C'017,4,BI,A, '
 DC  AL2(5),AL2(008),C'STARTJDATE    ',C'NYYN ',AL1(00),C'017,4,BI,A, '
 DC  AL2(2),AL2(008),C'DATE          ',C'YYYNY',AL1(00),C'017,4,BI,A, '
 DC  AL2(3),AL2(008),C'SDATE         ',C'NYYNY',AL1(00),C'017,4,BI,A, '
 DC  AL2(7),AL2(008),C'STARTDATE     ',C'NYYNY',AL1(00),C'017,4,BI,A, '
 DC  AL2(1),AL2(012),C'TIME          ',C'YYYN ',AL1(04),C'021,4,BI,A, '
 DC  AL2(2),AL2(012),C'STIME         ',C'YYYN ',AL1(04),C'021,4,BI,A, '
 DC  AL2(5),AL2(012),C'STARTTIME     ',C'YYYN ',AL1(04),C'021,4,BI,A, '
 DC  AL2(1),AL2(016),C'SYSTEM        ',C'YYYNY',AL1(05),C'033,4,CH,A, '
 DC  AL2(1),AL2(016),C'SYSID         ',C'YYYNY',AL1(05),C'033,4,CH,A, '
 DC  AL2(3),AL2(020),C'PROCSTEP      ',C'YYYN ',AL1(06),C'037,8,CH,A, '
 DC  AL2(1),AL2(020),C'PSTEP         ',C'YYYN ',AL1(06),C'037,8,CH,A, '
 DC  AL2(3),AL2(024),C'JOBSTEP       ',C'YYYN ',AL1(07),C'045,8,CH,A, '
 DC  AL2(1),AL2(024),C'JSTEP         ',C'YYYN ',AL1(07),C'045,8,CH,A, '
 DC  AL2(3),AL2(028),C'PROGRAM       ',C'YYYNY',AL1(08),C'053,8,CH,A, '
 DC  AL2(1),AL2(028),C'PGM           ',C'YYYNY',AL1(08),C'053,8,CH,A, '
 DC  AL2(0),AL2(032),C'USERID        ',C'YYYNY',AL1(09),C'061,8,CH,A, '
 DC  AL2(0),AL2(032),C'UID           ',C'YYYNY',AL1(09),C'061,8,CH,A, '
 DC  AL2(1),AL2(036),C'CCODE         ',C'YYYN ',AL1(10),C'073,5,CH,A, '
 DC  AL2(1),AL2(040),C'ELAPTIME      ',C'YYYN ',AL1(11),C'089,4,BI,A, '
 DC  AL2(1),AL2(040),C'ELAPSED       ',C'YYYN ',AL1(11),C'089,4,BI,A, '
 DC  AL2(1),AL2(040),C'ELTIME        ',C'YYYN ',AL1(11),C'089,4,BI,A, '
 DC  AL2(3),AL2(044),C'EXCPS         ',C'YYYN ',AL1(13),C'093,4,BI,A, '
 DC  AL2(0),AL2(044),C'BLOCKCOUNT    ',C'YYYN ',AL1(13),C'093,4,BI,A, '
 DC  AL2(0),AL2(044),C'BLOCKCNT      ',C'YYYN ',AL1(13),C'093,4,BI,A, '
 DC  AL2(0),AL2(044),C'BLOCKS        ',C'YYYN ',AL1(13),C'093,4,BI,A, '
 DC  AL2(3),AL2(048),C'CPUTIME       ',C'YYYN ',AL1(12),C'097,4,BI,A, '
 DC  AL2(3),AL2(048),C'CPUTM         ',C'YYYN ',AL1(12),C'097,4,BI,A, '
 DC  AL2(1),AL2(048),C'CT            ',C'YYYN ',AL1(12),C'097,4,BI,A, '
 DC  AL2(6),AL2(052),C'REGIONBELOW   ',C'YYYN ',AL1(00),C'101,4,BI,A, '
 DC  AL2(3),AL2(052),C'RGNBELOW      ',C'YYYN ',AL1(00),C'101,4,BI,A, '
 DC  AL2(6),AL2(056),C'REGIONABOVE   ',C'YYYN ',AL1(00),C'105,4,BI,A, '
 DC  AL2(3),AL2(056),C'RGNABOVE      ',C'YYYN ',AL1(00),C'105,4,BI,A, '
 DC  AL2(2),AL2(060),C'MOUNTS        ',C'YYYN ',AL1(00),C'117,4,BI,A, '
 DC  AL2(1),AL2(060),C'TAPEMOUNTS    ',C'YYYN ',AL1(00),C'117,4,BI,A, '
 DC  AL2(3),AL2(060),C'TOTTAPES      ',C'YYYN ',AL1(00),C'117,4,BI,A, '
 DC  AL2(1),AL2(060),C'TAPES         ',C'YYYN ',AL1(00),C'117,4,BI,A, '
 DC  AL2(3),AL2(064),C'CPUPCT        ',C'YYYN ',AL1(14),C'121,4,BI,A, '
 DC  AL2(3),AL2(064),C'CPUPERCENT    ',C'YYYN ',AL1(14),C'121,4,BI,A, '
 DC  AL2(3),AL2(064),C'CPU%          ',C'YYYN ',AL1(14),C'121,4,BI,A, '
 DC  AL2(3),AL2(068),C'JOBTYPE       ',C'YYYN ',AL1(15),C'088,1,CH,A, '
 DC  AL2(1),AL2(068),C'TYPE          ',C'YYYN ',AL1(15),C'088,1,CH,A, '
 DC  AL2(1),AL2(068),C'JTYPE         ',C'YYYN ',AL1(15),C'088,1,CH,A, '
 DC  AL2(3),AL2(072),C'NOFLUSH       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(076),C'NOABEND       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(080),C'NOTEST        ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(084),C'NOPRODUCTION  ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(088),C'NOSTC         ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(088),C'NOSTARTED     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(092),C'NOTSU         ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(092),C'NOTSO         ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(092),C'NOUSERS       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(096),C'STOPAFTER     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(096),C'STOPCOUNT     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(096),C'STOPCNT       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(100),C'SORT          ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(104),C'PRINT         ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(108),C'PERMTAPES     ',C'YYYN ',AL1(00),C'109,4,BI,A, '
 DC  AL2(2),AL2(108),C'NONSCRATCHTP  ',C'YYYN ',AL1(00),C'109,4,BI,A, '
 DC  AL2(2),AL2(108),C'NONSCRTAPES   ',C'YYYN ',AL1(00),C'109,4,BI,A, '
 DC  AL2(1),AL2(112),C'SCRATCHTAPES  ',C'YYYN ',AL1(00),C'113,4,BI,A, '
 DC  AL2(1),AL2(112),C'SCRATCHTPS    ',C'YYYN ',AL1(00),C'113,4,BI,A, '
 DC  AL2(1),AL2(112),C'SCRTAPES      ',C'YYYN ',AL1(00),C'113,4,BI,A, '
 DC  AL2(3),AL2(116),C'EXPPAGING     ',C'YYYN ',AL1(00),C'125,4,BI,A, '
 DC  AL2(3),AL2(116),C'EXPANDED      ',C'YYYN ',AL1(00),C'125,4,BI,A, '
 DC  AL2(1),AL2(120),C'AUXPAGING     ',C'YYYN ',AL1(00),C'129,4,BI,A, '
 DC  AL2(1),AL2(120),C'AUXILLARY     ',C'YYYN ',AL1(00),C'129,4,BI,A, '
 DC  AL2(1),AL2(124),C'SERVICEUNITS  ',C'YYYN ',AL1(00),C'133,4,BI,A, '
 DC  AL2(1),AL2(124),C'TSERVICEUNITS ',C'YYYN ',AL1(00),C'133,4,BI,A, '
 DC  AL2(1),AL2(124),C'SERVUNITS     ',C'YYYN ',AL1(00),C'133,4,BI,A, '
 DC  AL2(1),AL2(124),C'TSERVUNITS    ',C'YYYN ',AL1(00),C'133,4,BI,A, '
 DC  AL2(2),AL2(124),C'SUS           ',C'YYYN ',AL1(00),C'133,4,BI,A, '
 DC  AL2(2),AL2(124),C'TSUS          ',C'YYYN ',AL1(00),C'133,4,BI,A, '
 DC  AL2(3),AL2(128),C'TOTALS        ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(132),C'AVERAGES      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(132),C'AVGS          ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(136),C'NODETAIL      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(136),C'NOREPORT      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(0),AL2(140),C'VIOPAGING     ',C'YYYN ',AL1(00),C'137,4,BI,A, '
 DC  AL2(6),AL2(144),C'EXJOBNAME     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(144),C'XJOBNAME      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(6),AL2(144),C'EXJOBNM       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(144),C'XJOBNM        ',C'YNNN ',AL1(00),C'            '
 DC  AL2(6),AL2(148),C'EXJOBNO       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(148),C'XJOBNO        ',C'YNNN ',AL1(00),C'            '
 DC  AL2(6),AL2(148),C'EXJOBNUMBER   ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(148),C'XJOBNUMBER    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(148),C'EXJOBID       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(4),AL2(148),C'XJOBID        ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(152),C'EXSYSTEM      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(152),C'XSYSTEM       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(152),C'EXSYSID       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(152),C'XSYSID        ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(156),C'EXPROCSTEP    ',C'YNNN ',AL1(00),C'            '
 DC  AL2(4),AL2(156),C'XPROCSTEP     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(156),C'EXPSTEP       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(156),C'XPSTEP        ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(160),C'EXJOBSTEP     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(4),AL2(160),C'XJOBSTEP      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(160),C'EXJSTEP       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(160),C'XJSTEP        ',C'YNNN ',AL1(00),C'            '
 DC  AL2(5),AL2(164),C'EXPROGRAM     ',C'YNNN ',AL1(00),C'            '
 DC  AL2(4),AL2(164),C'XPROGRAM      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(164),C'EXPGM         ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(164),C'XPGM          ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(168),C'EXUSERID      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(168),C'XUSERID       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(168),C'EXUID         ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(168),C'XUID          ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(172),C'EXCCODE       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(172),C'XCCODE        ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(176),C'SUNDAY        ',C'NNNY ',AL1(00),C'            '
 DC  AL2(3),AL2(180),C'NOSUNDAY      ',C'NNNY ',AL1(00),C'            '
 DC  AL2(2),AL2(184),C'MONDAY        ',C'NNNY ',AL1(00),C'            '
 DC  AL2(2),AL2(188),C'NOMONDAY      ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(192),C'TUESDAY       ',C'NNNY ',AL1(00),C'            '
 DC  AL2(3),AL2(196),C'NOTUESDAY     ',C'NNNY ',AL1(00),C'            '
 DC  AL2(2),AL2(200),C'WEDNESDAY     ',C'NNNY ',AL1(00),C'            '
 DC  AL2(4),AL2(204),C'NOWEDNESDAY   ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(208),C'THURSDAY      ',C'NNNY ',AL1(00),C'            '
 DC  AL2(3),AL2(212),C'NOTHURSDAY    ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(216),C'FRIDAY        ',C'NNNY ',AL1(00),C'            '
 DC  AL2(3),AL2(220),C'NOFRIDAY      ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(224),C'SATURDAY      ',C'NNNY ',AL1(00),C'            '
 DC  AL2(3),AL2(228),C'NOSATURDAY    ',C'NNNY ',AL1(00),C'            '
 DC  AL2(4),AL2(232),C'WEEKEND       ',C'NNNY ',AL1(00),C'            '
 DC  AL2(6),AL2(236),C'NOWEEKEND     ',C'NNNY ',AL1(00),C'            '
 DC  AL2(4),AL2(240),C'WEEKDAY       ',C'NNNY ',AL1(00),C'            '
 DC  AL2(6),AL2(244),C'NOWEEKDAY     ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(248),C'EVERYDAY      ',C'NNNY ',AL1(00),C'            '
 DC  AL2(1),AL2(248),C'ALLDAYS       ',C'NNNY ',AL1(00),C'            '
 DC  AL2(2),AL2(252),C'DAYOFTHEWEEK  ',C'YYYNY',AL1(00),C'069,2,BI,A, '
 DC  AL2(3),AL2(252),C'SDAYOFWEEK    ',C'YYYNY',AL1(00),C'069,2,BI,A, '
 DC  AL2(7),AL2(252),C'STARTDAY      ',C'YYYNY',AL1(00),C'069,2,BI,A, '
 DC  AL2(3),AL2(256),C'JOBLEVEL      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(260),C'INTERVAL      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(264),C'EDATE         ',C'NYYNY',AL1(00),C'025,4,BI,A, '
 DC  AL2(5),AL2(264),C'ENDDATE       ',C'NYYNY',AL1(00),C'025,4,BI,A, '
 DC  AL2(1),AL2(264),C'EJDATE        ',C'NYYN ',AL1(00),C'025,4,BI,A, '
 DC  AL2(3),AL2(264),C'ENDJDATE      ',C'NYYN ',AL1(00),C'025,4,BI,A, '
 DC  AL2(2),AL2(268),C'ETIME         ',C'YYYN ',AL1(00),C'029,4,BI,A, '
 DC  AL2(3),AL2(268),C'ENDTIME       ',C'YYYN ',AL1(00),C'029,4,BI,A, '
 DC  AL2(5),AL2(272),C'ENDDAY        ',C'YYYNY',AL1(00),C'071,2,BI,A, '
 DC  AL2(3),AL2(272),C'EDAYOFWEEK    ',C'YYYNY',AL1(00),C'071,2,BI,A, '
 DC  AL2(1),AL2(276),C'GDATE         ',C'NYYN ',AL1(03),C'017,4,BI,A, '
 DC  AL2(1),AL2(276),C'SGDATE        ',C'NYYN ',AL1(03),C'017,4,BI,A, '
 DC  AL2(5),AL2(276),C'STARTGDATE    ',C'NYYN ',AL1(03),C'017,4,BI,A, '
 DC  AL2(1),AL2(280),C'EGDATE        ',C'NYYN ',AL1(00),C'025,4,BI,A, '
 DC  AL2(3),AL2(280),C'ENDGDATE      ',C'NYYN ',AL1(00),C'025,4,BI,A, '
 DC  AL2(4),AL2(284),C'TIMEINCLUSIVE ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(288),C'IRANGE        ',C'YNNN ',AL1(00),C'            '
 DC  AL2(1),AL2(292),C'CSERVICEUNITS ',C'YYYN ',AL1(00),C'141,4,BI,A, '
 DC  AL2(1),AL2(292),C'CSERVUNITS    ',C'YYYN ',AL1(00),C'141,4,BI,A, '
 DC  AL2(2),AL2(292),C'CSUS          ',C'YYYN ',AL1(00),C'141,4,BI,A, '
 DC  AL2(1),AL2(296),C'ISERVICEUNITS ',C'YYYN ',AL1(00),C'145,4,BI,A, '
 DC  AL2(1),AL2(296),C'ISERVUNITS    ',C'YYYN ',AL1(00),C'145,4,BI,A, '
 DC  AL2(2),AL2(296),C'ISUS          ',C'YYYN ',AL1(00),C'145,4,BI,A, '
 DC  AL2(1),AL2(300),C'MSERVICEUNITS ',C'YYYN ',AL1(00),C'149,4,BI,A, '
 DC  AL2(1),AL2(300),C'MSERVUNITS    ',C'YYYN ',AL1(00),C'149,4,BI,A, '
 DC  AL2(2),AL2(300),C'MSUS          ',C'YYYN ',AL1(00),C'149,4,BI,A, '
 DC  AL2(1),AL2(304),C'SSERVICEUNITS ',C'YYYN ',AL1(00),C'153,4,BI,A, '
 DC  AL2(1),AL2(304),C'SSERVUNITS    ',C'YYYN ',AL1(00),C'153,4,BI,A, '
 DC  AL2(2),AL2(304),C'SSUS          ',C'YYYN ',AL1(00),C'153,4,BI,A, '
 DC  AL2(2),AL2(308),C'SUBTOTAL      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(0),AL2(312),C'HOUR          ',C'NNNNY',AL1(00),C'            '
 DC  AL2(1),AL2(312),C'SHOUR         ',C'NNNNY',AL1(00),C'            '
 DC  AL2(1),AL2(316),C'EHOUR         ',C'NNNNY',AL1(00),C'            '
 DC  AL2(2),AL2(320),C'NOJOB         ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(320),C'NOBATCH       ',C'YNNN ',AL1(00),C'            '
 DC  AL2(7),AL2(324),C'CPUTIMEFRACTS ',C'YNNN ',AL1(00),C'            '
 DC  AL2(2),AL2(324),C'CTFRACTS      ',C'YNNN ',AL1(00),C'            '
 DC  AL2(3),AL2(328),C'ZAAPCPUTIME   ',C'YYYN ',AL1(00),C'157,4,BI,A, '
 DC  AL2(3),AL2(328),C'ZAAPTIME      ',C'YYYN ',AL1(00),C'157,4,BI,A, '
 DC  AL2(3),AL2(332),C'ZIIPCPUTIME   ',C'YYYN ',AL1(00),C'161,4,BI,A, '
 DC  AL2(3),AL2(332),C'ZIIPTIME      ',C'YYYN ',AL1(00),C'161,4,BI,A, '
 DC  AL2(3),AL2(336),C'SPECCPUTIME   ',C'YYYN ',AL1(00),C'165,4,BI,A, '
 DC  AL2(3),AL2(336),C'SPECTIME      ',C'YYYN ',AL1(00),C'165,4,BI,A, '
 DC  36X'FF'
         EJECT
***********************************************************************
*                                                                     *
*        THIS IS A TABLE OF PRINT OPTIONS                             *
*                                                                     *
*        EACH ENTRY IS 6 BYTES LONG.  AN ENTRY WHICH BEGINS           *
*        WITH A X'FF' INDICATES END OF THE TABLE.                     *
*                                                                     *
*        EACH ENTRY HAS THE FOLLOWING FORMAT:                         *
*                                                                     *
*        1)  1 BYTE PRINT INDICATOR.  A "Y" INDICATES THAT            *
*            PRINTING IS DESIRED.  ANY OTHER VALUE INDICATES          *
*            NO PRINTING.                                             *
*                                                                     *
*        2)  1 BYTE FILLER                                            *
*                                                                     *
*        3)  A HALFWORD INDEX FROM THE START OF THE DETAIL LINE       *
*            TO PLACE THE OUTPUT VALUE.                               *
*                                                                     *
*        4)  A HALFWORD BRANCH TABLE OFFSET FROM LABEL "PRSETUP2"     *
*            TO PERFORM OUTPUT FIELD PRINT PROCESSING.                *
*                                                                     *
***********************************************************************
PRTOPT   CSECT
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    CL1'N',CL1' ',AL2(0),AL2(0)
         DC    6X'FF'
         EJECT
         DROP  R9,R10,R11,R12
***********************************************************************
*                                                                     *
*                              CELAP                                  *
*                                                                     *
*        CALCULATE ELAPSED TIME                                       *
*                                                                     *
*        INPUT:                                                       *
*               CINSDT   - START DATE OF INTERVAL                     *
*               CINSTM   - START TIME OF INTERVAL                     *
*               CINEDT   - END   DATE OF INTERVAL                     *
*               CINETM   - END   TIME OF INTERVAL                     *
*                                                                     *
*        OUTPUT:                                                      *
*               COUTEL   - CALCULATED ELAPSED TIME                    *
*                                                                     *
*        THE DATES ARE IN 4 BYTE PACKED FORMAT YYYYDDDS               *
*                                                                     *
*        THE TIMES ARE IN 4 BYPE BINARY FORMAT IN HUNDRETHS           *
*        OF A SECOND                                                  *
*                                                                     *
***********************************************************************
CELAP    CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING CELAP,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE10          LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         SLR   R1,R1               ZERO ELAPSED TIME ACCUMULATOR
         CLC   CINSDT,CINEDT       SEE IF START AND END SAME DATE
         BE    CELAP6              YES, BRANCH
         CLC   CINSDT(2),CINEDT    SEE IF SAME YEAR
         BE    CELAP3              YES, BRANCH
***********************************************************************
*        WE WILL ASSUME THAT THE THE DATES ARE ONLY ONE (1) YEAR      *
*        APART                                                        *
***********************************************************************
         LA    R1,365              SET TO 365 DAYS
         TM    CINSDT+1,X'01'      SEE IF ODD START YEAR
         BO    CELAP3              YES, NOT LEAP YEAR
         TM    CINSDT+1,X'10'      SEE IF ODD START DECADE YEAR
         BO    CELAP1              YES, BRANCH
         TM    CINSDT+1,X'02'      SEE IF LOW DIGIT 2 OR 6
         BO    CELAP3              YES, NOT LEAP YEAR
         B     CELAP2              GO PROCESS LEAP YEAR
CELAP1   TM    CINSDT+1,X'02'      SEE IF LOW DIGIT 2 OR 6
         BNO   CELAP3              NO, NOT LEAP YEAR
CELAP2   LA    R1,366              SET TO 366 DAYS
***********************************************************************
*        GET END DAY                                                  *
***********************************************************************
CELAP3   SLR   R15,R15             CLEAR REGISTER FOR ICM
         ICM   R15,3,CINEDT+2      LOAD DAY PORTION OF STOP DATE
         ZAP   DOUBLE,=P'0'        ZERO DOUBLE WORK WORK AREA
         STCM  R15,15,DOUBLE+4     SAVE DAY IN DOUBLE WORD
         CVB   R2,DOUBLE           CONVERT DAY TO BINARY
         AR    R1,R2               ADD IT TO ACCUMULATOR
***********************************************************************
*        GET START DAY                                                *
***********************************************************************
         ICM   R15,3,CINSDT+2      LOAD DAY PORTION OF START DATE
         ZAP   DOUBLE,=P'0'        ZERO DOUBLE WORK WORK AREA
         STCM  R15,15,DOUBLE+4     SAVE DAY IN DOUBLE WORD
         CVB   R2,DOUBLE           CONVERT DAY TO BINARY
         SR    R1,R2               SUBTRACT IT FROM ACCUMULATOR
         LTR   R1,R1               SEE IF NEGATIVE
         BM    CELAP4              NEGATIVE, MAKE MAX
         CH    R1,=H'30'           SEE IF MORE THAN 30 DAYS
         BNH   CELAP5              NO, BRANCH
CELAP4   LA    R1,30               SET TO 30
CELAP5   M     R0,=A(24*60*60*100) MULTIPLY BY HUNDRETHS OF SEC PER DAY
***********************************************************************
*        REG 1 NOW HAS NUMBER OF DAYS TIMES HUNDRETHS OF SECS PER DAY *
***********************************************************************
CELAP6   ICM   R15,15,CINETM      LOAD END TIME
         AR    R1,R15             ADD END TIME TO ACCUMULATOR
         ICM   R15,15,CINSTM      LOAD START TIME
         SR    R1,R15             SUBTRACT START TIME FROM ACCUMULATOR
***********************************************************************
*        REG 1 NOW HAS ELAPSED TIME IN HUNDRETHS OF SECONDS           *
***********************************************************************
         ST    R1,COUTEL           SAVE ELAPSED TIME
***********************************************************************
*        RETURN TO CALLER                                             *
***********************************************************************
CELAP7   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LA    R15,0               SET RETURN CODE TO ZERO
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO CALLER
         SPACE 3
SAVE10   DS    18F                 ROUTINE SAVE AREA
         LTORG
         EJECT
         DROP  R9,R10,R11,R12
***********************************************************************
*                                                                     *
*        THIS ROUTINE WILL READ THE SMF INPUT FILE UNTIL A PROPER     *
*        SMF RECORD IS FOUND.                                         *
*                                                                     *
*        ON ENTRY THE REGISTERS WILL BE AS FOLLOWS:                   *
*                                                                     *
*        1)  REGISTER 14 ON ENTRY WILL CONTAIN THE ENTRY POINT        *
*        2)  REGISTER 15 ON ENTRY WILL CONTAIN THE RETURN ADDRESS     *
*                                                                     *
*        RECORDS WILL BE FILTERED OUT IF SELECTION CRITERIA WAS       *
*        SPECIFIED ON AN INPUT CONTROL CARD.                          *
*                                                                     *
*        THE SMF TYPE 30 RECORD WILL BE REFORMATTED INTO A 100        *
*        CHARACTER FIXED LENGTH RECORD AT LABEL INREC.                *
*                                                                     *
*        ON EOF, THE ENDFILE INDICATOR WILL BE TURNED ON              *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
READRTN  CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING READRTN,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE1           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         B     READREC             GO READ SMF RECORD
SAVE1    DS    18F                 ROUTINE SAVE AREA
         LTORG
***********************************************************************
*                                                                     *
*        READ AN SMF TYPE 30 SUBTYPE 4 RECORD FOR STANDARD            *
*        PROCESSING.                                                  *
*                                                                     *
*        READ AN SMF TYPE 30 SUBTYPE 5 RECORD FOR JOBLEVEL            *
*        PROCESSING.                                                  *
*                                                                     *
*        READ AN SMF TYPE 30 SUBTYPE 2 OR 3 RECORD FOR INTERVAL       *
*        PROCESSING.                                                  *
*                                                                     *
*        REFORMAT EACH RECORD TYPE INTO A MORE USABLE RECORD          *
*        FORMAT.                                                      *
*                                                                     *
***********************************************************************
READREC  GET   SMFIN               READ SMF INPUT
         LR    R5,R1               SAVE INPUT RECORD ADDRESS
         USING SMFRCD30,R5         SET ADDRESSABILITY TO SMF RECORD
         CLI   SMF30DTE,X'19'      SEE IF CORRECT CENTURY
         BE    READREC1            YES, OK
         CLI   SMF30DTE,X'20'      SEE IF CORRECT CENTURY
         BE    READREC1            YES, OK
         SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,SMF30DTE        LOAD '0C' CENTURY INDICATOR
         MVI   SMF30DTE,X'19'      ASSUME 20TH CENTURY
         LTR   R15,R15             TEST '0C' CENTRY INDICATOR
         BZ    READREC1            ZERO, 19..
         MVI   SMF30DTE,X'20'      NOT ZERO, MAKE 21ST CENTURY
READREC1 CLC   SMF30DTE,LOWDATE    SEE IF NEW LOW DATE
         BNL   READREC2            NO, BRANCH
         MVC   LOWDATE,SMF30DTE    SAVE NEW LOW DATE
         MVC   LOWTIME,SMF30TME    SAVE NEW LOW TIME
         B     READREC3            GO SEE IF ALSO NEW HIGH DATE/TIME
READREC2 CLC   SMF30DTE,LOWDATE    SEE IF SAME LOW DATE
         BH    READREC3            NO, NOT NEW LOW DATE/TIME
         CLC   SMF30TME,LOWTIME    SEE IF NEW LOW TIME
         BNL   READREC3            NO, BRANCH
         MVC   LOWTIME,SMF30TME    SAVE NEW LOW TIME
READREC3 CLC   SMF30DTE,HIGHDATE   SEE IF NEW HIGH DATE
         BNH   READREC4            NO, BRANCH
         MVC   HIGHDATE,SMF30DTE   SAVE NEW HIGH DATE
         MVC   HIGHTIME,SMF30TME   SAVE NEW HIGH TIME
         B     READREC5            GET OUT
READREC4 CLC   SMF30DTE,HIGHDATE   SEE IF SAME HIGH DATE
         BL    READREC5            NO, NOT NEW HIGH DATE/TIME
         CLC   SMF30TME,HIGHTIME   SEE IF NEW HIGH TIME
         BNH   READREC5            NO, BRANCH
         MVC   HIGHTIME,SMF30TME   SAVE NEW HIGH TIME
READREC5 CLI   SMF30RTY,30         SEE IF TYPE 30 SMF RECORD
         BNE   READREC             NO, BYPASS RECORD
         TM    SWITCH+6,SELJOBL    SEE IF WANT JOBLEVEL RECORDS
         BO    READREC6            YES, GO SEE IF SUBTYPE 5 RECORD
         TM    SWITCH+6,SELINT     SEE IF WANT INTERVAL RECORDS
         BO    READREC7            YES, GO SEE IF SUBTYPE 2 OR 3 RECORD
         B     READREC8            NO, GO SEE IF SUBTYPE 4 RECORD
READREC6 CLI   SMF30STP+1,5        SEE IF SUBTYPE 5 RECORD
         BE    READREC9            YES, GO PROCESS RECORD
         B     READREC             NO, BYPASS RECORD
READREC7 CLI   SMF30STP+1,2        SEE IF SUBTYPE 2 RECORD
         BE    READREC9            YES, GO PROCESS RECORD
         CLI   SMF30STP+1,3        SEE IF SUBTYPE 3 RECORD
         BE    READREC9            YES, GO PROCESS RECORD
         B     READREC             NO, BYPASS RECORD
READREC8 CLI   SMF30STP+1,4        SEE IF SUBTYPE 4 RECORD
         BE    READREC9            YES, GO PROCESS RECORD
         B     READREC             NO, BYPASS RECORD
READREC9 ICM   R15,B'0011',SMF30ION LOAD NUMBER OF ID SECTIONS
         BZ    READREC             ZERO, BAD RECORD, BYPASS
         ICM   R15,B'0011',SMF30CON LOAD NUMBER OF PROCESSOR SECTIONS
         BZ    READREC             ZERO, CONTINUATION RECORD, BYPASS
         L     R6,SMF30IOF         LOAD OFFSET TO ID SECTION
         AR    R6,R5               GET ADDRESS OF ID SECTION
         USING SMF30ID,R6          SET ADDRESSABILITY TO ID SECTION
         MVC   INJBN,SMF30JBN      SAVE JOB NAME
         MVC   INJNM,SMF30JNM      SAVE JOB IDENTIFIER
         CLI   SMF30STD,X'19'      SEE IF CORRECT CENTURY
         BE    READRECA            YES, OK
         CLI   SMF30STD,X'20'      SEE IF CORRECT CENTURY
         BE    READRECA            YES, OK
         SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,SMF30STD        LOAD '0C' CENTURY INDICATOR
         MVI   SMF30STD,X'19'      ASSUME 20TH CENTURY
         LTR   R15,R15             TEST '0C' CENTRY INDICATOR
         BZ    READRECA            ZERO, 19..
         MVI   SMF30STD,X'20'      NOT ZERO, 21ST CENTURY
READRECA MVC   INSJDATE,SMF30STD   SAVE START JULIAN DATE
         CALL  DATERTN,(JG,INSJDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   INSGDATE,DATEGREG   SAVE START GREGORIAN DATE
         MVC   INSTIME,SMF30SIT    SAVE START TIME
         MVC   INEJDATE,SMF30DTE   SAVE END DATE
         CALL  DATERTN,(JG,INEJDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   INEGDATE,DATEGREG   SAVE END GREGORIAN DATE
         MVC   INETIME,SMF30TME    SAVE END TIME
         MVC   INSID,SMF30SID      SAVE SYSTEM IDENTIFICATION
         MVC   INPSN,SMF30PSN      SAVE PROC STEP NAME
         MVC   INSTM,SMF30STM      SAVE STEP NAME
         MVC   INPGM,SMF30PGM      SAVE PROGRAM NAME
         MVC   INRUD,SMF30RUD      SAVE SECURITY USERID
         DROP  R6                  DROP ADDRESSABILITY TO ID SECTION
         TM    SWITCH+6,SELINT     SEE IF WANT INTERVAL RECORDS
         BNO   READRECC            NO, BRANCH
         L     R6,SMF30COF         LOAD OFFSET TO PROC SECTION
         AR    R6,R5               GET ADDRESS OF PROC SECTION
         USING SMF30CAS,R6         SET ADDRESSABILITY TO PROC SECTION
         CLI   SMF30IDT,X'19'      SEE IF CORRECT CENTURY
         BE    READRECB            YES, OK
         CLI   SMF30IDT,X'20'      SEE IF CORRECT CENTURY
         BE    READRECB            YES, OK
         SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,SMF30IDT        LOAD '0C' CENTURY INDICATOR
         MVI   SMF30IDT,X'19'      ASSUME 20TH CENTURY
         LTR   R15,R15             TEST '0C' CENTRY INDICATOR
         BZ    READRECB            ZERO, 19..
         MVI   SMF30IDT,X'20'      NOT ZERO, 21ST CENTURY
READRECB MVC   INSJDATE,SMF30IDT   SAVE INTERVAL START DATE
         CALL  DATERTN,(JG,INSJDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   INSGDATE,DATEGREG   SAVE START GREGORIAN DATE
         MVC   INSTIME,SMF30IST    SAVE INTERVAL START TIME
         DROP  R6                  DROP ADDRESSABILITY TO PROC SECTION
READRECC MVC   PJDATE,INSJDATE     SAVE START DATE
         BAL   R14,WKDAY           GO GET DAY-OF-WEEK
         MVC   INSDAY,DAYOFWK      SAVE START DAY-OF-WEEK
         MVC   PJDATE,INEJDATE     SAVE END DATE
         BAL   R14,WKDAY           GO GET DAY-OF-WEEK
         MVC   INEDAY,DAYOFWK      SAVE END DAY-OF-WEEK
***********************************************************************
*                                                                     *
*        FORMAT A STEP COMPLETION CODE IN ONE OF THE FOLLOWING        *
*        FORMATS:                                                     *
*                                                                     *
*        CCCC   - STEP CONDITION CODE                                 *
*        SXXX   - SYSTEM ABEND CODE                                   *
*        UNNNN  - USER ABEND CODE                                     *
*        FLUSH  - STEP FLUSHED                                        *
*                                                                     *
*                                                                     *
*                          SPECIAL NOTE 1                             *
*                                                                     *
*        NOTE THAT THE SMF RECORD CAN POTENTIALLY HAVE MORE THAN      *
*        ONE COMPLETION SECTION.  I HAVE NOT PERSONALLY SEEN          *
*        AN INSTANCE WHERE IT ACTUALLY DOES.  THIS ROUTINE WILL       *
*        ASSUME THAT THERE CAN BE MULTIPLE SECTIONS SINCE THAT        *
*        SITUATION MAY EXIST IN THE FUTURE.  WITH THAT IN MIND        *
*        THIS ROUTINE WILL LOOP THROUGH ALL SECTIONS AND KEEP         *
*        THE HIGHEST RETURN CODE THAT IS FOUND.  SINCE THE            *
*        RETURN CODE CAN BE NUMERIC (NNNN), SYSTEM ABEND (SNNN),      *
*        USER ABEND (UNNNN), OR 'FLUSH' DETERMINING WHAT RETURN       *
*        CODE IS HIGHER THAN ANOTHER IS NOT AS EASY AS IT SOUNDS.     *
*        I MADE MY OWN CALL ON THAT.                                  *
*                                                                     *
*        I HAVE DETERMINED THAT ON A SCALE OF 1 TO 4 WHERE 4 IS       *
*        THE HIGHEST THE FOLLOWING LIST APPLIES:                      *
*                                                                     *
*        LEVEL 4 - SYSTEM ABENDS                                      *
*        LEVEL 3 - USER ABENDS                                        *
*        LEVEL 2 - NUMERIC RETURN CODES                               *
*        LEVEL 1 - 'FLUSH'                                            *
*                                                                     *
*        WITH THIS SCALE, ALL SYSTEM ABENDS ARE CONSIDERED A          *
*        HIGHER RETURN CODE THAN ANY USER ABEND, ETC.                 *
*                                                                     *
*        WITHIN EACH LEVEL, THE HIGHEST RETURN CODE IS STRICTLY       *
*        BASED ON LOWEST TO HIGHEST CHARACTER COMPARE.                *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                          SPECIAL NOTE 2                             *
*                                                                     *
*        IT WAS ORIGINALLY THOUGHT THAT THE SUBTYPE 5 (JOB            *
*        TERMINATION RECORD) THAT IS USED FOR JOBLEVEL                *
*        REPORTING WOULD HAVE MULTIPLE COMPLETION SECTIONS.           *
*        THAT IS CURRENTLY NOT TRUE (Z/OS 1.9).  NEITHER              *
*        DOES IT PLACE THE HIGHEST RETURN CODE IN THE SINGLE          *
*        SECTION THAT IS CREATED FOR THE RECORD.  IT IS               *
*        ACTUALLY MUCH MORE COMPLICATED THAN THAT.  THE               *
*        RULES ON JOBLEVEL CONDITION CODES ARE AS FOLLOWS             *
*        (I THINK):                                                   *
*                                                                     *
*        1.  THE RETURN CODE ON THE JOBLEVEL RECORD USUALLY           *
*            SHOWS THE RETURN CODE FROM THE LAST STEP THAT            *
*            WAS EXECUTED.                                            *
*                                                                     *
*        2.  IF THE JOB ENDS WHERE THE LAST STEP DID NOT              *
*            ABEND BUT AN ABEND OCCURRED IN THE JOB PRIOR             *
*            TO THE LAST STEP THEN A RETURN CODE OF S000              *
*            WILL BE SHOWN.  THIS IS TRUE EVEN IF THE ABEND           *
*            WAS A USER ABEND INSTEAD OF A SYSTEM ABEND.              *
*                                                                     *
*                                                                     *
*        3.  IF THE LAST STEP EXECUTED WAS EITHER BYPASSED            *
*            DUE TO CONDITION CODES (FLUSH) OR FAILED WITH            *
*            A JCL ERROR THEN THE RETURN CODE WILL BE EITHER          *
*            0000 OR S000 DEPENDING ON WHETHER OR NOT A               *
*            PRIOR STEP HAD ABENDED.                                  *
*                                                                     *
*        THE BOTTOM LINE IS THIS.  THE RETURN CODE ON THE             *
*        JOBLEVEL REPORT HAS RELATIVELY LITTLE VALUE AS/OF            *
*        Z/OS 1.9.                                                    *
*                                                                     *
*                                                                     *
***********************************************************************
CCODE    MVC   HIGHCC,BLANKS       SET COMPLETION CODE TO BLANKS
         TM    SWITCH+6,SELINT     SEE IF WANT INTERVAL RECORDS
         BO    CCODEND             YES, NO COMPLETION SECTION
         SLR   R2,R2               CLEAR REG FOR ICM
         ICM   R2,B'0011',SMF30TON LOAD NUMBER OF COMPL SECTIONS
         BZ    READREC             ZERO, BAD RECORD, BYPASS
         L     R6,SMF30TOF         LOAD OFFSET TO COMPL SECTION
         AR    R6,R5               GET ADDRESS OF COMPL SECTION
         USING SMF30CMP,R6         SET ADDRESSABILITY TO COMPL SECTION
CCODE1   MVC   WKCCV,=CL5'FLUSH'   ASSUME STEP FLUSHED
         MVI   WKCCT,C'4'          SET COMPLETION TYPE TO 4
         TM    SMF30STI,X'01'      SEE IF STEP WAS FLUSHED
         BO    CCODE4              YES, DONE WITH THIS SECTION
         MVC   WKCCV,BLANKS        BLANK THE STEP CONDITION CODE
         TM    SMF30STI,X'02'      SEE IF STEP ABENDED
         BO    CCODE2              YES, BRANCH
         LH    R15,SMF30SCC        LOAD STEP COMPLETION CODE
         CVD   R15,DOUBLE          CONVERT CONDITION CODE TO PACKED
         MVC   WORK(6),=X'F02020202120' SET EDIT MASK
         ED    WORK(6),DOUBLE+5    EDIT CONDITION CODE
         MVC   WKCCV(4),WORK+2     SAVE STEP CONDITION CODE
         MVI   WKCCT,C'3'          SET COMPLETION TYPE TO 3
         B     CCODE4              DONE WITH THIS SECTION
CCODE2   TM    SMF30SCC,X'80'      SEE IF USER ABEND
         BNO   CCODE3              NO, BRANCH
         MVI   WKCCV,C'U'          SET USER INDICATOR
         SLR   R15,R15             CLEAR REG FOR ICM
         ICM   R15,B'0011',SMF30SCC LOAD USER ABEND CODE
         SLL   R15,17              TURN OFF
         SRL   R15,17                  HIGH ORDER BIT
         CVD   R15,DOUBLE          CONVERT ABEND CODE TO PACKED
         MVC   WORK(6),=X'F02020202120' SET EDIT MASK
         ED    WORK(6),DOUBLE+5    EDIT ABEND CODE
         MVC   WKCCV+1(4),WORK+2   SAVE STEP ABEND CODE
         MVI   WKCCT,C'2'          SET COMPLETION TYPE TO 2
         B     CCODE4              DONE WITH THIS SECTION
CCODE3   MVI   WKCCV,C'S'          SET SYSTEM INDICATOR
         LH    R15,SMF30SCC        LOAD STEP ABEND CODE
         STH   R15,WORK            SAVE INTO WORK AREA
         UNPK  WORK+3(5),WORK(3)   ADD ZONES TO ABEND CODE FIELDS
         TR    WORK+4(3),TRTAB     TRANSLATE TO CHARACTERS
         MVC   WKCCV+1(3),WORK+4   SAVE ABEND CODE IN HEX
         MVI   WKCCT,C'1'          SET COMPLETION TYPE TO 1
CCODE4   CLC   WKCC,HIGHCC         SEE IF NEW CC HIGHER THAN PREVIOUS
         BL    CCODE5              NO, KEEP THE CURRENT HIGH CC
         MVC   HIGHCC,WKCC         SET THE HIGH CC TO THE CURRENT CC
CCODE5   AH    R6,SMF30TLN         POINT TO NEXT COMPLETION SECTION
         BCT   R2,CCODE1           LOOP THROUGH ALL SECTIONS
CCODEND  MVC   INSTPCC,HIGHCCV     SET COMPLETION CODE TO HIGHEST VALUE
         DROP  R6                  DROP ADDRESSABILITY TO COMPL SECTION
***********************************************************************
*                                                                     *
*        CALCULATE STEP ELAPSED TIME IN THE FORM HUNDRETHS OF A       *
*        SECOND                                                       *
*                                                                     *
***********************************************************************
SELAP    MVC   CINSDT,INSJDATE     SET START DATE
         MVC   CINSTM,INSTIME      SET START TIME
         MVC   CINEDT,INEJDATE     SET END   DATE
         MVC   CINETM,INETIME      SET END   TIME
         L     R15,=V(CELAP)       LOAD ADDRESS OF ELAP TIME CALC RTN
         BALR  R14,R15             CALL ELAPSED TIME CALCULATION RTN
         MVC   INELAP,COUTEL       SAVE CALCULATED ELAPSED TIME
***********************************************************************
*                                                                     *
*        SAVE THE REST OF THE NEEDED FIELDS IN THE RECORD             *
*                                                                     *
***********************************************************************
SAVEREST ICM   R15,B'0011',SMF30UON LOAD NUMBER OF I/O SECTIONS
         BZ    READREC             ZERO, BAD RECORD, BYPASS
         L     R6,SMF30UOF         LOAD OFFSET TO I/O SECTION
         AR    R6,R5               GET ADDRESS OF I/O SECTION
         USING SMF30URA,R6         SET ADDRESSABILITY TO I/O SECTION
         MVC   INTEP,SMF30TEP      SAVE TOTAL EXCP COUNTS
         DROP  R6                  DROP ADDRESSABILITY TO I/O SECTION
         ICM   R15,B'0011',SMF30CON LOAD NUMBER OF PROC SECTIONS
         BZ    READREC             ZERO, BAD RECORD, BYPASS
         L     R6,SMF30COF         LOAD OFFSET TO PROC SECTION
         AR    R6,R5               GET ADDRESS OF PROC SECTION
         USING SMF30CAS,R6         SET ADDRESSABILITY TO PROC SECTION
         L     R15,SMF30CPT        STEP CPU TIME UNDER TCB
         A     R15,SMF30CPS        STEP CPU TIME UNDER SRB
         ST    R15,INTOTCPU        SAVE TOTAL CPU USED
         L     R15,SMF30_TIME_ON_IFA LOAD ZAAP CPU TIME
         ST    R15,INZAACPU        SAVE ZAAP CPU TIME
         L     R15,SMF30_TIME_ON_ZIIP LOAD ZIIP CPU TIME
         ST    R15,INZIICPU        SAVE ZIIP CPU TIME
         A     R15,INZAACPU        ADD ZAAP CPU TIME TO ZIIP CPU TIME
         ST    R15,INSPECPU        SAVE ZIIP+ZAAP CPU TIME
         DROP  R6                  DROP ADDRESSABILITY TO PROC SECTION
         ICM   R15,B'0011',SMF30RON LOAD NUMBER OF STG SECTIONS
         BZ    READREC             ZERO, BAD RECORD, BYPASS
         L     R6,SMF30ROF         LOAD OFFSET TO STG SECTION
         AR    R6,R5               GET ADDRESS OF STG SECTION
         USING SMF30SAP,R6         SET ADDRESSABILITY TO STG SECTION
         LH    R15,SMF30PRV        STG FROM BOTTOM OF PVT
         AH    R15,SMF30SYS        CALCULATE TOTAL STG BELOW 16M
         ST    R15,INSTGB16        SAVE TOTAL STG USED BELOW 16M
         L     R15,SMF30EUR        USER STG ABOVE 16M
         A     R15,SMF30EAR        SYS STG ABOVE 16M
         SRA   R15,10              DIVIDE BY 1024 FOR VALUE IN K
         ST    R15,INSTGA16        SAVE TOTAL STG USED ABOVE 16M
         L     R15,SMF30PIE        LOAD UNBLK PGS IN FROM EXP
         A     R15,SMF30POE        ADD UNBLK PGS OUT TO EXP
         A     R15,SMF30BIE        ADD BLK PGS IN FROM EXP
         A     R15,SMF30BOE        ADD BLK PGS OUT TO EXP
         A     R15,SMF30HPI        ADD HIPERSPACE PGS IN FROM EXP
         A     R15,SMF30HPO        ADD HIPERSPACE PGS OUT TO EXP
         ST    R15,INEXPTOT        SAVE TOTAL EXP PAGES
         L     R15,SMF30PGI        LOAD UNBLK PGS IN FROM AUX
         A     R15,SMF30PGO        ADD UNBLK PGS OUT TO AUX
         A     R15,SMF30BIA        ADD BLK PGS IN FROM AUX
         A     R15,SMF30BOA        ADD BLK PGS OUT TO AUX
         ST    R15,INAUXTOT        SAVE TOTAL AUX PAGES
         L     R15,SMF30VPI        LOAD VIO PGS IN
         A     R15,SMF30VPO        ADD VIO PGS OUT
         ST    R15,INVIOTOT        SAVE TOTAL VIO PAGES
         DROP  R6                  DROP ADDRESSABILITY TO STG SECTION
         ICM   R15,B'0011',SMF30OON LOAD NUMBER OF OPER SECTIONS
         BZ    READREC             ZERO, BAD RECORD, BYPASS
         L     R6,SMF30OOF         LOAD OFFSET TO OPER SECTION
         AR    R6,R5               GET ADDRESS OF OPER SECTION
         USING SMF30OPS,R6         SET ADDRESSABILITY TO OPER SECTION
         MVC   INTPR,SMF30TPR      SAVE NUMBER OF NON-STRATCH TAPE MNTS
         MVC   INPTM,SMF30PTM      SAVE NUMBER OF SCRATCH TAPE MNTS
         L     R15,SMF30PTM        LOAD NUMBER OF SCRATCH TAPE MNTS
         A     R15,SMF30TPR        ADD NUMBER OF NON-SCRATCH TAPE MNTS
         ST    R15,INMNTS          SAVE TOTAL NUMBER OF MOUNTS
         XC    INCPP,INCPP         ZERO CPU PERCENT VALUE
         L     R14,INTOTCPU        LOAD CPU TIME
         LTR   R14,R14             TEST CPU TIME
         BZ    SETTYPE             ZERO, CPU PERCENT IS ZERO
         CLC   INELAP,=F'0'        TEST ELAPSED TIME
         BE    SETTYPE             ZERO, CPU PERCENT IS ZERO
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         MH    R15,=H'1000'        MULTIPLY BY 1000 FOR PERCENT X 10
         D     R14,INELAP          DIVIDE BY ELAP TIME FOR PERCENT
         AH    R15,=H'5'           ADD ROUNDING FACTOR
         SLR   R14,R14             CLEAR REG 14
         D     R14,=F'10'          MAKE PERCENT ROUNDED
         ST    R15,INCPP           SAVE CPU PERCENT
SETTYPE  MVI   INTYPE,C'T'         ASSUME TEST JOB
         CLC   INJNM(3),=C'TSU'    SEE IF TSO USER
         BE    ENDTYPE             YES, GET OUT
         CLC   INJNM(2),=C'T0'     SEE IF TSO USER
         BE    ENDTYPE             YES, GET OUT
         CLI   INJBN+1,C'0'        SEE IF TEST BATCH JOB
         BNL   ENDTYPE             YES, GET OUT
         CLI   INJBN+2,C'0'        SEE IF TEST BATCH JOB
         BNL   ENDTYPE             YES, GET OUT
         MVI   INTYPE,C'P'         MUST BE PRODUCTION BATCH
ENDTYPE  L     R6,SMF30POF         LOAD OFFSET TO PERFORMANCE SECTION
         AR    R6,R5               GET ADDRESS OF PERFORMANCE SECTION
         USING SMF30PRF,R6         SET ADDRESSABILITY TO PERF SECTION
         MVC   INTSRV,SMF30SRV     SAVE TOTAL SERVICE UNITS
         MVC   INCSRV,SMF30CSU     SAVE CPU   SERVICE UNITS
         MVC   INSSRV,SMF30SRB     SAVE SRB   SERVICE UNITS
         MVC   INISRV,SMF30IO      SAVE I/O   SERVICE UNITS
         MVC   INMSRV,SMF30MSO     SAVE MSO   SERVICE UNITS
ENDREC   DS    0H                  END OF BUILDING INPUT RECORD
         DROP  R6                  DROP ADDRESSABILITY TO OPER SECTION
         EJECT
***********************************************************************
*                                                                     *
*        FILTER THE RECORDS ACCORDING TO ANY INPUT CONTROL            *
*        CARDS.                                                       *
*                                                                     *
***********************************************************************
PIRNG    TM    SWITCH+7,SELIRNG    END INCLUSIVE RANGE SELECTION?
         BNO   PTIMEI              NO, BRANCH
         BAL   R14,CKIRNG          YES, BRANCH
PTIMEI   TM    SWITCH+7,SELTIMEI   TIMEINCLUSIVE OPTION?
         BNO   PDATE               NO, BRANCH
         BAL   R14,CKTIMEI         YES, GO SEE IF MATCH
         B     PJOBNM              SKIP OTHER DATE AND TIME CHECKS
PDATE    TM    SWITCH,SELDATE      DATE SELECTION?
         BNO   PSTIME              NO, BRANCH
         BAL   R14,CKDATE          YES, GO SEE IF MATCH
PSTIME   TM    SWITCH,SELSTIME     START TIME SELECTION?
         BNO   PETIME              NO, BRANCH
         BAL   R14,CKSTIME         YES, GO SEE IF MATCH
PETIME   TM    SWITCH+6,SELETIME   STOP TIME SELECTION?
         BNO   PJOBNM              NO, BRANCH
         BAL   R14,CKETIME         YES, GO SEE IF MATCH
PJOBNM   TM    SWITCH,SELJOBNM     JOBNAME SELECTION?
         BNO   PJOBNO              NO, BRANCH
         BAL   R14,CKJOBNM         YES, GO SEE IF MATCH
PJOBNO   TM    SWITCH,SELJOBNO     JOBNO SELECTION?
         BNO   PSYSID              NO, BRANCH
         BAL   R14,CKJOBNO         YES, GO SEE IF MATCH
PSYSID   TM    SWITCH,SELSYSID     SYSID SELECTION?
         BNO   PPSTEP              NO, BRANCH
         BAL   R14,CKSYSID         YES, BRANCH
PPSTEP   TM    SWITCH+4,SELPSTEP   PROC STEP SELECTION?
         BNO   PJSTEP              NO, BRANCH
         BAL   R14,CKPSTEP         YES, BRANCH
PJSTEP   TM    SWITCH+4,SELJSTEP   JOB STEP SELECTION?
         BNO   PPGM                NO, BRANCH
         BAL   R14,CKJSTEP         YES, BRANCH
PPGM     TM    SWITCH,SELPGM       PGM SELECTION?
         BNO   PUID                NO, BRANCH
         BAL   R14,CKPGM           YES, BRANCH
PUID     TM    SWITCH+1,SELUID     UID SELECTION?
         BNO   PCC                 NO, BRANCH
         BAL   R14,CKUID           YES, BRANCH
PCC      TM    SWITCH+1,SELCC      CCODE SELECTION?
         BNO   PETGE               NO, BRANCH
         BAL   R14,CKCC            YES, BRANCH
PETGE    TM    SWITCH+1,SELETGE    ELAPSED TIME GE SELECTION?
         BNO   PETLE               NO, BRANCH
         BAL   R14,CKETGE          YES, BRANCH
PETLE    TM    SWITCH+1,SELETLE    ELAPSED TIME LE SELECTION?
         BNO   PBCGE               NO, BRANCH
         BAL   R14,CKETLE          YES, BRANCH
PBCGE    TM    SWITCH+2,SELBCGE    BLOCK COUNT GE SELECTION?
         BNO   PBCLE               NO, BRANCH
         BAL   R14,CKBCGE          YES, BRANCH
PBCLE    TM    SWITCH+2,SELBCLE    BLOCK COUNT LE SELECTION?
         BNO   PCTGE               NO, BRANCH
         BAL   R14,CKBCLE          YES, BRANCH
PCTGE    TM    SWITCH+1,SELCTGE    CPU TIME GE SELECTION?
         BNO   PCTLE               NO, BRANCH
         BAL   R14,CKCTGE          YES, BRANCH
PCTLE    TM    SWITCH+1,SELCTLE    CPU TIME LE SELECTION?
         BNO   PZAGE               NO, BRANCH
         BAL   R14,CKCTLE          YES, BRANCH
PZAGE    TM    SWITCH+9,SELZAAGE   ZAAP CPU TIME GE SELECTION?
         BNO   PZALE               NO, BRANCH
         BAL   R14,CKZAGE          YES, BRANCH
PZALE    TM    SWITCH+9,SELZAALE   ZAAP CPU TIME LE SELECTION?
         BNO   PZIGE               NO, BRANCH
         BAL   R14,CKZALE          YES, BRANCH
PZIGE    TM    SWITCH+9,SELZIIGE   ZIIP CPU TIME GE SELECTION?
         BNO   PZILE               NO, BRANCH
         BAL   R14,CKZIGE          YES, BRANCH
PZILE    TM    SWITCH+9,SELZIILE   ZIIP CPU TIME LE SELECTION?
         BNO   PSPGE               NO, BRANCH
         BAL   R14,CKZILE          YES, BRANCH
PSPGE    TM    SWITCH+9,SELSPEGE   ZAAP+ZIIP CPU TIME GE SELECTION?
         BNO   PSPLE               NO, BRANCH
         BAL   R14,CKSPGE          YES, BRANCH
PSPLE    TM    SWITCH+9,SELSPELE   ZAAP+ZIIP CPU TIME LE SELECTION?
         BNO   PRBGE               NO, BRANCH
         BAL   R14,CKSPLE          YES, BRANCH
PRBGE    TM    SWITCH+2,SELRBGE    REGION BELOW GE SELECTION?
         BNO   PRBLE               NO, BRANCH
         BAL   R14,CKRBGE          YES, BRANCH
PRBLE    TM    SWITCH+2,SELRBLE    REGION BELOW LE SELECTION?
         BNO   PRAGE               NO, BRANCH
         BAL   R14,CKRBLE          YES, BRANCH
PRAGE    TM    SWITCH+2,SELRAGE    REGION ABOVE GE SELECTION?
         BNO   PRALE               NO, BRANCH
         BAL   R14,CKRAGE          YES, BRANCH
PRALE    TM    SWITCH+2,SELRALE    REGION ABOVE LE SELECTION?
         BNO   PMNTGE              NO, BRANCH
         BAL   R14,CKRALE          YES, BRANCH
PMNTGE   TM    SWITCH+1,SELMNTGE   MOUNT COUNT GE SELECTION?
         BNO   PMNTLE              NO, BRANCH
         BAL   R14,CKMNTGE         YES, BRANCH
PMNTLE   TM    SWITCH+1,SELMNTLE   MOUNT COUNT LE SELECTION?
         BNO   PCPPGE              NO, BRANCH
         BAL   R14,CKMNTLE         YES, BRANCH
PCPPGE   TM    SWITCH+2,SELCPPGE   MOUNT CPU PCT GE SELECTION?
         BNO   PCPPLE              NO, BRANCH
         BAL   R14,CKCPPGE         YES, BRANCH
PCPPLE   TM    SWITCH+2,SELCPPLE   MOUNT CPU PCT LE SELECTION?
         BNO   PTYPE               NO, BRANCH
         BAL   R14,CKCPPLE         YES, BRANCH
PTYPE    TM    SWITCH+3,SELTYPE    TYPE SELECTION?
         BNO   PPTPGE              NO, BRANCH
         BAL   R14,CKTYPE          YES, BRANCH
PPTPGE   TM    SWITCH+5,SELPTPGE   PERM TAPE GE SELECTION?
         BNO   PPTPLE              NO, BRANCH
         BAL   R14,CKPTPGE         YES, BRANCH
PPTPLE   TM    SWITCH+5,SELPTPLE   PERM TAPE LE SELECTION?
         BNO   PSTPGE              NO, BRANCH
         BAL   R14,CKPTPLE         YES, BRANCH
PSTPGE   TM    SWITCH+5,SELSTPGE   SCRATCH TAPE GE SELECTION?
         BNO   PSTPLE              NO, BRANCH
         BAL   R14,CKSTPGE         YES, BRANCH
PSTPLE   TM    SWITCH+5,SELSTPLE   SCRATCH TAPE LE SELECTION?
         BNO   PEPGGE              NO, BRANCH
         BAL   R14,CKSTPLE         YES, BRANCH
PEPGGE   TM    SWITCH+5,SELEPGGE   EXP PAGING GE SELECTION?
         BNO   PEPGLE              NO, BRANCH
         BAL   R14,CKEPGGE         YES, BRANCH
PEPGLE   TM    SWITCH+5,SELEPGLE   EXP PAGING LE SELECTION?
         BNO   PAPGGE              NO, BRANCH
         BAL   R14,CKEPGLE         YES, BRANCH
PAPGGE   TM    SWITCH+5,SELAPGGE   AUX PAGING GE SELECTION?
         BNO   PAPGLE              NO, BRANCH
         BAL   R14,CKAPGGE         YES, BRANCH
PAPGLE   TM    SWITCH+5,SELAPGLE   AUX PAGING LE SELECTION?
         BNO   PTSUGE              NO, BRANCH
         BAL   R14,CKAPGLE         YES, BRANCH
PTSUGE   TM    SWITCH+4,SELTSUGE   TOT SERV UNITS GE SELECTION?
         BNO   PTSULE              NO, BRANCH
         BAL   R14,CKTSUGE         YES, BRANCH
PTSULE   TM    SWITCH+4,SELTSULE   TOT SERV UNITS LE SELECTION?
         BNO   PCSUGE              NO, BRANCH
         BAL   R14,CKTSULE         YES, BRANCH
PCSUGE   TM    SWITCH+7,SELCSUGE   CPU SERV UNITS GE SELECTION?
         BNO   PCSULE              NO, BRANCH
         BAL   R14,CKCSUGE         YES, BRANCH
PCSULE   TM    SWITCH+7,SELCSULE   CPU SERV UNITS LE SELECTION?
         BNO   PISUGE              NO, BRANCH
         BAL   R14,CKCSULE         YES, BRANCH
PISUGE   TM    SWITCH+7,SELISUGE   I/O SERV UNITS GE SELECTION?
         BNO   PISULE              NO, BRANCH
         BAL   R14,CKISUGE         YES, BRANCH
PISULE   TM    SWITCH+7,SELISULE   I/O SERV UNITS LE SELECTION?
         BNO   PMSUGE              NO, BRANCH
         BAL   R14,CKISULE         YES, BRANCH
PMSUGE   TM    SWITCH+7,SELMSUGE   MSO SERV UNITS GE SELECTION?
         BNO   PMSULE              NO, BRANCH
         BAL   R14,CKMSUGE         YES, BRANCH
PMSULE   TM    SWITCH+7,SELMSULE   MSO SERV UNITS LE SELECTION?
         BNO   PSSUGE              NO, BRANCH
         BAL   R14,CKMSULE         YES, BRANCH
PSSUGE   TM    SWITCH+8,SELSSUGE   SRB SERV UNITS GE SELECTION?
         BNO   PSSULE              NO, BRANCH
         BAL   R14,CKSSUGE         YES, BRANCH
PSSULE   TM    SWITCH+8,SELSSULE   SRB SERV UNITS LE SELECTION?
         BNO   PVIOGE              NO, BRANCH
         BAL   R14,CKSSULE         YES, BRANCH
PVIOGE   TM    SWITCH+6,SELVIOGE   VIO PAGES GE SELECTION?
         BNO   PVIOLE              NO, BRANCH
         BAL   R14,CKVIOGE         YES, BRANCH
PVIOLE   TM    SWITCH+6,SELVIOLE   VIO PAGES LE SELECTION?
         BNO   PSDAY               NO, BRANCH
         BAL   R14,CKVIOLE         YES, BRANCH
PSDAY    TM    SWITCH+6,SELSDAY    START DAY-OF-WEEK SELECTION?
         BNO   PEDAY               NO, BRANCH
         BAL   R14,CKSDAY          YES, BRANCH
PEDAY    TM    SWITCH+6,SELEDAY    END DAY-OF-WEEK SELECTION?
         BNO   PMISC               NO, BRANCH
         BAL   R14,CKEDAY          YES, BRANCH
PMISC    BAL   R14,CKMISC          GO CHECK MISC OPTIONS
         B     READRET             RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        THESE ARE THE INDIVIDUAL FILTER ROUTINES WHICH WILL BE       *
*        CALLED IF INPUT CONTROL CARDS  REQUESTED IT.                 *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*        CHECK DATE RANGE                                             *
***********************************************************************
CKDATE   ICM   R1,B'1111',DATETBL  LOAD ADDRESS OF DATE TABLE
         BZR   R14                 ZERO, NO DATES, IGNORE THIS CHECK
CKDATE1  CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         CP    INSJDATE,0(4,R1)    SEE IF START DATE LT BEGIN FILTER
         BL    CKDATE2             YES, FAILED THIS CHECK
         CP    INEJDATE,4(4,R1)    SEE IF END DATE GT END FILTER
         BH    CKDATE2             YES, FAILED THIS CHECK
         BR    R14                 NO,  MATCH DATE RANGE, KEEP THIS ONE
CKDATE2  LA    R1,08(,R1)          INCREMENT TO NEXT DATE ENTRY
         B     CKDATE1             GO CHECK NEXT DATE ENTRY
         SPACE 3
***********************************************************************
*        CHECK TIMEINCLUSIVE RANGE                                    *
***********************************************************************
CKTIMEI  CP    INSJDATE,LOWIDATE   SEE IF START DATE LT LOW INC DATE
         BL    READREC             YES, FAILED THIS CHECK
         CP    INEJDATE,HIIDATE    SEE IF END DATE GT HI INC DATE
         BH    READREC             YES, FAILED THIS CHECK
CKTIMEI1 CP    INSJDATE,LOWIDATE   SEE IF START DATE EQ LOW INC DATE
         BNE   CKTIMEI2            NO, SKIP LOW INC TIME TEST
         CLC   INSTIME,LOWITIME    SEE IF START TIME LT LOW INC TIME
         BL    READREC             YES, FAILED THIS CHECK
CKTIMEI2 CP    INEJDATE,HIIDATE    SEE IF END DATE EQ HI INC DATE
         BNE   CKTIMEI3            NO, SKIP HI INC TIME TEST
         CLC   INETIME,HIITIME     SEE IF END TIME GT HI INC TIME
         BH    READREC             YES, FAILED THIS CHECK
CKTIMEI3 BR    R14                 NO,  MATCH INCL RANGE, KEEP THIS ONE
         SPACE 3
***********************************************************************
*        CHECK START TIME RANGE                                       *
***********************************************************************
CKSTIME  ICM   R1,B'1111',STIMETBL LOAD ADDRESS OF TIME TABLE
         BZR   R14                 ZERO, NO TIMES, IGNORE THIS CHECK
CKSTIME1 CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         CLC   INSTIME,0(R1)       SEE IF TIME LESS THAN BEGIN TIME
         BL    CKSTIME2            YES, FAILED THIS CHECK
         CLC   INSTIME,4(R1)       SEE IF TIME GREATER THAN END TIME
         BH    CKSTIME2            YES, FAILED THIS CHECK
         BR    R14                 NO,  MATCH DATE RANGE, KEEP THIS ONE
CKSTIME2 LA    R1,08(,R1)          INCREMENT TO NEXT TIME ENTRY
         B     CKSTIME1            GO CHECK NEXT TIME ENTRY
         SPACE 3
***********************************************************************
*        CHECK STOP TIME RANGE                                        *
***********************************************************************
CKETIME  ICM   R1,B'1111',ETIMETBL LOAD ADDRESS OF TIME TABLE
         BZR   R14                 ZERO, NO TIMES, IGNORE THIS CHECK
CKETIME1 CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         CLC   INETIME,0(R1)       SEE IF TIME LESS THAN BEGIN TIME
         BL    CKSTIME2            YES, FAILED THIS CHECK
         CLC   INETIME,4(R1)       SEE IF TIME GREATER THAN END TIME
         BH    CKSTIME2            YES, FAILED THIS CHECK
         BR    R14                 NO,  MATCH DATE RANGE, KEEP THIS ONE
CKETIME2 LA    R1,08(,R1)          INCREMENT TO NEXT TIME ENTRY
         B     CKETIME1            GO CHECK NEXT TIME ENTRY
         SPACE 3
***********************************************************************
*        CHECK JOB NAME AGAINST THE JOBNAME TABLE                     *
***********************************************************************
CKJOBNM  ST    R14,RETADD          SAVE RETURN ADDRESS
         ICM   R14,B'1111',JOBNMTBL LOAD ADDRESS OF JOBNAME TABLE
         BZ    CKJOBNM2            ZERO, NO JOBNAMES, IGNORE THIS CHECK
CKJOBNM1 CLI   0(R14),X'FF'        SEE IF END OF TABLE
         BE    READREC             YES, BYPASS RECORD
         LA    R1,INJBN            LOAD ADDRESS OF JOB NAME
         SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,1(R14)          LOAD OFFSET VALUE OF THIS JOBNAME
         AR    R1,R15              ADD OFFSET TO ADDRESS
         IC    R15,0(R14)          LOAD LENGTH VALUE OF THIS JOBNAME
         EX    R15,COMPJOB         COMPARE FOR MATCH
         BE    CKJOBNM2            MATCH, RETURN TO CALLER
         LA    R14,10(,R14)        INCREMENT TO NEXT JOBNAME ENTRY
         B     CKJOBNM1            GO CHECK NEXT JOBNAME ENTRY
CKJOBNM2 ICM   R14,B'1111',XJOBNTBL LOAD ADDRESS OF EXJOBNAME TABLE
         BZ    CKJOBNM4            ZERO, NO JOBNAMES, IGNORE THIS CHECK
CKJOBNM3 CLI   0(R14),X'FF'        SEE IF END OF TABLE
         BE    CKJOBNM4            YES, DO NOT EXCLUDE THIS RECORD
         LA    R1,INJBN            LOAD ADDRESS OF JOB NAME
         SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,1(R14)          LOAD OFFSET VALUE OF THIS JOBNAME
         AR    R1,R15              ADD OFFSET TO ADDRESS
         IC    R15,0(R14)          LOAD LENGTH VALUE OF THIS JOBNAME
         EX    R15,COMPJOB         COMPARE FOR MATCH
         BE    READREC             MATCH, BYPASS RECORD
         LA    R14,10(,R14)        INCREMENT TO NEXT JOBNAME ENTRY
         B     CKJOBNM3            GO CHECK NEXT JOBNAME ENTRY
CKJOBNM4 L     R14,RETADD          RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
COMPJOB  CLC   0(0,R1),2(R14)      *****  EXEC ONLY *****
         SPACE 3
***********************************************************************
*        CHECK JOB NUMBER                                             *
***********************************************************************
CKJOBNO  ICM   R1,B'1111',JOBNOTBL LOAD ADDRESS OF JOBNO TABLE
         BZ    CKJOBNO2            ZERO, NO JOB NBRS, IGNORE THIS CHECK
CKJOBNO1 CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BE    READREC             YES, BYPASS RECORD
         CLC   INJNM,0(R1)         SEE IF MATCH ON JOBNO
         BE    CKJOBNO2            MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,08(,R1)          INCREMENT TO NEXT JOBNO ENTRY
         B     CKJOBNO1            GO CHECK NEXT JOBNO ENTRY
CKJOBNO2 ICM   R1,B'1111',XJBNOTBL LOAD ADDRESS OF EXJOBNO TABLE
         BZR   R14                 ZERO, NO JOB NBRS, IGNORE THIS CHECK
CKJOBNO3 CLI   0(R1),X'FF'         SEE IF END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         CLC   INJNM,0(R1)         SEE IF MATCH ON JOBNO
         BE    READREC             MATCH, BYPASS RECORD
         LA    R1,08(,R1)          INCREMENT TO NEXT JOBNO ENTRY
         B     CKJOBNO3            GO CHECK NEXT JOBNO ENTRY
         SPACE 3
***********************************************************************
*        CHECK SMF SYSTEM NAME                                        *
***********************************************************************
CKSYSID  ICM   R15,B'1111',SYSIDTBL LOAD ADDRESS OF SYSID TABLE
         BZ    CKSYSID2            ZERO, NO SYSIDS, IGNORE THIS CHECK
CKSYSID1 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BE    READREC             YES, BYPASS RECORD
         CLC   INSID,0(R15)        SEE IF MATCH ON SYSTEM ID
         BE    CKSYSID2            MATCH, SELECT THIS RECORD FOR NOW
         LA    R15,04(,R15)        INCREMENT TO NEXT SYSID ENTRY
         B     CKSYSID1            GO CHECK NEXT SYSID ENTRY
CKSYSID2 ICM   R15,B'1111',XSYSTBL  LOAD ADDRESS OF EXSYSID TABLE
         BZR   R14                 ZERO, NO SYSIDS, IGNORE THIS CHECK
CKSYSID3 CLI   0(R15),X'FF'        SEE IF END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         CLC   INSID,0(R15)        SEE IF MATCH ON SYSTEM ID
         BE    READREC             MATCH, BYPASS RECORD
         LA    R15,04(,R15)        INCREMENT TO NEXT SYSID ENTRY
         B     CKSYSID3            GO CHECK NEXT SYSID ENTRY
         SPACE 3
***********************************************************************
*        CHECK PROC STEP NAME                                         *
***********************************************************************
CKPSTEP  ICM   R1,B'1111',PSTEPTBL LOAD ADDRESS OF PROC STEP TABLE
         BZ    CKPSTEP2            ZERO, NO PSTEPS, IGNORE THIS CHECK
CKPSTEP1 CLI   0(R1),X'FF'         END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF PSTEP NAME
         EX    R15,COMPPSTP        COMPARE FOR MATCH
         BE    CKPSTEP2            MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKPSTEP1            LOOP
CKPSTEP2 ICM   R1,B'1111',XPSTPTBL LOAD ADDRESS OF EXPSTEP TABLE
         BZR   R14                 ZERO, NO PSTEPS, IGNORE THIS CHECK
CKPSTEP3 CLI   0(R1),X'FF'         END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF PSTEP NAME
         EX    R15,COMPPSTP        COMPARE FOR MATCH
         BE    READREC             MATCH, BYPASS RECORD
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKPSTEP3            LOOP
COMPPSTP CLC   INPSN(0),2(R1)      **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*        CHECK JOB STEP NAME                                          *
***********************************************************************
CKJSTEP  ICM   R1,B'1111',JSTEPTBL LOAD ADDRESS OF JOB STEP TABLE
         BZ    CKJSTEP2            ZERO, NO PGMS, IGNORE THIS CHECK
CKJSTEP1 CLI   0(R1),X'FF'         END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF JSTEP NAME
         EX    R15,COMPJSTP        COMPARE FOR MATCH
         BE    CKJSTEP2            MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKJSTEP1            LOOP
CKJSTEP2 ICM   R1,B'1111',XJSTPTBL LOAD ADDRESS OF EXJSTEP TABLE
         BZR   R14                 ZERO, NO PGMS, IGNORE THIS CHECK
CKJSTEP3 CLI   0(R1),X'FF'         END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF JSTEP NAME
         EX    R15,COMPJSTP        COMPARE FOR MATCH
         BE    READREC             MATCH, BYPASS RECORD
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKJSTEP3            LOOP
COMPJSTP CLC   INSTM(0),2(R1)      **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*        CHECK PROGRAM NAME                                           *
***********************************************************************
CKPGM    ICM   R1,B'1111',PGMTBL   LOAD ADDRESS OF PGM NAME TABLE
         BZ    CKPGM2              ZERO, NO PGMS, IGNORE THIS CHECK
CKPGM1   CLI   0(R1),X'FF'         END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF PGM NAME
         EX    R15,COMPPGM         COMPARE FOR MATCH
         BE    CKPGM2              MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKPGM1              LOOP
CKPGM2   ICM   R1,B'1111',XPGMTBL  LOAD ADDRESS OF EXPGM NAME TABLE
         BZR   R14                 ZERO, NO PGMS, IGNORE THIS CHECK
CKPGM3   CLI   0(R1),X'FF'         END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF PGM NAME
         EX    R15,COMPPGM         COMPARE FOR MATCH
         BE    READREC             MATCH, BYPASS RECORD
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKPGM3              LOOP
COMPPGM  CLC   INPGM(0),2(R1)      **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*        CHECK SECURITY USERID                                        *
***********************************************************************
CKUID    ICM   R1,B'1111',UIDTBL   LOAD ADDRESS OF UID NAME TABLE
         BZ    CKUID2              ZERO, NO UIDS, IGNORE THIS CHECK
CKUID1   CLI   0(R1),X'FF'         END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF UID NAME
         EX    R15,COMPUID         COMPARE FOR MATCH
         BE    CKUID2              MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKUID1              LOOP
CKUID2   ICM   R1,B'1111',XUIDTBL  LOAD ADDRESS OF EXUID NAME TABLE
         BZR   R14                 ZERO, NO UIDS, IGNORE THIS CHECK
CKUID3   CLI   0(R1),X'FF'         END OF TABLE
         BER   R14                 YES, DO NOT EXCLUDE THIS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF UID NAME
         EX    R15,COMPUID         COMPARE FOR MATCH
         BE    READREC             MATCH, BYPASS RECORD
         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY
         B     CKUID3              LOOP
COMPUID  CLC   INRUD(0),2(R1)      **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*        CHECK STEP CONDITION CODE                                    *
***********************************************************************
CKCC     ICM   R1,B'1111',CCTBL    LOAD ADDRESS OF CCODE TABLE
         BZ    CKCC2               ZERO, NO CCODES, IGNORE THIS CHECK
CKCC1    CLI   0(R1),X'FF'         END OF TABLE
         BE    READREC             YES, NO MATCH, BYPASS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF CCODE
         EX    R15,COMPCC          COMPARE FOR MATCH
         BE    CKCC2               MATCH, SELECT THIS RECORD FOR NOW
         LA    R1,07(,R1)          INCREMENT TO NEXT ENTRY
         B     CKCC1               LOOP
CKCC2    ICM   R1,B'1111',XCCTBL   LOAD ADDRESS OF EXCCODE TABLE
         BZR   R14                 ZERO, NO CCODES, IGNORE THIS CHECK
CKCC3    CLI   0(R1),X'FF'         END OF TABLE
         BER   R14                 YES, DO NOT BYPASS THIS RECORD
         LH    R15,0(R1)           LOAD MACHINE LENGTH OF CCODE
         EX    R15,COMPCC          COMPARE FOR MATCH
         BE    READREC             MATCH, BYPASS RECORD
         LA    R1,07(,R1)          INCREMENT TO NEXT ENTRY
         B     CKCC3               LOOP
COMPCC   CLC   INSTPCC(0),2(R1)    **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*        CHECK ELAPSED TIME GE                                        *
***********************************************************************
CKETGE   CLC   INELAP,VALETGE      SEE IF ELAP TIME GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK ELAPSED TIME LE                                        *
***********************************************************************
CKETLE   CLC   INELAP,VALETLE      SEE IF ELAP TIME LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK BLOCK COUNT GE                                         *
***********************************************************************
CKBCGE   CLC   INTEP,VALBCGE       SEE IF ELAP TIME GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK BLOCK COUNT LE                                         *
***********************************************************************
CKBCLE   CLC   INTEP,VALBCLE       SEE IF ELAP TIME LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK CPU TIME GE                                            *
***********************************************************************
CKCTGE   CLC   INTOTCPU,VALCTGE    SEE IF CPU TIME GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK CPU TIME LE                                            *
***********************************************************************
CKCTLE   CLC   INTOTCPU,VALCTLE    SEE IF CPU TIME LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK ZAAP CPU TIME GE                                       *
***********************************************************************
CKZAGE   CLC   INZAACPU,VALZAAGE   SEE IF ZAAP CPU TIME GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK ZAAP CPU TIME LE                                       *
***********************************************************************
CKZALE   CLC   INZAACPU,VALZAALE   SEE IF ZAAP CPU TIME LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK ZIIP CPU TIME GE                                       *
***********************************************************************
CKZIGE   CLC   INZIICPU,VALZIIGE   SEE IF ZIIP CPU TIME GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK ZIIP CPU TIME GE                                       *
***********************************************************************
CKZILE   CLC   INZIICPU,VALZIILE   SEE IF ZIIP CPU TIME LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK SPECIALTY CPU TIME GE                                  *
***********************************************************************
CKSPGE   CLC   INSPECPU,VALSPEGE   SEE IF SPEC CPU TIME GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK SPECIALTY CPU TIME LE                                  *
***********************************************************************
CKSPLE   CLC   INSPECPU,VALSPELE   SEE IF SPEC CPU TIME LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK REGION SIZE BELOW 16M GE                               *
***********************************************************************
CKRBGE   L     R15,INSTGB16        LOAD REGION BELOW VALUE IN "K"
         SRA   R15,10              DIVIDE BY 1024 FOR MEG VALUE
         C     R15,VALRBGE         SEE IF REGION BELOW GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK REGION SIZE BELOW 16M LE                               *
***********************************************************************
CKRBLE   L     R15,INSTGB16        LOAD REGION BELOW VALUE
         A     R15,=F'1023'        ELIMINATE PARTIAL MEG
         SRA   R15,10              DIVIDE BY 1024 FOR MEG VALUE
         C     R15,VALRBLE         SEE IF REGION BELOW LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK REGION SIZE ABOVE 16M GE                               *
***********************************************************************
CKRAGE   L     R15,INSTGA16        LOAD REGION ABOVE VALUE
         SRA   R15,10              DIVIDE BY 1024 FOR MEG VALUE
         C     R15,VALRAGE         SEE IF REGION ABOVE GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK REGION SIZE ABOVE 16M LE                               *
***********************************************************************
CKRALE   L     R15,INSTGA16        LOAD REGION ABOVE VALUE
         A     R15,=F'1023'        ELIMINATE PARTIAL MEG
         SRA   R15,10              DIVIDE BY 1024 FOR MEG VALUE
         C     R15,VALRALE         SEE IF REGION ABOVE LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK TAPE MOUNTS GE                                         *
***********************************************************************
CKMNTGE  CLC   INMNTS,VALMNTGE     SEE IF MOUNTS GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK TAPE MOUNTS LE                                         *
***********************************************************************
CKMNTLE  CLC   INMNTS,VALMNTLE     SEE IF MOUNTS LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK CPU PERCENT GE                                         *
***********************************************************************
CKCPPGE  CLC   INCPP,VALCPPGE      SEE IF CPU PCT GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK CPU PERCENT LE                                         *
***********************************************************************
CKCPPLE  CLC   INCPP,VALCPPLE      SEE IF CPU PCT LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK JOB TYPE                                               *
***********************************************************************
CKTYPE   CLC   INTYPE,VALTYPE      SEE IF TYPE MATCHES
         BNE   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK PERM TAPE MOUNTS GE                                    *
***********************************************************************
CKPTPGE  CLC   INTPR,VALPTPGE      SEE IF PERM TAPES GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK PERM TAPE MOUNTS LE                                    *
***********************************************************************
CKPTPLE  CLC   INTPR,VALPTPLE      SEE IF PERM TAPES LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK SCRATCH TAPE MOUNTS GE                                 *
***********************************************************************
CKSTPGE  CLC   INPTM,VALSTPGE      SEE IF SCRATCH TAPES GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK SCRATCH TAPE MOUNTS LE                                 *
***********************************************************************
CKSTPLE  CLC   INPTM,VALSTPLE      SEE IF SCRATCH TAPES LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK EXPANDED PAGING GE                                     *
***********************************************************************
CKEPGGE  CLC   INEXPTOT,VALEPGGE   SEE IF EXP PAGING GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK EXPANDED PAGING LE                                     *
***********************************************************************
CKEPGLE  CLC   INEXPTOT,VALEPGLE   SEE IF EXP PAGING LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK AUXILLARY PAGING GE                                    *
***********************************************************************
CKAPGGE  CLC   INAUXTOT,VALAPGGE   SEE IF AUX PAGING GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK AUXILLARY PAGING LE                                    *
***********************************************************************
CKAPGLE  CLC   INAUXTOT,VALAPGLE   SEE IF AUX PAGING LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK TOTAL SERVICE UNITS GE                                 *
***********************************************************************
CKTSUGE  L     R15,INTSRV          LOAD TOTAL SERVICE UNITS
         SRA   R15,10              DIVIDE BY 1024 FOR K VALUE
         C     R15,VALTSUGE        SEE IF TOT SERV UNITS GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK TOTAL SERVICE UNITS LE                                 *
***********************************************************************
CKTSULE  L     R15,INTSRV          LOAD TOTAL SERVICE UNITS
         A     R15,=F'1023'        ELIMINATE PARTIAL K
         SRA   R15,10              DIVIDE BY 1024 FOR K VALUE
         C     R15,VALTSULE        SEE IF TOT SERV UNITS LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK CPU   SERVICE UNITS GE                                 *
***********************************************************************
CKCSUGE  L     R15,INCSRV          LOAD CPU   SERVICE UNITS
         SRA   R15,10              DIVIDE BY 1024 FOR K VALUE
         C     R15,VALCSUGE        SEE IF CPU SERV UNITS GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK CPU   SERVICE UNITS LE                                 *
***********************************************************************
CKCSULE  L     R15,INCSRV          LOAD CPU   SERVICE UNITS
         A     R15,=F'1023'        ELIMINATE PARTIAL K
         SRA   R15,10              DIVIDE BY 1024 FOR K VALUE
         C     R15,VALCSULE        SEE IF CPU SERV UNITS LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK I/O   SERVICE UNITS GE                                 *
***********************************************************************
CKISUGE  L     R15,INISRV          LOAD I/O   SERVICE UNITS
         SRA   R15,10              DIVIDE BY 1024 FOR K VALUE
         C     R15,VALISUGE        SEE IF I/O SERV UNITS GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK I/O L SERVICE UNITS LE                                 *
***********************************************************************
CKISULE  L     R15,INISRV          LOAD I/O   SERVICE UNITS
         A     R15,=F'1023'        ELIMINATE PARTIAL K
         SRA   R15,10              DIVIDE BY 1024 FOR K VALUE
         C     R15,VALISULE        SEE IF I/O SERV UNITS LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK MSO   SERVICE UNITS GE                                 *
***********************************************************************
CKMSUGE  L     R15,INMSRV          LOAD MSO   SERVICE UNITS
         SRA   R15,10              DIVIDE BY 1024 FOR K VALUE
         C     R15,VALMSUGE        SEE IF MSO SERV UNITS GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK SMO   SERVICE UNITS LE                                 *
***********************************************************************
CKMSULE  L     R15,INMSRV          LOAD MSO   SERVICE UNITS
         A     R15,=F'1023'        ELIMINATE PARTIAL K
         SRA   R15,10              DIVIDE BY 1024 FOR K VALUE
         C     R15,VALMSULE        SEE IF MSO SERV UNITS LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK SRB   SERVICE UNITS GE                                 *
***********************************************************************
CKSSUGE  L     R15,INSSRV          LOAD SRB   SERVICE UNITS
         SRA   R15,10              DIVIDE BY 1024 FOR K VALUE
         C     R15,VALSSUGE        SEE IF SRB SERV UNITS GE PARM VALUE
         BL    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK SRB   SERVICE UNITS LE                                 *
***********************************************************************
CKSSULE  L     R15,INSSRV          LOAD SRB   SERVICE UNITS
         A     R15,=F'1023'        ELIMINATE PARTIAL K
         SRA   R15,10              DIVIDE BY 1024 FOR K VALUE
         C     R15,VALSSULE        SEE IF SRB SERV UNITS LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK VIO PAGES GE                                           *
***********************************************************************
CKVIOGE  CLC   INVIOTOT,VALVIOGE   SEE IF VIO PAGING GE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK VIO PAGES LE                                           *
***********************************************************************
CKVIOLE  CLC   INVIOTOT,VALVIOLE   SEE IF VIO PAGING LE PARM VALUE
         BH    READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK START DAY-OF-THE-WEEK                                  *
***********************************************************************
CKSDAY   LH    R1,INSDAY           LOAD START DAY-OF-WEEK
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         SLL   R1,2                MULTIPLY BY 4
         B     CKSDAY0(R1)         BRANCH TO PROPER ROUTINE FOR DAY
CKSDAY0  B     CKSDAY1             INDEX = 00
         B     CKSDAY2             INDEX = 01
         B     CKSDAY3             INDEX = 02
         B     CKSDAY4             INDEX = 03
         B     CKSDAY5             INDEX = 04
         B     CKSDAY6             INDEX = 05
         B     CKSDAY7             INDEX = 06
CKSDAY1  TM    SDAYSW,SUN          SEE IF SUNDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKSDAY2  TM    SDAYSW,MON          SEE IF MONDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKSDAY3  TM    SDAYSW,TUE          SEE IF TUESDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKSDAY4  TM    SDAYSW,WED          SEE IF WEDNESDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKSDAY5  TM    SDAYSW,THU          SEE IF THURSDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKSDAY6  TM    SDAYSW,FRI          SEE IF FRIDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKSDAY7  TM    SDAYSW,SAT          SEE IF SATURDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK END DAY-OF-THE-WEEK                                    *
***********************************************************************
CKEDAY   LH    R1,INEDAY           LOAD START DAY-OF-WEEK
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         SLL   R1,2                MULTIPLY BY 4
         B     CKEDAY0(R1)         BRANCH TO PROPER ROUTINE FOR DAY
CKEDAY0  B     CKEDAY1             INDEX = 00
         B     CKEDAY2             INDEX = 01
         B     CKEDAY3             INDEX = 02
         B     CKEDAY4             INDEX = 03
         B     CKEDAY5             INDEX = 04
         B     CKEDAY6             INDEX = 05
         B     CKEDAY7             INDEX = 06
CKEDAY1  TM    EDAYSW,SUN          SEE IF SUNDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKEDAY2  TM    EDAYSW,MON          SEE IF MONDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKEDAY3  TM    EDAYSW,TUE          SEE IF TUEEDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKEDAY4  TM    EDAYSW,WED          SEE IF WEDNESDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKEDAY5  TM    EDAYSW,THU          SEE IF THURSDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKEDAY6  TM    EDAYSW,FRI          SEE IF FRIDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
CKEDAY7  TM    EDAYSW,SAT          SEE IF SATURDAY DESIRED
         BNO   READREC             NO, BYPASS RECORD
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*                                                                     *
*        PROCESS THE IRANGE REQUEST.                                  *
*                                                                     *
*        THIS ROUTINE SHOULD BE THE FIRST TO PROCESS THE NEWLY        *
*        CREATED INTERNAL RECORD.  THIS IS BECAUSE THE RECORD         *
*        COULD BE MODIFIED.  IF THE RECORD COVERS A LARGER SPAN       *
*        OF TIME THAN THE IRANGE REQUEST, THE START AND/OR END        *
*        DATES AND TIMES MAY BE CHANGED AND ANY COUNT VALUES          *
*        ADJUSTED BY THE PERCENTAGE OF INTERSECTION OF THE IRANGE     *
*        AND THE RECORD.                                              *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*        GO SEE IF TIME SPAN OF THE RECORD HAS ANY INTERSECTION       *
*        WITH THE SPECIFIED IRANGE VALUES.  IF SO, THE RECORD MAY     *
*        BE ALTERED ACCORDING TO THE PERCENT OVERLAY AND THE          *
*        CORRESPING DATES AND TIMES MAY ALSO BE ALTERED TO REFLECT    *
*        THE INTERSECTION.  IF THE RETURN CODE IS 4, THERE IS NO      *
*        INTERSECTION SO THE RECORD WILL BE BYPASSED.                 *
***********************************************************************
CKIRNG   LR    R1,R14              SAVE REGISTER 14
         BAL   R14,ADJ             GO ADJUST THE RECORD
         LR    R14,R1              RESTORE REGISTER 14
         CH    R15,=H'4'           TEST RETURN CODE
         BE    READREC             RETURN CODE = 4, BYPASS RECORD
***********************************************************************
*        RETURN TO THE CALLER                                         *
***********************************************************************
CKIRNGE  BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        CHECK MISCELLANEOUS SWITCHES                                 *
***********************************************************************
CKMISC   TM    SWITCH+3,SELNOFLU   SEE IF NOFLUSH SPECIFIED
         BNO   CKMISC1             NO, BRANCH
         CLC   INSTPCC(5),=C'FLUSH' SEE IF FLUSHED
         BE    READREC             YES, BYPASS RECORD
CKMISC1  TM    SWITCH+3,SELNOABN   SEE IF NOABEND SPECIFIED
         BNO   CKMISC2             NO, BRANCH
         CLI   INSTPCC,C'S'        SEE IF SYSTEM ABEND
         BE    READREC             YES, BYPASS RECORD
         CLI   INSTPCC,C'U'        SEE IF USER ABEND
         BE    READREC             YES, BYPASS RECORD
CKMISC2  TM    SWITCH+3,SELNOTST   SEE IF NOTEST SPECIFIED
         BNO   CKMISC3             NO, BRANCH
         CLI   INTYPE,C'T'         SEE IF TEST
         BE    READREC             YES, BYPASS RECORD
CKMISC3  TM    SWITCH+3,SELNOPRD   SEE IF NOPROD SPECIFIED
         BNO   CKMISC4             NO, BRANCH
         CLI   INTYPE,C'P'         SEE IF PRODUCTION
         BE    READREC             YES, BYPASS RECORD
CKMISC4  TM    SWITCH+3,SELNOSTC   SEE IF NOSTC SPECIFIED
         BNO   CKMISC5             NO, BRANCH
         CLC   INJNM(3),=C'STC'    SEE IF STARTED TASK
         BE    READREC             YES, BYPASS RECORD
         CLC   INJNM(2),=C'S0'     SEE IF STARTED TASK
         BE    READREC             YES, BYPASS RECORD
CKMISC5  TM    SWITCH+3,SELNOTSU   SEE IF NOTSU SPECIFIED
         BNO   CKMISC6             NO, BRANCH
         CLC   INJNM(3),=C'TSU'    SEE IF TSO USER
         BE    READREC             YES, BYPASS RECORD
         CLC   INJNM(2),=C'T0'     SEE IF TSO USER
         BE    READREC             YES, BYPASS RECORD
CKMISC6  TM    SWITCH+8,SELNOBAT   SEE IF NOBATCH SPECIFIED
         BNO   CKMISC7             NO, BRANCH
         CLC   INJNM(3),=C'JOB'    SEE IF BATCH JOB
         BE    READREC             YES, BYPASS RECORD
         CLC   INJNM(2),=C'J0'     SEE IF BATCH JOB
         BE    READREC             YES, BYPASS RECORD
CKMISC7  BR    R14                 RETURN TO CALLER
         SPACE 3
         LTORG
         SPACE 3
***********************************************************************
*        END OF INPUT FILE                                            *
***********************************************************************
EOF      OI    SWITCH,ENDFILE      TURN ON END-OF-FILE INDICATOR
         SPACE 3
***********************************************************************
*        RETURN TO CALLER                                             *
***********************************************************************
READRET  L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         ST    R5,40(R13)          SAVE REGISTER 5 INTO SAVE AREA
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO SORT FOR LAST TIME
TRTAB    EQU   *-240
         DC    C'0123456789ABCDEF'
         EJECT
***********************************************************************
*                                                                     *
*                              WKDAY                                  *
*                                                                     *
*        DETERMINE THE DAY-OF-WEEK INDEX BASED UPON AN INPUT          *
*        PACKED DECIMAL JULIAN DATE IN THE FORM 0CYYDDDS.             *
*                                                                     *
*        THE DATE WILL FIRST BE CONVERTED TO MONTH, DAY, AND          *
*        YEAR.  THIS WILL THEN BE CONVERTED TO A DAY-OF-WEEK          *
*        INDEX FROM 1 - 7 INDICATING SUN - SAT USING A COMPLEX        *
*        EQUATION.                                                    *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        CONVERT JULIAN DATE TO MONTH, DAY, AND YEAR                  *
*                                                                     *
*        THE INPUT JULIAN DATE IS IN FIELD PJDATE                     *
*        THE OUTPUT DATES WILL BE MMB, DDB, AND YYYYB.                *
*                                                                     *
***********************************************************************
WKDAY    ST    R14,WKDAYRET        SAVE RETURN ADDRESS
         TM    PJDATE+1,X'01'      SEE IF ODD YEAR
         BO    WKDAY1              YES, NOT LEAP YEAR
         TM    PJDATE+1,X'12'      MAGIC LEAP YEAR MASK
         BM    WKDAY1              MIXED, NOT LEAP YEAR
         MVC   MDAYTBL+2(2),=H'29' SET FEB TO 29 DAYS
WKDAY1   LA    R2,12               SET LOOP COUNTER
         LA    R3,1                SET MONTH COUNTER
         ZAP   DBL,PJDATE+2(2)     MOVE JULIAN DAY TO WORK
         CVB   R1,DBL              CONVERT DAY TO BINARY
         LA    R15,MDAYTBL         LOAD ADDR OF DAY OF THE MONTH TABLE
WKDAY2   CH    R1,0(R15)           SEE IF DAYS GT DAYS IN THIS MONTH
         BNH   WKDAY3              NO, DONE
         SH    R1,0(R15)           SUBTRACT DAYS IN THIS MONTH FROM TOT
         LA    R3,1(,R3)           ADD 1 TO MONTH COUNTER
         LA    R15,2(,R15)         INCREMENT TO NEXT ENTRY IN DAY TABLE
         BCT   R2,WKDAY2           LOOP
WKDAY3   STH   R3,MMB              SAVE MONTH
         STH   R1,DDB              SAVE DAY
         CLI   PJDATE,X'19'        SEE IF 20TH CENTURY
         BE    WKDAY5              YES, GET OUT
         CLI   PJDATE,X'20'        SEE IF 21ST CENTURY
         BE    WKDAY5              YES, GET OUT
         SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,PJDATE          LOAD '0C' CENTURY INDICATOR
         MVI   PJDATE,X'19'        ASSUME 20TH CENTURY
         LTR   R15,R15             TEST '0C' CENTRY INDICATOR
         BZ    WKDAY5              ZERO, 19..
         MVI   PJDATE,X'20'        NOT ZERO, 21ST CENTURY
WKDAY5   MVO   DBL,PJDATE(2)       MOVE YEAR TO WORK
         CVB   R1,DBL              CONVERT YEARS TO BINARY
         STH   R1,YYYYB            SAVE YEAR
         EJECT
***********************************************************************
*                                                                     *
*        CALCULATE THE DAY-OF-WEEK INDEX                              *
*                                                                     *
*        THE INPUT FIELDS ARE MMB, DDB, AND YYYYB                     *
*        THE OUTPUT DAY OF THE WEEK WILL BE DAYOFWK                   *
*                                                                     *
*        N = D + 2M + 3(M+1)/5 + Y + Y/4 - Y/100 + Y/400 + 2          *
*                                                                     *
*        WHERE M = 3-14 (JAN AND FEB ARE 13 AND 14 OF Y-1)            *
*                                                                     *
*        N/7 LEAVES REMAINDER 0-6, 0 INDICATING SATURDAY              *
*                                                                     *
*        IF REMAINDER 0 - CHANGE TO 7 FOR ACCURATE DAY INDEX          *
*                                                                     *
***********************************************************************
WKDAY6   LH    R1,DDB              SET N = D
         SPACE
         LH    R15,YYYYB           GET Y
         LH    R14,MMB             GET M
         CH    R14,=H'2'           SEE IF JAN OR FEB
         BH    WKDAY9              NO, BRANCH
         BE    WKDAY7              GO PROCESS FEB
         LA    R14,13              SET M = 13 FOR JAN
         B     WKDAY8              GO REDEFINE Y
WKDAY7   LA    R14,14              SET M = 14 FOR FEB
WKDAY8   BCTR  R15,0               SET Y = Y-1
WKDAY9   LR    R0,R14              COPY M
         ALR   R0,R0               GET 2M
         ALR   R1,R0               SET N= N + 2M
         SPACE
         LR    R0,R15              SAVE REDEFINED Y
         LA    R14,1(,R14)         GET M+1
         MH    R14,=H'3'           GET 3(M+1)
         SRDL  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,=F'5'           GET 3(M+1)/5 IN R15
         ALR   R1,R15              SET N = N + 3(M+1)/5
         SPACE
         LR    R15,R0              GET Y
         ALR   R1,R15              SET N = N + Y
         SPACE
         SLR   R14,R14             ZERO EVEN REG OF PAIR
         D     R14,=F'4'           GET Y/4
         ALR   R1,R15              SET N = N + Y/4
         SPACE
         LR    R15,R0              GET Y
         SLR   R14,R14             ZERO EVEN REG OF PAIR
         D     R14,=F'100'         GET Y/100
         SLR   R1,R15              SET N = N - Y/100
         SPACE
         LR    R15,R0              GET Y
         SLR   R14,R14             ZERO EVEN REG OF PAIR
         D     R14,=F'400'         GET Y/400
         ALR   R1,R15              SET N = N + Y/400
         SPACE
         LA    R15,2               GET 2
         ALR   R1,R15              SET N = N + 2
         SPACE
         SLR   R0,R0               ZERO EVEN REG OF PAIR
         D     R0,=F'7'            SET N = N/7
         SPACE
         LTR   R1,R0               TEST REMAINDER
         BNZ   WKDAY10             NOT ZERO, CONTINUE
         LA    R1,7                ZERO, SET TO 7
         EJECT
WKDAY10  STH   R1,DAYOFWK          SAVE DAY-OF-WEEK
***********************************************************************
*        RETURN TO CALLER                                             *
***********************************************************************
         L     R14,WKDAYRET        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*        DAY-PER-MONTH TABLE FOR JULIAN DATE CONVERT ROUTINE          *
***********************************************************************
MDAYTBL  DS    0H
         DC    H'31'
         DC    H'28'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DROP  R5                  DROP ADDRESSABILITY TO SMF RECORD
         EJECT
***********************************************************************
*                                                                     *
*                               ADJ                                   *
*                                                                     *
*            ADJUST THE RECORD BASED UPON INCLUSIVE RANGE             *
*                                                                     *
*        THIS ROUTINE WILL ADJUST THE "INTERNAL" RECORD BASED         *
*        UPON A SPECIFIED INCLUSIVE DATE/TIME RANGE.  IT WILL         *
*        DETERMINE THE PERCENT OF THE RECORD THAT APPLIED TO          *
*        THE SPECIFIED RANGE AND ADJUST THE RECORD BASED              *
*        UPON THAT PERCENT                                            *
*                                                                     *
*        EACH SMF RECORD HAS, EFFECTIVELY, A START DATE AND           *
*        TIME AND AN END DATE AND TIME.  ALL, NONE, OR PART           *
*        OF THIS DATE AND TIME RANGE MAY FALL WITH A SPECIFIED        *
*        INCLUSIVE RANGE.  THIS ROUTINE WILL CALCULATE THE            *
*        PERCENTAGE, 0 - 100%, THAT THE SMF 30 RECORD FALLS           *
*        WITHIN THE INCLUSIVE RANGE AND ADJUST ALL OF THE             *
*        VALUES IN THE SMF 30 RECORD TO REFLECT THIS PERCENTAGE.      *
*                                                                     *
*                                                                     *
*        THE LOGIC OF THIS ADJUSTMENT IS AS FOLLOWS:                  *
*                                                                     *
*        1)  IF THE START OF THE RECORD IS AFTER THE END OF           *
*            THE INCLUSIVE RANGE, IGNORE THE RECORD (RC=4)            *
*                                                                     *
*        2)  IF THE END OF THE RECORD IS BEFORE THE START OF          *
*            THE INCLUSIVE RANGE, IGNORE THE RECORD (RC=4)            *
*                                                                     *
*        3)  IF THE START OF THE RECORD IS AFTER THE START OF         *
*            THE INCLUSIVE RANGE AND THE END OF THE RECORD            *
*            IS BEFORE THE END OF THE INCLUSIVE RANGE, DO             *
*            NOT ADJUST THE RECORD (RC=0)                             *
*                                                                     *
*        4)  IF THE START OF THE RECORD IS BEFORE THE START OF        *
*            THE INCLUSIVE RANGE:                                     *
*                                                                     *
*            CALCULATE THE INTERVAL BETWEEN THE START OF THE          *
*            RECORD AND THE START OF THE INCLUSIVE RANGE              *
*                                                                     *
*            SAVE THAT INTERVAL AS A DECR-1                           *
*                                                                     *
*            RESET THE START OF THE RECORD TO THE START DATE          *
*            AND TIME OF THE RANGE                                    *
*                                                                     *
*        5)  IF THE END OF THE RECORD IS AFTER THE END OF THE         *
*            INCLUSIVE RANGE:                                         *
*                                                                     *
*            CALCULATE THE INTERVAL BETWEEN THE END OF THE            *
*            INCLUSIVE RANGE AND THE END OF THE RECORD                *
*                                                                     *
*            SAVE THAT INTERVAL AS A DECR-2                           *
*                                                                     *
*            RESET THE END OF THE RECORD TO THE END DATE              *
*            AND TIME OF THE RANGE                                    *
*                                                                     *
*        6)  CALCULATE THE PERCENT-ADJUSTMENT AS FOLLOWS:             *
*                                                                     *
*            100 - (((DECR-1 + DECR-2) * 100) / RECORD-INCR)          *
*                                                                     *
*        7)  ADJUST ALL OF THE COUNTS IN THE RECORD BY THE            *
*            PERCENT-ADJUSTMENT (RC=0)                                *
*                                                                     *
*                                                                     *
*                                                                     *
*        REGISTER 15 ON RETURN TO THE CALLER WILL CONTAIN THE         *
*        RETURN CODE FROM ADJUSTMENT.  THE RETURN CODES ARE           *
*        AS FOLLOWS:                                                  *
*                                                                     *
*         0 - ADJUSTMENT WAS SUCCESSFUL                               *
*                                                                     *
*         4 - RECORD WAS OUTSIDE OF THE SPECIFIED INCLUSIVE           *
*             RANGE                                                   *
*                                                                     *
***********************************************************************
ADJ      STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE7           LOAD ADDR OF NEW SAVE AREA
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         SPACE 3
***********************************************************************
*        IF THE START OF THE RECORD IS AFTER THE END OF THE           *
*        INCLUSIVE RANGE, BYPASS THE RECORD                           *
***********************************************************************
ADJ01    CP    INSJDATE,IREDATE    SEE IF RECORD SDATE AFTER INT EDATE
         BH    ADJRC4              YES, BYPASS RECORD
         BL    ADJ02               BEFORE, OK
         CLC   INSTIME,IRETIME     SEE IF RECORD STIME AFTER INT ETIME
         BH    ADJRC4              YES, BYPASS RECORD
         SPACE 3
***********************************************************************
*        IF THE END OF THE RECORD IS BEFORE THE START OF THE          *
*        INCLUSIVE RANGE, BYPASS THE RECORD                           *
***********************************************************************
ADJ02    CP    INEJDATE,IRSDATE    SEE IF RECORD EDATE BEFORE INT SDATE
         BL    ADJRC4              YES, BYPASS RECORD
         BH    ADJ03               AFTER, OK
         CLC   INETIME,IRSTIME     SEE IF RECORD ETIME BEFORE INT STIME
         BL    ADJRC4              YES, BYPASS RECORD
         SPACE 3
***********************************************************************
*        IF THE START OF THE RECORD IS AFTER THE START OF THE         *
*        INCLUSIVE RANGE AND THE END OF THE RECORD IS BEFORE THE      *
*        END OF THE INCLUSIVE RANGE, DO NOT ADJUST THE RECORD         *
***********************************************************************
ADJ03    CP    INSJDATE,IRSDATE    SEE IF RECORD SDATE AFTER INT SDATE
         BL    ADJ04               NO, GO ADJUST RECORD
         BH    ADJ03A              YES, CONTINUE
         CLC   INSTIME,IRSTIME     SEE IF RECORD STIME AFTER INT STIME
         BL    ADJ04               NO, GO ADJUST RECORD
ADJ03A   CP    INEJDATE,IREDATE    SEE IF RECORD EDATE BEFORE INT EDATE
         BH    ADJ04               NO, GO ADJUST RECORD
         BL    ADJRC0              YES, DO NOT ADJUST RECORD
         CLC   INETIME,IRETIME     SEE IF RECORD ETIME BEFORE INT ETIME
         BL    ADJRC0              YES, DO NOT ADJUST RECORD
         SPACE 3
***********************************************************************
*        AT THIS POINT, SOME OF THE RECORD INTERVAL FALLS WITHIN      *
*        THE IRANGE SPECIFIED.  ADJUSTMENTS ARE NEEDED.               *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        IF THE START OF THE RECORD IS BEFORE THE START OF THE        *
*        INCLUSIVE RANGE:                                             *
*                                                                     *
*        1)  CALCULATE THE INTERVAL BETWEEN THE START OF THE          *
*            RECORD AND THE START OF THE INCLUSIVE RANGE              *
*                                                                     *
*        2)  SAVE THAT INTERVAL AS DECR-1                             *
*                                                                     *
*        3)  RESET THE START DATE AND TIME TO THE START DATE          *
*            AND TIME OF THE INCLUSIVE RANGE                          *
*                                                                     *
***********************************************************************
ADJ04    ZAP   DECR1,=P'0'         SET DECR-1 TO ZERO
         CP    INSJDATE,IRSDATE    SEE IF RECORD SDATE BEFORE INT SDATE
         BH    ADJ05               NO, GO CHECK END DATE AND TIME
         BL    ADJ04A              YES, GO ADJUST START OF RECORD
         CLC   INSTIME,IRSTIME     SEE IF RECORD STIME BEFORE INT STIME
         BH    ADJ05               NO, GO CHECK END DATE AND TIME
ADJ04A   MVC   CINSDT,INSJDATE     SET START DATE
         MVC   CINSTM,INSTIME      SET START TIME
         MVC   CINEDT,IRSDATE      SET END   DATE
         MVC   CINETM,IRSTIME      SET END   TIME
         L     R15,=V(CELAP)       LOAD ADDRESS OF ELAP TIME CALC RTN
         BALR  R14,R15             CALL ELAPSED TIME CALCULATION RTN
         MVC   DECR1,COUTEL        SAVE CALCULATED ELAPSED TIME
         MVC   INSJDATE,IRSDATE    RESET START OF RECORD TO INTERVAL
         MVC   INSTIME,IRSTIME     RESET START OF RECORD TO INTERVAL
         SPACE 3
***********************************************************************
*                                                                     *
*        IF THE END OF THE RECORD IS AFTER THE END OF THE             *
*        INCLUSIVE RANGE:                                             *
*                                                                     *
*        1)  CALCULATE THE INTERVAL BETWEEN THE END OF THE            *
*            INCLUSIVE RANGE AND THE END OF THE RECORD                *
*                                                                     *
*        2)  SAVE THAT INTERVAL AS DECR-2                             *
*                                                                     *
*        3)  RESET THE END DATE AND TIME TO THE END DATE              *
*            AND TIME OF THE INCLUSIVE RANGE                          *
*                                                                     *
***********************************************************************
ADJ05    ZAP   DECR2,=P'0'         SET DECR-2 TO ZERO
         CP    IREDATE,INEJDATE    SEE IF INT EDATE BEFORE RECORD EDATE
         BH    ADJ06               NO, GO CALCULATE ADJUSTMENT PCT
         BL    ADJ05A              YES, GO ADJUST END OF RECORD
         CLC   IRETIME,INETIME     SEE IF INT ETIME BEFORE RECORD ETIME
         BH    ADJ06               NO, GO CALCULATE ADJUSTMENT PCT
ADJ05A   MVC   CINSDT,IREDATE      SET START DATE
         MVC   CINSTM,IRETIME      SET START TIME
         MVC   CINEDT,INEJDATE     SET END   DATE
         MVC   CINETM,INETIME      SET END   TIME
         L     R15,=V(CELAP)       LOAD ADDRESS OF ELAP TIME CALC RTN
         BALR  R14,R15             CALL ELAPSED TIME CALCULATION RTN
         MVC   DECR2,COUTEL        SAVE CALCULATED ELAPSED TIME
         MVC   INEJDATE,IREDATE    RESET END OF RECORD TO INTERVAL
         MVC   INETIME,IRETIME     RESET END OF RECORD TO INTERVAL
         SPACE 3
***********************************************************************
*                                                                     *
*        CALCULATE THE PERCENT-ADJUSTMENT AS FOLLOWS:                 *
*                                                                     *
*        100 - (((DECR-1 + DECR-2) * 100) / RECORD-INCR)              *
*                                                                     *
*        BECAUSE DECR-1 AND DECR-2 ARE IN HUNDRETHS OF A SECOND       *
*        THAT HAVE ALREADY EFFECTIVELY BEEN MULTIPLIED BY 100.        *
*        RECORD-INCR WILL HAVE TO BE ADJUSTED TO SECONDS RATHER       *
*        THAN SEC/100.                                                *
*                                                                     *
*        THIS EFFECTIVELY CHANGES THE EQUASION TO:                    *
*                                                                     *
*        100 - ((DECR-1 + DECR-2)  / (RECORD-INCR/100))               *
*                                                                     *
***********************************************************************
ADJ06    CLC   INELAP,=F'100'      SEE IF ELAPSED TIME AT LEAST 1 SEC
         BL    ADJRC0              NO, NOT WORTH ADJUSTING
         L     R14,INELAP          LOAD ELAPSED TIME
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         MH    R15,=H'10'          MULTIPLY BY 10 FOR ROUNDING
         D     R14,=F'100'         DIVIDE BY 100
         AH    R15,=H'5'           ADD ROUNDING FACTOR
         SLR   R14,R14             CLEAR REG 14
         D     R14,=F'10'          MAKE ROUNDED
         ST    R15,FWORK1          SAVE ELAP/100
         L     R14,DECR1           SAVE FIRST ADJUSTMENT
         A     R14,DECR2           ADD SECOND ADJUSTMENT
         LTR   R14,R14             TEST TOTAL ADJUSTMENT
         BZ    ADJRC0              ZERO, NO ADJUSTMENT
         SRDA  R14,32              SHIFT TO ODD REG OF PAIR
         D     R14,FWORK1          DIVIDE BY ELAP/100
         ST    R15,FWORK2          SAVE THIS VALUE
         L     R14,=F'100'         LOAD 100
         S     R14,FWORK2          FINISH THE CALCULATION
         ST    14,ADJPCT           SAVE ADJUSTMENT PERCENT
         LTR   R14,R14             TEST ADJUSTMENT PERCENT
         BZ    ADJRC4              ZERO EFFECTIVELY CLEARS THE RECORD
***********************************************************************
*                                                                     *
*        ADJUST ALL OF THE COUNTS IN THE RECORD BY THE                *
*        PERCENT-ADJUSTMENT                                           *
*                                                                     *
***********************************************************************
ADJ07    MVC   PJDATE,INSJDATE     SAVE START DATE
         BAL   R14,WKDAY           GO GET DAY-OF-WEEK
         MVC   INSDAY,DAYOFWK      SAVE START DAY-OF-WEEK
         MVC   PJDATE,INEJDATE     SAVE END DATE
         BAL   R14,WKDAY           GO GET DAY-OF-WEEK
         MVC   INEDAY,DAYOFWK      SAVE END DAY-OF-WEEK
         MVC   CINSDT,INSJDATE     SET START DATE
         MVC   CINSTM,INSTIME      SET START TIME
         MVC   CINEDT,INEJDATE     SET END   DATE
         MVC   CINETM,INETIME      SET END   TIME
         L     R15,=V(CELAP)       LOAD ADDRESS OF ELAP TIME CALC RTN
         BALR  R14,R15             CALL ELAPSED TIME CALCULATION RTN
         MVC   INELAP,COUTEL       SAVE CALCULATED ELAPSED TIME
         CALL  DATERTN,(JG,INSJDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   INSGDATE,DATEGREG   SAVE START GREGORIAN DATE
         CALL  DATERTN,(JG,INEJDATE,DATEGREG) CONVERT TO GREGORIAN
         MVC   INEGDATE,DATEGREG   SAVE START GREGORIAN DATE
         MVC   ADJPIN,INTEP        SET FIELD VALUE
         BAL   R14,ADJP            GO ADJUST BY ADJ PERCENT
         MVC   INTEP,ADJPOUT       RESET FIELD
         MVC   ADJPIN,INTOTCPU     SET FIELD VALUE
         BAL   R14,ADJP            GO ADJUST BY ADJ PERCENT
         MVC   INTOTCPU,ADJPOUT    RESET FIELD
         MVC   ADJPIN,INZAACPU     SET FIELD VALUE
         BAL   R14,ADJP            GO ADJUST BY ADJ PERCENT
         MVC   INZAACPU,ADJPOUT    RESET FIELD
         MVC   ADJPIN,INZIICPU     SET FIELD VALUE
         BAL   R14,ADJP            GO ADJUST BY ADJ PERCENT
         MVC   INZIICPU,ADJPOUT    RESET FIELD
         MVC   ADJPIN,INSPECPU     SET FIELD VALUE
         BAL   R14,ADJP            GO ADJUST BY ADJ PERCENT
         MVC   INSPECPU,ADJPOUT    RESET FIELD
         MVC   ADJPIN,INTPR        SET FIELD VALUE
         BAL   R14,ADJP            GO ADJUST BY ADJ PERCENT
         MVC   INTPR,ADJPOUT       RESET FIELD
         MVC   ADJPIN,INPTM        SET FIELD VALUE
         BAL   R14,ADJP            GO ADJUST BY ADJ PERCENT
         MVC   INMNTS,ADJPOUT      RESET FIELD
         MVC   ADJPIN,INEXPTOT     SET FIELD VALUE
         BAL   R14,ADJP            GO ADJUST BY ADJ PERCENT
         MVC   INEXPTOT,ADJPOUT    RESET FIELD
         MVC   ADJPIN,INAUXTOT     SET FIELD VALUE
         BAL   R14,ADJP            GO ADJUST BY ADJ PERCENT
         MVC   INAUXTOT,ADJPOUT    RESET FIELD
         MVC   ADJPIN,INTSRV       SET FIELD VALUE
         BAL   R14,ADJP            GO ADJUST BY ADJ PERCENT
         MVC   INTSRV,ADJPOUT      RESET FIELD
         MVC   ADJPIN,INVIOTOT     SET FIELD VALUE
         BAL   R14,ADJP            GO ADJUST BY ADJ PERCENT
         MVC   INVIOTOT,ADJPOUT    RESET FIELD
         EJECT
***********************************************************************
*                                                                     *
*        RETURN TO CALLER                                             *
*                                                                     *
***********************************************************************
ADJRC0   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         RETURN (14,12),RC=0       RETURN TO CALLER WITH RC=0
         SPACE 3
ADJRC4   L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         RETURN (14,12),RC=4       RETURN TO CALLER WITH RC=4
         SPACE 3
***********************************************************************
*                                                                     *
*                               ADJP                                  *
*                                                                     *
*            ADJUST THE VALUE OF FULLWORD FIELD ADJPIN BY             *
*            THE PERCENT VALUE FOUND IN FIELD ADJPCT AND              *
*            STORE THE RESULT IN FIELD ADJPOUT.                       *
*                                                                     *
***********************************************************************
ADJP     ST    R14,SAVE8           SAVE RETURN ADDRESS
         SPACE 3
***********************************************************************
*        ADJPOUT = ((ADJPIN * ADJPCT) / 100)                          *
***********************************************************************
ADJP1    L     R14,ADJPIN           LOAD ORIGINAL VALUE
         SRDA  R14,32               SHIFT TO ODD REGISTER OF PAIR
         M     R14,ADJPCT           MULTIPLY BY ADJ PERCENT
         SLR   R14,R14              CLEAR GET 14
         D     R14,=F'100'          MAKE TRUE PERCENT
         ST    R15,ADJPOUT          SAVE ADJUSTED FIELD
         EJECT
***********************************************************************
*        RETURN TO CALLER                                             *
***********************************************************************
ADJPR    L     R14,SAVE8           RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         EJECT
SAVE7    DS    18F
SAVE8    DS    F
         LTORG
         EJECT
         SPACE 3
         DROP  R9,R10,R11,R12
         EJECT
***********************************************************************
*                                                                     *
*                              CKSEQ                                  *
*                                                                     *
*        THIS ROUTINE WILL CHECK THE SUBTOTAL SEQUENCE FOR THE        *
*        CURRENT RECORD AS COMPARED TO THE PREVIOUS RECORD.           *
*        IF THE RECORDS HAVE THE SAME SEQUENCE THEN THE RETURN        *
*        CODE WILL BE SET TO 0.  OTHERWISE THE RETURN CODE WILL       *
*        BE SET TO A VALUE OF 1 TO 4 BASED UPON WHICH SEQUENCE        *
*        FIELD HAS CHANGED WHERE 1 INDICATES THE FIRST FIELD          *
*        ON THE SUBTOTAL STATEMENT AND 4 WOULD INDICATE THE           *
*        FOURTH (LAST).                                               *
*                                                                     *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14         *
*                                                                     *
***********************************************************************
CKSEQ    CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING CKSEQ,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE9           LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
*        MOVE THE APPROPRIATE FIELD FROM THE CURRENT RECORD           *
*        TO THE DEFINED SEQUENCE FIELDS.                              *
*                                                                     *
***********************************************************************
CKSEQ1   LA    R1,SUBTOPT          LOAD ADDRESS OF SUBTOTAL OPTIONS
         TM    SWITCH+8,SELSUBT    SEE IF SUBTOTALS REQUESTED
         BNO   CKSEQRC0            NO, GET OUT WITH RC=0
         LA    R2,CURRFLDS         POINT TO CURRENT FIELDS
CKSEQ2   CLI   0(R1),X'FF'         PHYSICAL END OF TABLE
         BE    CKSEQ5              YES, BRANCH
         CLI   0(R1),X'00'         SEE IF EMPTY ENTRY
         BE    CKSEQ5              YES, END OF SAVE PROCESS
         LH    R15,2(R1)           LOAD BRANCH TABLE OFFSET
         B     CKSEQ3(R15)         BRANCH TO PROPER ROUTINE BY INDEX
CKSEQ3   B     SEQJOBNM            INDEX = 00
         B     CKSEQ4              INDEX = 04
         B     CKSEQ4              INDEX = 08
         B     CKSEQ4              INDEX = 12
         B     SEQSYSID            INDEX = 16
         B     CKSEQ4              INDEX = 20
         B     CKSEQ4              INDEX = 24
         B     SEQPGM              INDEX = 28
         B     SEQUSER             INDEX = 32
         B     CKSEQ4              INDEX = 36
         B     CKSEQ4              INDEX = 40
         B     CKSEQ4              INDEX = 44
         B     CKSEQ4              INDEX = 48
         B     CKSEQ4              INDEX = 52
         B     CKSEQ4              INDEX = 56
         B     CKSEQ4              INDEX = 60
         B     CKSEQ4              INDEX = 64
         B     CKSEQ4              INDEX = 68
         B     CKSEQ4              INDEX = 72
         B     CKSEQ4              INDEX = 76
         B     CKSEQ4              INDEX = 80
         B     CKSEQ4              INDEX = 84
         B     CKSEQ4              INDEX = 88
         B     CKSEQ4              INDEX = 92
         B     CKSEQ4              INDEX = 96
         B     CKSEQ4              INDEX = 100
         B     CKSEQ4              INDEX = 104
         B     CKSEQ4              INDEX = 108
         B     CKSEQ4              INDEX = 112
         B     CKSEQ4              INDEX = 116
         B     CKSEQ4              INDEX = 120
         B     CKSEQ4              INDEX = 124
         B     CKSEQ4              INDEX = 128
         B     CKSEQ4              INDEX = 132
         B     CKSEQ4              INDEX = 136
         B     CKSEQ4              INDEX = 140
         B     CKSEQ4              INDEX = 144
         B     CKSEQ4              INDEX = 148
         B     CKSEQ4              INDEX = 152
         B     CKSEQ4              INDEX = 156
         B     CKSEQ4              INDEX = 160
         B     CKSEQ4              INDEX = 164
         B     CKSEQ4              INDEX = 168
         B     CKSEQ4              INDEX = 172
         B     CKSEQ4              INDEX = 176
         B     CKSEQ4              INDEX = 180
         B     CKSEQ4              INDEX = 184
         B     CKSEQ4              INDEX = 188
         B     CKSEQ4              INDEX = 192
         B     CKSEQ4              INDEX = 196
         B     CKSEQ4              INDEX = 200
         B     CKSEQ4              INDEX = 204
         B     CKSEQ4              INDEX = 208
         B     CKSEQ4              INDEX = 212
         B     CKSEQ4              INDEX = 216
         B     CKSEQ4              INDEX = 220
         B     CKSEQ4              INDEX = 224
         B     CKSEQ4              INDEX = 228
         B     CKSEQ4              INDEX = 232
         B     CKSEQ4              INDEX = 236
         B     CKSEQ4              INDEX = 240
         B     CKSEQ4              INDEX = 244
         B     CKSEQ4              INDEX = 248
         B     SEQSDAY             INDEX = 252
         B     CKSEQ4              INDEX = 256
         B     CKSEQ4              INDEX = 260
         B     CKSEQ4              INDEX = 264
         B     CKSEQ4              INDEX = 268
         B     SEQEDAY             INDEX = 272
         B     SEQSGDTE            INDEX = 276
         B     SEQEGDTE            INDEX = 280
         B     CKSEQ4              INDEX = 284
         B     CKSEQ4              INDEX = 288
         B     CKSEQ4              INDEX = 292
         B     CKSEQ4              INDEX = 296
         B     CKSEQ4              INDEX = 300
         B     CKSEQ4              INDEX = 304
         B     CKSEQ4              INDEX = 308
         B     SEQSHOUR            INDEX = 312
         B     SEQEHOUR            INDEX = 316
         B     CKSEQ4              INDEX = 320
         B     CKSEQ4              INDEX = 324
         B     CKSEQ4              INDEX = 328
         B     CKSEQ4              INDEX = 332
         B     CKSEQ4              INDEX = 336
         B     CKSEQ4              INDEX = 340
CKSEQ4   LA    R1,4(,R1)           INCREMENT TO NEXT TABLE ENTRY
         B     CKSEQ2              LOOP
CKSEQ5   CLC   CURRFLDS(40),PREVFLDS SEE IF SEQUENCE HAS CHANGED
         BE    CKSEQRC0            NO, GET OUT WITH RC=0
         CLC   PREVFLDS(40),BLANKS SEE IF FIRST ENTRY
         BE    CKSEQRC0            YES, NOT REALLY A CHANGE OF SEQ
CKSEQ6   LA    R15,1               SET TO FIRST SUBTOTAL FIELD
         CLC   PREVFLD1,CURRFLD1   SEE IF MATCH ON SUBTOTAL 1
         BNE   CKSEQEND            NO, EXIT WITH RC=1
         LA    R15,2               SET TO SECOND SUBTOTAL FIELD
         CLC   PREVFLD2,CURRFLD2   SEE IF MATCH ON SUBTOTAL 2
         BNE   CKSEQEND            NO, EXIT WITH RC=2
         LA    R15,3               SET TO THIRD SUBTOTAL FIELD
         CLC   PREVFLD3,CURRFLD3   SEE IF MATCH ON SUBTOTAL 3
         BNE   CKSEQEND            NO, EXIT WITH RC=3
         LA    R15,4               SET TO FOURTH SUBTOTAL FIELD
         B     CKSEQEND            EXIT WITH RC=4
         EJECT
CKSEQRC0 LA    R15,0               SEQ RETURN CODE TO 0
CKSEQEND L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         L     R14,12(R13)         RESTORE
         LM    R0,R12,20(R13)      RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO SORT FOR LAST TIME
***********************************************************************
*        SAVE JOB NAME                                                *
***********************************************************************
SEQJOBNM MVC   0(10,R2),BLANKS     BLANK THE SEQUENCE FIELD
         LA    R3,OJOBNAME         POINT TO JOBNAME
         AH    R3,SUBTJOBO         ADD JOBNAME OFFSET VALUE
         LH    R4,SUBTJOBL         LOAD JOBNAME LENGTH VALUE
         EX    R4,SAVSEQJB         SAVE JOBNAME (OR PIECE)
         LA    R2,10(,R2)          INCREMENT TO NEXT SEQUENCE FIELD
         B     CKSEQ4              CONTINUE
***********************************************************************
*        SAVE START DATE                                              *
***********************************************************************
SEQSGDTE MVC   0(10,R2),BLANKS     BLANK THE SEQUENCE FIELD
         MVC   0(10,R2),OGSDATE    SAVE START DATE
         LA    R2,10(,R2)          INCREMENT TO NEXT SEQUENCE FIELD
         B     CKSEQ4              CONTINUE
***********************************************************************
*        SAVE END DATE                                                *
***********************************************************************
SEQEGDTE MVC   0(10,R2),BLANKS     BLANK THE SEQUENCE FIELD
         MVC   0(10,R2),OGEDATE    SAVE START DATE
         LA    R2,10(,R2)          INCREMENT TO NEXT SEQUENCE FIELD
         B     CKSEQ4              CONTINUE
***********************************************************************
*        SAVE START HOUR                                              *
***********************************************************************
SEQSHOUR MVC   0(10,R2),BLANKS     BLANK THE SEQUENCE FIELD
         MVC   0(02,R2),OSTIME     SAVE START HOUR
         LA    R2,10(,R2)          INCREMENT TO NEXT SEQUENCE FIELD
         B     CKSEQ4              CONTINUE
***********************************************************************
*        SAVE END HOUR                                                *
***********************************************************************
SEQEHOUR MVC   0(10,R2),BLANKS     BLANK THE SEQUENCE FIELD
         MVC   0(02,R2),OETIME     SAVE END HOUR
         LA    R2,10(,R2)          INCREMENT TO NEXT SEQUENCE FIELD
         B     CKSEQ4              CONTINUE
***********************************************************************
*        SAVE SYSTEM ID                                               *
***********************************************************************
SEQSYSID MVC   0(10,R2),BLANKS     BLANK THE SEQUENCE FIELD
         MVC   0(04,R2),OSYSID     SAVE SYSTEM ID
         LA    R2,10(,R2)          INCREMENT TO NEXT SEQUENCE FIELD
         B     CKSEQ4              CONTINUE
***********************************************************************
*        SAVE START DAY                                               *
***********************************************************************
SEQSDAY  MVC   0(10,R2),BLANKS     BLANK THE SEQUENCE FIELD
         MVC   0(03,R2),OSDAY      SAVE START DAY
         LA    R2,10(,R2)          INCREMENT TO NEXT SEQUENCE FIELD
         B     CKSEQ4              CONTINUE
***********************************************************************
*        SAVE END DAY                                                 *
***********************************************************************
SEQEDAY  MVC   0(10,R2),BLANKS     BLANK THE SEQUENCE FIELD
         MVC   0(03,R2),OEDAY      SAVE END DAY
         LA    R2,10(,R2)          INCREMENT TO NEXT SEQUENCE FIELD
         B     CKSEQ4              CONTINUE
***********************************************************************
*        SAVE USERID                                                  *
***********************************************************************
SEQUSER  MVC   0(10,R2),BLANKS     BLANK THE SEQUENCE FIELD
         MVC   0(08,R2),OUSERID    SAVE USERID
         LA    R2,10(,R2)          INCREMENT TO NEXT SEQUENCE FIELD
         B     CKSEQ4              CONTINUE
***********************************************************************
*        SAVE PROGRAM NAME                                            *
***********************************************************************
SEQPGM   MVC   0(10,R2),BLANKS     BLANK THE SEQUENCE FIELD
         MVC   0(08,R2),OPGMNM     SAVE PROGRAM NAME
         LA    R2,10(,R2)          INCREMENT TO NEXT SEQUENCE FIELD
         B     CKSEQ4              CONTINUE
SAVSEQJB MVC   0(0,R2),0(R3)       **** EXECUTE ONLY ****
***********************************************************************
*        CONTANTS AND WORK AREA                                       *
***********************************************************************
         SPACE 3
         LTORG
SAVE9    DS    18F                 ROUTINE SAVE AREA
         EJECT
***********************************************************************
*                                                                     *
*                           PTOTALN                                   *
*                                                                     *
*        FORMAT THE TOTALS OR SUBTOTALS ALONG WITH THEIR ASSOCIATED   *
*        AVERAGES IN THE ORDER IN WHICH THE FIELDS WERE PRINTED.      *
*        IF A FIELD WAS NOT PRINTED, NO TOTALS WERE KEPT, SO NO       *
*        TOTALS OR AVERAGES WILL BE PRINTED.                          *
*                                                                     *
*        REGISTER 1 ON ENTRY GIVES THE NUMBER OF SUBTOTAL             *
*        FIELDS TO DISPLAY                                            *
*                                                                     *
***********************************************************************
PTOTALN  CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING PTOTALN,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE11          LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         L     R6,=V(ACCUM)        POINT TO ACCUMULATORS
         USING ACCUM,R6            SET ADDRESSABILITY TO ACCUMULATORS
         LR    R2,R1               SAVE NUMBER OF SUBTOTAL FIELDS
         B     PACC1               GO PRINT NUMBER OF SELECTED STEPS
TOTLINE  L     R2,=V(PRTOPT)       LOAD ADDRESS OF PRINT OPTIONS
TOTLINE1 CLI   0(R2),X'FF'         PHYSICAL END OF TABLE
         BE    TOTLINE4            YES, BRANCH
         CLI   0(R2),C'N'          LOGICAL END OF TABLE
         BE    TOTLINE4            YES, BRANCH
         LH    R15,4(R2)           LOAD BRANCH TABLE OFFSET
         B     TOTLINE2(R15)       BRANCH TO PROPER ROUTINE BY INDEX
TOTLINE2 B     TOTLINE3            INDEX = 00
         B     TOTLINE3            INDEX = 04
         B     TOTLINE3            INDEX = 08
         B     TOTLINE3            INDEX = 12
         B     TOTLINE3            INDEX = 16
         B     TOTLINE3            INDEX = 20
         B     TOTLINE3            INDEX = 24
         B     TOTLINE3            INDEX = 28
         B     TOTLINE3            INDEX = 32
         B     TOTLINE3            INDEX = 36
         B     PACC2               INDEX = 40
         B     PACC4               INDEX = 44
         B     PACC3               INDEX = 48
         B     PACC5               INDEX = 52
         B     PACC6               INDEX = 56
         B     PACC7               INDEX = 60
         B     PACC99              INDEX = 64
         B     TOTLINE3            INDEX = 68
         B     TOTLINE3            INDEX = 72
         B     TOTLINE3            INDEX = 76
         B     TOTLINE3            INDEX = 80
         B     TOTLINE3            INDEX = 84
         B     TOTLINE3            INDEX = 88
         B     TOTLINE3            INDEX = 92
         B     TOTLINE3            INDEX = 96
         B     TOTLINE3            INDEX = 100
         B     TOTLINE3            INDEX = 104
         B     PACC8               INDEX = 108
         B     PACC9               INDEX = 112
         B     PACC10              INDEX = 116
         B     PACC11              INDEX = 120
         B     PACC12              INDEX = 124
         B     TOTLINE3            INDEX = 128
         B     TOTLINE3            INDEX = 132
         B     TOTLINE3            INDEX = 136
         B     PACC13              INDEX = 140
         B     TOTLINE3            INDEX = 144
         B     TOTLINE3            INDEX = 148
         B     TOTLINE3            INDEX = 152
         B     TOTLINE3            INDEX = 156
         B     TOTLINE3            INDEX = 160
         B     TOTLINE3            INDEX = 164
         B     TOTLINE3            INDEX = 168
         B     TOTLINE3            INDEX = 172
         B     TOTLINE3            INDEX = 176
         B     TOTLINE3            INDEX = 180
         B     TOTLINE3            INDEX = 184
         B     TOTLINE3            INDEX = 188
         B     TOTLINE3            INDEX = 192
         B     TOTLINE3            INDEX = 196
         B     TOTLINE3            INDEX = 200
         B     TOTLINE3            INDEX = 204
         B     TOTLINE3            INDEX = 208
         B     TOTLINE3            INDEX = 212
         B     TOTLINE3            INDEX = 216
         B     TOTLINE3            INDEX = 220
         B     TOTLINE3            INDEX = 224
         B     TOTLINE3            INDEX = 228
         B     TOTLINE3            INDEX = 232
         B     TOTLINE3            INDEX = 236
         B     TOTLINE3            INDEX = 240
         B     TOTLINE3            INDEX = 244
         B     TOTLINE3            INDEX = 248
         B     TOTLINE3            INDEX = 252
         B     TOTLINE3            INDEX = 256
         B     TOTLINE3            INDEX = 260
         B     TOTLINE3            INDEX = 264
         B     TOTLINE3            INDEX = 268
         B     TOTLINE3            INDEX = 272
         B     TOTLINE3            INDEX = 276
         B     TOTLINE3            INDEX = 280
         B     TOTLINE3            INDEX = 284
         B     TOTLINE3            INDEX = 288
         B     PACC14              INDEX = 292
         B     PACC15              INDEX = 296
         B     PACC16              INDEX = 300
         B     PACC17              INDEX = 304
         B     TOTLINE3            INDEX = 308
         B     TOTLINE3            INDEX = 312
         B     TOTLINE3            INDEX = 316
         B     TOTLINE3            INDEX = 320
         B     TOTLINE3            INDEX = 324
         B     PACC18              INDEX = 328
         B     PACC19              INDEX = 332
         B     PACC20              INDEX = 336
         B     TOTLINE3            INDEX = 340
TOTLINE3 LA    R2,6(,R2)           INCREMENT TO NEXT TABLE ENTRY
         B     TOTLINE1            LOOP
TOTLINE4 LA    R15,0               SEQ RETURN CODE TO 0
         L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO CALLER
         SPACE 3
***********************************************************************
*                                                                     *
*        FORMAT THE TOTALS AND AVERAGES (IF REQUESTED).  IF           *
*        THE NUMBER OF STEPS EXCEEDS 999,999,999, THEN BYPASS         *
*        AVERAGE CALCULATIONS.  IF THE ACCUMULATOR DOES NOT           *
*        HAVE ROOM TO DIVIDE BY A 5 DIGIT NUMBER, THE TOTAL           *
*        WILL ALSO BE BYPASSED.                                       *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR SELECTED STEP COUNT                           *
*                                                                     *
***********************************************************************
PACC1    MVC   TDETAIL,BLANKS      BLANK THE TOTAL LINE
         MVI   TDETAIL,C'0'        SET NEXT TDETAIL TO DOUBLE SPACE
         MVC   TDETAIL+01(20),=CL20'GRAND TOTALS'
         LTR   R2,R2               TEST NUMBER OF SEQUENCE FIELDS
         BZ    PACC1X              ZERO, THESE ARE THE GRAND TOTALS
         MVC   TDETAIL+01(20),=CL20'SUBTOTALS FOR  '
         LA    R3,TDETAIL+21       POINT TO FIRST SEQ OUTPUT FIELD
         LA    R4,PREVFLD1         POINT TO FIRST SEQ INPUT FIELD
         LA    R5,SUBTITLE         POINT TO FIRST SEQ TITLE
PACC1A   MVC   0(14,R3),0(R5)      SET SEQUENCE TITLE
         LA    R15,14              SET LOOP COUNTER
PACC1B   CLI   0(R3),C' '          END OF TITLE
         BE    PACC1C              YES, BRANCH
         LA    R3,1(,R3)           POINT TO NEXT CHARACTER OF TITLE
         BCT   R15,PACC1B          LOOP
PACC1C   MVI   0(R3),C'='          SET SEPARATOR
         MVC   1(10,R3),0(R4)      SET SEQUENCE OUTPUT FIELD
         LA    R3,12(,R3)          POINT TO NEXT OUTPUT FIELD
         LA    R4,10(,R4)          POINT TO NEXT INPUT FIELD
         LA    R5,14(,R5)          POINT TO NEXT SEQUENCE TITLE
         BCT   R2,PACC1A           LOOP UNTIL DONE
PACC1X   LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         MVC   TDETAIL,HEAD4       SET COLUMN HEADING
         LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                COLUMN HEADING
         MVC   TDETAIL,BLANKS      BLANK THE TOTAL LINE
         MVI   TDETAIL,C'0'        SET NEXT TDETAIL TO DOUBLE SPACE
         MVC   TDETAIL+1(16),=CL16'SELECTED RECORDS'
         MVC   TDETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    TDETAIL+17(36),SACC1 EDIT TOTAL TO DETAIL LINE
         LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         MVI   TDETAIL,C' '        SET NEXT DETAIL TO SINGLE SPACE
         ZAP   STEPCNT,=P'0'       SET STEP COUNT TO ZERO
         CP    SACC1,=P'999999999' SEE IF EXCEEDS MAX
         BH    TOTLINE             YES, GET OUT
         ZAP   STEPCNT,SACC1       SET STEP COUNT
         ZAP   ACCWRK3,STEPCNT     SAVE STEP COUNT
         DP    ACCWRK3,=P'2'       CALCULATE ROUNDING FACTOR
         ZAP   ROUND,ACCWRK3(7)    SAVE ROUNDING FACTOR
         B     TOTLINE             GO PRINT REST OF TOTALS
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR ELAPSED TIME                                  *
*                                                                     *
***********************************************************************
PACC2    MVC   TDETAIL+1(16),=CL16'ELAPSED TIME    '
         MVC   TDETAIL+17(36),ASTERS1 ASSUME TOO LARGE
         CLC   SACC2(4),=X'00000000' SEE IF ROOM TO DIVIDE
         BNE   PACC2A              NO, SKIP THIS ONE
         ZAP   ACCWRK1,SACC2       MOVE ACCUMULATOR TO WORK
         DP    ACCWRK1,=P'360000'  DIVIDE BY 36000 FOR HOURS
         ZAP   ACCWRK2,ACCWRK1(12) SAVE HOURS
         MP    ACCWRK2,=P'100'   MULTIPLY BY 100
         ZAP   ACCWRK3,ACCWRK1+12(4) SAVE REMAINDER
         DP    ACCWRK3,=P'6000'    DIVIDE BY 6000 FOR MINUTES
         AP    ACCWRK2,ACCWRK3(5)  ADD TO HOURS
         MP    ACCWRK2,=P'100'     MULTIPLY BY 100
         ZAP   ACCWRK4,ACCWRK3+5(3) SAVE REMAINDER
         DP    ACCWRK4,=P'100'     DIVIDE BY 100 FOR SECONDS
         AP    ACCWRK2,ACCWRK4(6)  ADD TO HOURS AND MINUTES
         MVC   TDETAIL+17(36),BIGMASK2 SET EDIT MASK
         ED    TDETAIL+17(36),ACCWRK2+1 EDIT TOTAL TO DETAIL LINE
PACC2A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC2B              NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC2B              YES, NO AVERAGE POSSIBLE
         CLC   SACC2(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC2B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC2       SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         DP    ACCWRK1,=P'360000'  DIVIDE BY 36000 FOR HOURS
         ZAP   ACCWRK2,ACCWRK1(12) SAVE HOURS
         MP    ACCWRK2,=P'100'   MULTIPLY BY 100
         ZAP   ACCWRK3,ACCWRK1+12(4) SAVE REMAINDER
         DP    ACCWRK3,=P'6000'    DIVIDE BY 6000 FOR MINUTES
         AP    ACCWRK2,ACCWRK3(5)  ADD TO HOURS
         MP    ACCWRK2,=P'100'     MULTIPLY BY 100
         ZAP   ACCWRK4,ACCWRK3+5(3) SAVE REMAINDER
         DP    ACCWRK4,=P'100'     DIVIDE BY 100 FOR SECONDS
         AP    ACCWRK2,ACCWRK4(6)  ADD TO HOURS AND MINUTES
         MVC   TDETAIL+17+36+5(26),BIGMASK5 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK2+5 EDIT TOTAL TO DETAIL LINE
PACC2B   LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR CPU TIME                                      *
*                                                                     *
***********************************************************************
PACC3    MVC   TDETAIL+1(16),=CL16'CPU TIME        '
         MVC   TDETAIL+17(36),ASTERS1 ASSUME TOO LARGE
         CLC   SACC3(4),=X'00000000' SEE IF ROOM TO DIVIDE
         BNE   PACC3A              NO, SKIP THIS ONE
         ZAP   ACCWRK1,SACC3       MOVE ACCUMULATOR TO WORK
         DP    ACCWRK1,=P'360000'  DIVIDE BY 36000 FOR HOURS
         ZAP   ACCWRK2,ACCWRK1(12) SAVE HOURS
         MP    ACCWRK2,=P'100'   MULTIPLY BY 100
         ZAP   ACCWRK3,ACCWRK1+12(4) SAVE REMAINDER
         DP    ACCWRK3,=P'6000'    DIVIDE BY 6000 FOR MINUTES
         AP    ACCWRK2,ACCWRK3(5)  ADD TO HOURS
         TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECONDS?
         BO    PACC3010            Y
         MP    ACCWRK2,=P'100'     MULTIPLY BY 100
         ZAP   ACCWRK4,ACCWRK3+5(3) SAVE REMAINDER
         DP    ACCWRK4,=P'100'     DIVIDE BY 100 FOR SECONDS
         AP    ACCWRK2,ACCWRK4(6)  ADD TO HOURS AND MINUTES
         MVC   TDETAIL+17(36),BIGMASK2 SET EDIT MASK
         ED    TDETAIL+17(36),ACCWRK2+1 EDIT TOTAL TO DETAIL LINE
         B     PACC3A              BRANCH
PACC3010 MP    ACCWRK2,=P'10000'   MAKE ROOM FOR SECONDS+1/100
         AP    ACCWRK2,ACCWRK3+5(3) ADD SECONDS AND 1/100S
         MVC   TDETAIL+16(37),BIGMASK7 SET EDIT MASK
         ED    TDETAIL+16(37),ACCWRK2+1  EDIT TOTAL TO DETAIL
PACC3A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC3B              NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC3B              YES, NO AVERAGE POSSIBLE
         CLC   SACC3(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC3B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC3       SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         DP    ACCWRK1,=P'360000'  DIVIDE BY 36000 FOR HOURS
         ZAP   ACCWRK2,ACCWRK1(12) SAVE HOURS
         MP    ACCWRK2,=P'100'   MULTIPLY BY 100
         ZAP   ACCWRK3,ACCWRK1+12(4) SAVE REMAINDER
         DP    ACCWRK3,=P'6000'    DIVIDE BY 6000 FOR MINUTES
         AP    ACCWRK2,ACCWRK3(5)  ADD TO HOURS
         TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECONDS?
         BO    PACC3020            YES
         MP    ACCWRK2,=P'100'     MULTIPLY BY 100
         ZAP   ACCWRK4,ACCWRK3+5(3) SAVE REMAINDER
         DP    ACCWRK4,=P'100'     DIVIDE BY 100 FOR SECONDS
         AP    ACCWRK2,ACCWRK4(6)  ADD TO HOURS AND MINUTES
         MVC   TDETAIL+17+36+5(26),BIGMASK5 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK2+5 EDIT AVG TO DETAIL LINE
         B     PACC3B              BRANCH
PACC3020 MP    ACCWRK2,=P'10000'   MAKE ROOM FOR SECONDS+1/100
         AP    ACCWRK2,ACCWRK3+5(3) ADD SECONDS AND 1/100S
         MVC   TDETAIL+17+36+4(27),BIGMASK8 SET EDIT MASK
         ED    TDETAIL+17+36+4(27),ACCWRK2+5 EDIT TOTAL TO DETAIL
PACC3B   LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR BLOCK COUNT                                   *
*                                                                     *
***********************************************************************
PACC4    MVC   TDETAIL+1(16),=CL16'BLOCK COUNT     '
         MVC   TDETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    TDETAIL+17(36),SACC4 EDIT TOTAL TO DETAIL LINE
PACC4A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC4B              NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC4B              YES, NO AVERAGE POSSIBLE
         CLC   SACC4(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC4B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC4       SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   TDETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
PACC4B   LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR REGION USED BELOW 16 MEG                      *
*                                                                     *
***********************************************************************
PACC5    MVC   TDETAIL+1(16),=CL16'RGN BELOW 16M   '
         MVC   TDETAIL+17(36),BIGMASK3 SET EDIT MASK
         ED    TDETAIL+17(36),SACC5 EDIT TOTAL TO DETAIL LINE
         MVI   TDETAIL+17+36,C'M'  SET MEG INDICATOR
PACC5A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC5B              NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC5B              YES, NO AVERAGE POSSIBLE
         CLC   SACC5(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC5B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC5       SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   TDETAIL+17+36+5(26),BIGMASK6 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
         MVI   TDETAIL+17+36+5+26,C'M'  SET MEG INDICATOR
PACC5B   LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         MVI   TDETAIL+17+36,C' '  BLANK MEG INDICATOR
         MVI   TDETAIL+17+36+5+26,C' '  BLANK MEG INDICATOR
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR REGION USED ABOVE 16 MEG                      *
*                                                                     *
***********************************************************************
PACC6    MVC   TDETAIL+1(16),=CL16'RGN ABOVE 16M   '
         MVC   TDETAIL+17(36),BIGMASK3 SET EDIT MASK
         ED    TDETAIL+17(36),SACC6 EDIT TOTAL TO DETAIL LINE
         MVI   TDETAIL+17+36,C'M'  SET MEG INDICATOR
PACC6A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC6B              NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC6B              YES, NO AVERAGE POSSIBLE
         CLC   SACC6(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC6B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC6       SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   TDETAIL+17+36+5(26),BIGMASK6 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
         MVI   TDETAIL+17+36+5+26,C'M'  SET MEG INDICATOR
PACC6B   LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         MVI   TDETAIL+17+36,C' '  BLANK MEG INDICATOR
         MVI   TDETAIL+17+36+5+26,C' '  BLANK MEG INDICATOR
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR TOTAL TAPES MOUNTED                           *
*                                                                     *
***********************************************************************
PACC7    MVC   TDETAIL+1(16),=CL16'TOTAL TAPES     '
         MVC   TDETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    TDETAIL+17(36),SACC7 EDIT TOTAL TO DETAIL LINE
PACC7A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC7B              NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC7B              YES, NO AVERAGE POSSIBLE
         CLC   SACC7(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC7B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC7       SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   TDETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
PACC7B   LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR NON-SCRATCH TAPES MOUNTED                     *
*                                                                     *
***********************************************************************
PACC8    MVC   TDETAIL+1(16),=CL16'NON-SCR TAPES   '
         MVC   TDETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    TDETAIL+17(36),SACC8 EDIT TOTAL TO DETAIL LINE
PACC8A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC8B              NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC8B              YES, NO AVERAGE POSSIBLE
         CLC   SACC8(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC8B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC8       SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   TDETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
PACC8B   LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR SCRATCH TAPES MOUNTED                         *
*                                                                     *
***********************************************************************
PACC9    MVC   TDETAIL+1(16),=CL16'SCRATCH TAPES   '
         MVC   TDETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    TDETAIL+17(36),SACC9 EDIT TOTAL TO DETAIL LINE
PACC9A   TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC9B              NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC9B              YES, NO AVERAGE POSSIBLE
         CLC   SACC9(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC9B              NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC9       SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   TDETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
PACC9B   LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR EXPANDED STORAGE PAGE ACTIVITY                *
*                                                                     *
***********************************************************************
PACC10   MVC   TDETAIL+1(16),=CL16'EXP STG PAGES   '
         MVC   TDETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    TDETAIL+17(36),SACC10 EDIT TOTAL TO DETAIL LINE
PACC10A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC10B             NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC10B             YES, NO AVERAGE POSSIBLE
         CLC   SACC10(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC10B             NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC10      SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   TDETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
PACC10B  LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR AUXILLARY STORAGE PAGE ACTIVITY               *
*                                                                     *
***********************************************************************
PACC11   MVC   TDETAIL+1(16),=CL16'AUX STG PAGES   '
         MVC   TDETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    TDETAIL+17(36),SACC11 EDIT TOTAL TO DETAIL LINE
PACC11A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC11B             NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC11B             YES, NO AVERAGE POSSIBLE
         CLC   SACC11(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC11B             NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC11      SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   TDETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
PACC11B  LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR TOTAL SERVICE UNITS                           *
*                                                                     *
***********************************************************************
PACC12   MVC   TDETAIL+1(16),=CL16'TOT SERV UNITS  '
         MVC   TDETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    TDETAIL+17(36),SACC12 EDIT TOTAL TO DETAIL LINE
         MVI   TDETAIL+17+36,C'K'  SET K INDICATOR
PACC12A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC12B             NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC12B             YES, NO AVERAGE POSSIBLE
         CLC   SACC12(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC12B             NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC12      SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   TDETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
         MVI   TDETAIL+17+36+5+26,C'K'  SET K INDICATOR
PACC12B  LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         MVI   TDETAIL+17+36,C' '  BLANK K INDICATOR
         MVI   TDETAIL+17+36+5+26,C' '  BLANK K INDICATOR
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR VIO PAGING                                    *
*                                                                     *
***********************************************************************
PACC13   MVC   TDETAIL+1(16),=CL16'VIO PAGES       '
         MVC   TDETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    TDETAIL+17(36),SACC13 EDIT TOTAL TO DETAIL LINE
PACC13A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC13B             NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC13B             YES, NO AVERAGE POSSIBLE
         CLC   SACC13(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC13B             NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC13      SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   TDETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
PACC13B  LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR CPU   SERVICE UNITS                           *
*                                                                     *
***********************************************************************
PACC14   MVC   TDETAIL+1(16),=CL16'CPU SERV UNITS  '
         MVC   TDETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    TDETAIL+17(36),SACC14 EDIT TOTAL TO DETAIL LINE
         MVI   TDETAIL+17+36,C'K'  SET K INDICATOR
PACC14A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC14B             NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC14B             YES, NO AVERAGE POSSIBLE
         CLC   SACC14(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC14B             NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC14      SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   TDETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
         MVI   TDETAIL+17+36+5+26,C'K'  SET K INDICATOR
PACC14B  LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         MVI   TDETAIL+17+36,C' '  BLANK K INDICATOR
         MVI   TDETAIL+17+36+5+26,C' '  BLANK K INDICATOR
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR I/O   SERVICE UNITS                           *
*                                                                     *
***********************************************************************
PACC15   MVC   TDETAIL+1(16),=CL16'I/O SERV UNITS  '
         MVC   TDETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    TDETAIL+17(36),SACC15 EDIT TOTAL TO DETAIL LINE
         MVI   TDETAIL+17+36,C'K'  SET K INDICATOR
PACC15A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC15B             NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC15B             YES, NO AVERAGE POSSIBLE
         CLC   SACC15(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC15B             NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC15      SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   TDETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
         MVI   TDETAIL+17+36+5+26,C'K'  SET K INDICATOR
PACC15B  LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         MVI   TDETAIL+17+36,C' '  BLANK K INDICATOR
         MVI   TDETAIL+17+36+5+26,C' '  BLANK K INDICATOR
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR MSO   SERVICE UNITS                           *
*                                                                     *
***********************************************************************
PACC16   MVC   TDETAIL+1(16),=CL16'MSO SERV UNITS  '
         MVC   TDETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    TDETAIL+17(36),SACC16 EDIT TOTAL TO DETAIL LINE
         MVI   TDETAIL+17+36,C'K'  SET K INDICATOR
PACC16A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC16B             NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC16B             YES, NO AVERAGE POSSIBLE
         CLC   SACC16(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC16B             NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC16      SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   TDETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
         MVI   TDETAIL+17+36+5+26,C'K'  SET K INDICATOR
PACC16B  LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         MVI   TDETAIL+17+36,C' '  BLANK K INDICATOR
         MVI   TDETAIL+17+36+5+26,C' '  BLANK K INDICATOR
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR SRB   SERVICE UNITS                           *
*                                                                     *
***********************************************************************
PACC17   MVC   TDETAIL+1(16),=CL16'SRB SERV UNITS  '
         MVC   TDETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    TDETAIL+17(36),SACC17 EDIT TOTAL TO DETAIL LINE
         MVI   TDETAIL+17+36,C'K'  SET K INDICATOR
PACC17A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC17B             NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC17B             YES, NO AVERAGE POSSIBLE
         CLC   SACC17(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC17B             NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC17      SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         MVC   TDETAIL+17+36+5(26),BIGMASK4 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK1+5 EDIT AVG TO DETAIL LINE
         MVI   TDETAIL+17+36+5+26,C'K'  SET K INDICATOR
PACC17B  LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         MVI   TDETAIL+17+36,C' '  BLANK K INDICATOR
         MVI   TDETAIL+17+36+5+26,C' '  BLANK K INDICATOR
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR ZAAP CPU TIME                                 *
*                                                                     *
***********************************************************************
PACC18   MVC   TDETAIL+1(16),=CL16'ZAAP CPU TIME   '
         MVC   TDETAIL+17(36),ASTERS1 ASSUME TOO LARGE
         CLC   SACC18(4),=X'00000000' SEE IF ROOM TO DIVIDE
         BNE   PACC18A             NO, SKIP THIS ONE
         ZAP   ACCWRK1,SACC18      MOVE ACCUMULATOR TO WORK
         DP    ACCWRK1,=P'360000'  DIVIDE BY 36000 FOR HOURS
         ZAP   ACCWRK2,ACCWRK1(12) SAVE HOURS
         MP    ACCWRK2,=P'100'   MULTIPLY BY 100
         ZAP   ACCWRK3,ACCWRK1+12(4) SAVE REMAINDER
         DP    ACCWRK3,=P'6000'    DIVIDE BY 6000 FOR MINUTES
         AP    ACCWRK2,ACCWRK3(5)  ADD TO HOURS
         TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECONDS?
         BO    PACC1801            Y
         MP    ACCWRK2,=P'100'     MULTIPLY BY 100
         ZAP   ACCWRK4,ACCWRK3+5(3) SAVE REMAINDER
         DP    ACCWRK4,=P'100'     DIVIDE BY 100 FOR SECONDS
         AP    ACCWRK2,ACCWRK4(6)  ADD TO HOURS AND MINUTES
         MVC   TDETAIL+17(36),BIGMASK2 SET EDIT MASK
         ED    TDETAIL+17(36),ACCWRK2+1 EDIT TOTAL TO DETAIL LINE
         B     PACC18A             BRANCH
PACC1801 MP    ACCWRK2,=P'10000'   MAKE ROOM FOR SECONDS+1/100
         AP    ACCWRK2,ACCWRK3+5(3) ADD SECONDS AND 1/100S
         MVC   TDETAIL+16(37),BIGMASK7 SET EDIT MASK
         ED    TDETAIL+16(37),ACCWRK2+1  EDIT TOTAL TO DETAIL
PACC18A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC18B             NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC18B             YES, NO AVERAGE POSSIBLE
         CLC   SACC18(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC18B             NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC18      SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         DP    ACCWRK1,=P'360000'  DIVIDE BY 36000 FOR HOURS
         ZAP   ACCWRK2,ACCWRK1(12) SAVE HOURS
         MP    ACCWRK2,=P'100'   MULTIPLY BY 100
         ZAP   ACCWRK3,ACCWRK1+12(4) SAVE REMAINDER
         DP    ACCWRK3,=P'6000'    DIVIDE BY 6000 FOR MINUTES
         AP    ACCWRK2,ACCWRK3(5)  ADD TO HOURS
         TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECONDS?
         BO    PACC1802            YES
         MP    ACCWRK2,=P'100'     MULTIPLY BY 100
         ZAP   ACCWRK4,ACCWRK3+5(3) SAVE REMAINDER
         DP    ACCWRK4,=P'100'     DIVIDE BY 100 FOR SECONDS
         AP    ACCWRK2,ACCWRK4(6)  ADD TO HOURS AND MINUTES
         MVC   TDETAIL+17+36+5(26),BIGMASK5 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK2+5 EDIT AVG TO DETAIL LINE
         B     PACC18B             BRANCH
PACC1802 MP    ACCWRK2,=P'10000'   MAKE ROOM FOR SECONDS+1/100
         AP    ACCWRK2,ACCWRK3+5(3) ADD SECONDS AND 1/100S
         MVC   TDETAIL+17+36+4(27),BIGMASK8 SET EDIT MASK
         ED    TDETAIL+17+36+4(27),ACCWRK2+5 EDIT TOTAL TO DETAIL
PACC18B  LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR ZIIP CPU TIME                                 *
*                                                                     *
***********************************************************************
PACC19   MVC   TDETAIL+1(16),=CL16'ZIIP CPU TIME   '
         MVC   TDETAIL+17(36),ASTERS1 ASSUME TOO LARGE
         CLC   SACC19(4),=X'00000000' SEE IF ROOM TO DIVIDE
         BNE   PACC19A             NO, SKIP THIS ONE
         ZAP   ACCWRK1,SACC19      MOVE ACCUMULATOR TO WORK
         DP    ACCWRK1,=P'360000'  DIVIDE BY 36000 FOR HOURS
         ZAP   ACCWRK2,ACCWRK1(12) SAVE HOURS
         MP    ACCWRK2,=P'100'   MULTIPLY BY 100
         ZAP   ACCWRK3,ACCWRK1+12(4) SAVE REMAINDER
         DP    ACCWRK3,=P'6000'    DIVIDE BY 6000 FOR MINUTES
         AP    ACCWRK2,ACCWRK3(5)  ADD TO HOURS
         TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECONDS?
         BO    PACC1901            Y
         MP    ACCWRK2,=P'100'     MULTIPLY BY 100
         ZAP   ACCWRK4,ACCWRK3+5(3) SAVE REMAINDER
         DP    ACCWRK4,=P'100'     DIVIDE BY 100 FOR SECONDS
         AP    ACCWRK2,ACCWRK4(6)  ADD TO HOURS AND MINUTES
         MVC   TDETAIL+17(36),BIGMASK2 SET EDIT MASK
         ED    TDETAIL+17(36),ACCWRK2+1 EDIT TOTAL TO DETAIL LINE
         B     PACC19A             BRANCH
PACC1901 MP    ACCWRK2,=P'10000'   MAKE ROOM FOR SECONDS+1/100
         AP    ACCWRK2,ACCWRK3+5(3) ADD SECONDS AND 1/100S
         MVC   TDETAIL+16(37),BIGMASK7 SET EDIT MASK
         ED    TDETAIL+16(37),ACCWRK2+1  EDIT TOTAL TO DETAIL
PACC19A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC19B             NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC19B             YES, NO AVERAGE POSSIBLE
         CLC   SACC19(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC19B             NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC19      SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         DP    ACCWRK1,=P'360000'  DIVIDE BY 36000 FOR HOURS
         ZAP   ACCWRK2,ACCWRK1(12) SAVE HOURS
         MP    ACCWRK2,=P'100'   MULTIPLY BY 100
         ZAP   ACCWRK3,ACCWRK1+12(4) SAVE REMAINDER
         DP    ACCWRK3,=P'6000'    DIVIDE BY 6000 FOR MINUTES
         AP    ACCWRK2,ACCWRK3(5)  ADD TO HOURS
         TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECONDS?
         BO    PACC1902            YES
         MP    ACCWRK2,=P'100'     MULTIPLY BY 100
         ZAP   ACCWRK4,ACCWRK3+5(3) SAVE REMAINDER
         DP    ACCWRK4,=P'100'     DIVIDE BY 100 FOR SECONDS
         AP    ACCWRK2,ACCWRK4(6)  ADD TO HOURS AND MINUTES
         MVC   TDETAIL+17+36+5(26),BIGMASK5 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK2+5 EDIT AVG TO DETAIL LINE
         B     PACC19B             BRANCH
PACC1902 MP    ACCWRK2,=P'10000'   MAKE ROOM FOR SECONDS+1/100
         AP    ACCWRK2,ACCWRK3+5(3) ADD SECONDS AND 1/100S
         MVC   TDETAIL+17+36+4(27),BIGMASK8 SET EDIT MASK
         ED    TDETAIL+17+36+4(27),ACCWRK2+5 EDIT TOTAL TO DETAIL
PACC19B  LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR ZAAP+ZIIP CPU TIME                            *
*                                                                     *
***********************************************************************
PACC20   MVC   TDETAIL+1(16),=CL16'ZAAP+ZIIP CPU TM'
         MVC   TDETAIL+17(36),ASTERS1 ASSUME TOO LARGE
         CLC   SACC20(4),=X'00000000' SEE IF ROOM TO DIVIDE
         BNE   PACC20A             NO, SKIP THIS ONE
         ZAP   ACCWRK1,SACC20      MOVE ACCUMULATOR TO WORK
         DP    ACCWRK1,=P'360000'  DIVIDE BY 36000 FOR HOURS
         ZAP   ACCWRK2,ACCWRK1(12) SAVE HOURS
         MP    ACCWRK2,=P'100'   MULTIPLY BY 100
         ZAP   ACCWRK3,ACCWRK1+12(4) SAVE REMAINDER
         DP    ACCWRK3,=P'6000'    DIVIDE BY 6000 FOR MINUTES
         AP    ACCWRK2,ACCWRK3(5)  ADD TO HOURS
         TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECONDS?
         BO    PACC2001            Y
         MP    ACCWRK2,=P'100'     MULTIPLY BY 100
         ZAP   ACCWRK4,ACCWRK3+5(3) SAVE REMAINDER
         DP    ACCWRK4,=P'100'     DIVIDE BY 100 FOR SECONDS
         AP    ACCWRK2,ACCWRK4(6)  ADD TO HOURS AND MINUTES
         MVC   TDETAIL+17(36),BIGMASK2 SET EDIT MASK
         ED    TDETAIL+17(36),ACCWRK2+1 EDIT TOTAL TO DETAIL LINE
         B     PACC20A             BRANCH
PACC2001 MP    ACCWRK2,=P'10000'   MAKE ROOM FOR SECONDS+1/100
         AP    ACCWRK2,ACCWRK3+5(3) ADD SECONDS AND 1/100S
         MVC   TDETAIL+16(37),BIGMASK7 SET EDIT MASK
         ED    TDETAIL+16(37),ACCWRK2+1  EDIT TOTAL TO DETAIL
PACC20A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC20B             NO, BRANCH
         MVC   TDETAIL+17+36+5(26),ASTERS2 ASSUME TOO LARGE
         CP    STEPCNT,=P'0'       SEE IF STEP COUNT ZERO
         BE    PACC20B             YES, NO AVERAGE POSSIBLE
         CLC   SACC20(5),=X'0000000000' ROOM FOR 5 DIGIT DIVISOR
         BNE   PACC20B             NO, NO AVERAGE POSSIBLE
         MVC   ACCWRK2,SACC20      SAVE TOTAL
         AP    ACCWRK2,ROUND       ADD ROUNDING FACTOR
         DP    ACCWRK2,STEPCNT     CALCULATE AVERAGE
         ZAP   ACCWRK1,ACCWRK2(11) SAVE AVERAGE
         DP    ACCWRK1,=P'360000'  DIVIDE BY 36000 FOR HOURS
         ZAP   ACCWRK2,ACCWRK1(12) SAVE HOURS
         MP    ACCWRK2,=P'100'   MULTIPLY BY 100
         ZAP   ACCWRK3,ACCWRK1+12(4) SAVE REMAINDER
         DP    ACCWRK3,=P'6000'    DIVIDE BY 6000 FOR MINUTES
         AP    ACCWRK2,ACCWRK3(5)  ADD TO HOURS
         TM    SWITCH+8,CPUFRACT   DO WE NEED 1/100 SECONDS?
         BO    PACC2002            YES
         MP    ACCWRK2,=P'100'     MULTIPLY BY 100
         ZAP   ACCWRK4,ACCWRK3+5(3) SAVE REMAINDER
         DP    ACCWRK4,=P'100'     DIVIDE BY 100 FOR SECONDS
         AP    ACCWRK2,ACCWRK4(6)  ADD TO HOURS AND MINUTES
         MVC   TDETAIL+17+36+5(26),BIGMASK5 SET EDIT MASK
         ED    TDETAIL+17+36+5(26),ACCWRK2+5 EDIT AVG TO DETAIL LINE
         B     PACC20B             BRANCH
PACC2002 MP    ACCWRK2,=P'10000'   MAKE ROOM FOR SECONDS+1/100
         AP    ACCWRK2,ACCWRK3+5(3) ADD SECONDS AND 1/100S
         MVC   TDETAIL+17+36+4(27),BIGMASK8 SET EDIT MASK
         ED    TDETAIL+17+36+4(27),ACCWRK2+5 EDIT TOTAL TO DETAIL
PACC20B  LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        TOTALS/AVG FOR CPU PERCENT                                   *
*                                                                     *
***********************************************************************
PACC99   MVC   TDETAIL+1(16),=CL16'CPU PERCENT     '
         MVC   TDETAIL+17(36),ASTERS1      ASSUME TOO LARGE
         CLC   SACC2(8),=X'0000000000000000' SEE IF ELAP TIME TOO BIG
         BNE   PACC99A             YES, NO AVERAGE POSSIBLE
         CLC   SACC3(9),=X'000000000000000000' SEE IF CPU TIME TOO BIG
         BNE   PACC99A             YES, NO AVERAGE POSSIBLE
         CP    SACC2,=P'0'         SEE IF ELAP TIME ZERO
         BE    PACC99A             YES, NO AVERAGE POSSIBLE
         ZAP   ACCWRK2,SACC3       SAVE CPU TIME
         MP    ACCWRK2,=P'1000'    MULTIPLY BY 1000 FOR PERCENT X 10
         DP    ACCWRK2,SACC2+8(8)  DIVIDE BY ELAPSED TIME
         ZAP   ACCWRK1,ACCWRK2(8)  SAVE AVERAGE
         AP    ACCWRK1,=P'5'       ADD ROUNDING FACTOR
         DP    ACCWRK1,=P'10'      DIVIDE BY 10 FOR PERCENT
         ZAP   ACCWRK2,ACCWRK1(14) SAVE PERCENT
         MVC   TDETAIL+17(36),BIGMASK1 SET EDIT MASK
         ED    TDETAIL+17(36),ACCWRK2 EDIT AVG TO DETAIL LINE
PACC99A  TM    SWITCH+4,SELAVG     SEE IF AVERAGES REQUESTED
         BNO   PACC99B             NO, BRANCH
         MVC   TDETAIL+17+36+5(26),TDETAIL+17+10 DUPLICATE CPU%
PACC99B  LA    R15,PACCRTN         GO WRITE
         BALR  R14,R15                TOTAL LINE
         B     TOTLINE3            GO PROCESS NEXT TOTAL
         SPACE 3
***********************************************************************
*                                                                     *
*        PRINT THE TOTAL LINE                                         *
*                                                                     *
***********************************************************************
PACCRTN  ST    R14,SAVEPACC        SAVE RETURN ADDRESS
         CP    LINECT,=P'55'       SEE IF PAGE IS FULL
         BNH   PACCRTN3            NO, BRANCH
         AP    PAGECT,=P'1'        ADD 1 TO PAGE COUNT
         MVC   OPAGCT,=X'402020202120' MOVE EDIT MASK TO HEAD 1
         ED    OPAGCT,PAGECT       EDIT PAGE COUNT TO HEAD 1
PACCRTN1 PUT   SYSPRINT,HEAD1      PRINT HEADING LINE 1
PACCRTN2 PUT   SYSPRINT,HEAD2A     PRINT HEADING LINE 2A
         PUT   SYSPRINT,HEAD2B     PRINT HEADING LINE 2B
         ZAP   LINECT,=P'4'        SET LINE COUNT TO 4
         MVI   TDETAIL,C'0'        SET NEXT TDETAIL TO DOUBLE SPACE
PACCRTN3 PUT   SYSPRINT,TDETAIL    PRINT DETAIL LINE
         AP    LINECT,=P'1'        ADD 1 TO LINE COUNT
         CLI   TDETAIL,C' '        SINGLE SPACED?
         BE    PACCRTN4            YES, GET OUT
         AP    LINECT,=P'1'        ADD 1 MORE TO LINE COUNT
         CLI   TDETAIL,C'0'        DOUBLE SPACED?
         BE    PACCRTN4            YES, GET OUT
         AP    LINECT,=P'1'        ADD 1 MORE TO LINE COUNT
PACCRTN4 MVI   TDETAIL,C' '        SET NEXT TDETAIL TO SINGLE SPACE
         MVI   DETAIL,C'0'         SET NEXT DETAIL TO DOUBLE SPACE
         L     R14,SAVEPACC        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         LTORG
SAVEPACC DS    F                   RETURN ADDRESS FROM PACCRTN
SAVE11   DS    18F                 ROUTINE SAVE AREA
         EJECT
         SPACE 3
         DROP  R6                  DROP ADDRESSABILITY TO ACCUMULATORS
         DROP  R9,R10,R11,R12
         EJECT
***********************************************************************
*                                                                     *
*                           ADDACC                                    *
*                                                                     *
*        ADD THE ACCUMULATORS SET PRIOR TO A SUBTOTAL BREAK OR END    *
*        OF FILE TO ALL LEVELS OF SUBTOTALS.                          *
*                                                                     *
*        CLEAR THE 20 ACCUMULATORS AFTER THEY HAVE BEEN ADDED TO      *
*        ALL SUBTOTALS.                                               *
*                                                                     *
***********************************************************************
ADDACC   CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING ADDACC,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE12          LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         L     R6,=V(ACCUM)        POINT TO ACCUMULATORS
         USING ACCUM,R6            SET ADDRESSABILITY TO ACCUMULATORS
***********************************************************************
*        ADD TO SUBTOTAL LEVEL 1                                      *
***********************************************************************
ADDACC1  LA    R1,ACC1              POINT TO ACCUMULATOR 1
         LA    R2,ACCS1             GET ADDRESS OF LEVEL 1 ACCUM
         LA    R15,20               SET LOOP COUNTER
ADDACC1A AP    0(16,R2),0(16,R1)    ADD ACCUMULATOR
         LA    R1,16(,R1)           INCREMENT TO NEXT ACCUMULATOR
         LA    R2,16(,R2)           INCREMENT TO NEXT ACCUMULATOR
         BCT   R15,ADDACC1A         LOOP THROUGH ALL 20
         SPACE 3
***********************************************************************
*        ADD TO SUBTOTAL LEVEL 2                                      *
***********************************************************************
ADDACC2  LA    R1,ACC1              POINT TO ACCUMULATOR 1
         LA    R2,ACCS2             GET ADDRESS OF LEVEL 2 ACCUM
         LA    R15,20               SET LOOP COUNTER
ADDACC2A AP    0(16,R2),0(16,R1)    ADD ACCUMULATOR
         LA    R1,16(,R1)           INCREMENT TO NEXT ACCUMULATOR
         LA    R2,16(,R2)           INCREMENT TO NEXT ACCUMULATOR
         BCT   R15,ADDACC2A         LOOP THROUGH ALL 20
         SPACE 3
***********************************************************************
*        ADD TO SUBTOTAL LEVEL 3                                      *
***********************************************************************
ADDACC3  LA    R1,ACC1              POINT TO ACCUMULATOR 1
         LA    R2,ACCS3             GET ADDRESS OF LEVEL 3 ACCUM
         LA    R15,20               SET LOOP COUNTER
ADDACC3A AP    0(16,R2),0(16,R1)    ADD ACCUMULATOR
         LA    R1,16(,R1)           INCREMENT TO NEXT ACCUMULATOR
         LA    R2,16(,R2)           INCREMENT TO NEXT ACCUMULATOR
         BCT   R15,ADDACC3A         LOOP THROUGH ALL 20
         SPACE 3
***********************************************************************
*        ADD TO SUBTOTAL LEVEL 4                                      *
***********************************************************************
ADDACC4  LA    R1,ACC1              POINT TO ACCUMULATOR 1
         LA    R2,ACCS4             GET ADDRESS OF LEVEL 4 ACCUM
         LA    R15,20               SET LOOP COUNTER
ADDACC4A AP    0(16,R2),0(16,R1)    ADD ACCUMULATOR
         LA    R1,16(,R1)           INCREMENT TO NEXT ACCUMULATOR
         LA    R2,16(,R2)           INCREMENT TO NEXT ACCUMULATOR
         BCT   R15,ADDACC4A         LOOP THROUGH ALL 20
         SPACE 3
***********************************************************************
*        ADD TO SUBTOTAL LEVEL T (FOR TOTAL)                          *
***********************************************************************
ADDACCT  LA    R1,ACC1              POINT TO ACCUMULATOR 1
         LA    R2,ACCST             GET ADDRESS OF LEVEL T ACCUM
         LA    R15,20               SET LOOP COUNTER
ADDACCTA AP    0(16,R2),0(16,R1)    ADD ACCUMULATOR
         LA    R1,16(,R1)           INCREMENT TO NEXT ACCUMULATOR
         LA    R2,16(,R2)           INCREMENT TO NEXT ACCUMULATOR
         BCT   R15,ADDACCTA         LOOP THROUGH ALL 20
         SPACE 3
***********************************************************************
*        ZERO THE ACCUMULATORS                                        *
***********************************************************************
ADDACCC  LA    R1,ACC1              POINT TO ACCUMULATOR 1
         LA    R15,20               SET LOOP COUNTER
ADDACCC1 ZAP   0(16,R1),=P'0'       ZERO THE ACCUMULATOR
         LA    R1,16(,R1)           INCREMENT TO NEXT ACCUMULATOR
         BCT   R15,ADDACCC1         LOOP THROUGH ALL 20
         SPACE 3
***********************************************************************
*        RETURN TO CALLER                                             *
***********************************************************************
         LA    R15,0               SEQ RETURN CODE TO 0
         L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO CALLER
         LTORG
SAVE12   DS    18F                 ROUTINE SAVE AREA
         EJECT
         SPACE 3
         DROP  R6                  DROP ADDRESSABILITY TO ACCUMULATORS
         DROP  R9,R10,R11,R12
         EJECT
***********************************************************************
*                                                                     *
*                           SUBTOT                                    *
*                                                                     *
*        PROCESS THE SUBTOTAL SEQUENCE BREAK THAT HAS JUST BEEN       *
*        DETECTED.  NOTE THAT THE SEQUENCE FIELD NUMBER THAT          *
*        CAUSED THE BREAK IS IN REGISTER 1 ON ENTRY.                  *
*                                                                     *
*        NOTE THAT THE SEQUENCE FIELD NUMBER IS THE ORDER IN          *
*        WHICH THEY WERE SPECIFIED.  FOR INSTANCE IF 3 FIELDS         *
*        WERE SPECIFIED AND FIELD NUMBER 1 HAD A BREAK THEN           *
*        3 SUBTOTALS WOULD BE REQUIRED FOR ALL OF THE 3               *
*        FIELDS.                                                      *
*                                                                     *
*        TO MAKE SENSE OUT OF THIS THE SEQUENCE FIELD NUMBER          *
*        WILL BE CONVERTED TO A SUBTOTAL COUNT WITH THE FOLLOWING     *
*        EQUATION:                                                    *
*                                                                     *
*        SUBTOTAL COUNT = TOTAL FIELDS - SEQUENCE FIELD NUMBER + 1    *
*                                                                     *
*        THIS FOR 3 FIELDS AND A BREAK ON THE FIRST ON GIVES:         *
*                                                                     *
*        SUBTOTAL COUNT = 3 - 1 + 1 = 3 SUBTOTALS                     *
*                                                                     *
***********************************************************************
SUBTOT   CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING SUBTOT,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE13          LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
         L     R6,=V(ACCUM)        POINT TO ACCUMULATORS
         USING ACCUM,R6            SET ADDRESSABILITY TO ACCUMULATORS
         TM    SWITCH+8,SELSUBT    SEE IF SUBTOTALS REQUESTED
         BNO   SUBTOT99            NO, JUST GET OUT
***********************************************************************
*        CALCULATE SUBTOTAL COUNT                                     *
***********************************************************************
SUBTOT0  LH    R2,SUBTNBR          LOAD NUMBER OF SUBTOTAL FIELDS
         SR    R2,R1               SUBTRACT FIELD SEQUENCE NUMBER
         LA    R2,1(,R2)           ADD 1 THE TOTAL
         LH    R3,SUBTNBR          LOAD NUMBER OF SUBTOTAL FIELDS
***********************************************************************
*        PRINT AND ZERO FIRST SUBTOTAL                                *
***********************************************************************
SUBTOT1  LA    R14,ACCS1           GET ADDRESS OF LEVEL 1 ACCUM
         LH    R15,=H'320'         LOAD LENGTH OF 20 ACCUMULATORS
         LA    R0,SACC1            GET ADDRESS OF PRINT ACCUMULATORS
         LH    R1,=H'320'          LOAD LENGTH OF 20 ACCUMULATORS
         MVCL  R0,R14              SET PRINT ACCUMULATORS
         LR    R1,R3               SET NUMBER OF SUBTOTAL FIELDS
         L     R15,=V(PTOTALN)     LOAD PRINT TOTALS ROUTINE
         BALR  R14,R15             GO PRINT TOTALS
SUBTOT1A LA    R1,ACCS1            GET ADDRESS OF LEVEL 1 ACCUM
         LA    R15,20              SET LOOP COUNTER
SUBTOT1B ZAP   0(16,R1),=P'0'      ZERO THE ACCUMULATOR
         LA    R1,16(,R1)          INCREMENT TO NEXT ACCUMULATOR
         BCT   R15,SUBTOT1B        ZERO ALL 20 ACCUMULATORS
         CH    R2,=H'1'            SEE IF ONLY WANT 1 SUBTOTAL
         BNH   SUBTOT99            YES, GET OUT
         SPACE 3
***********************************************************************
*        PRINT AND ZERO SECOND SUBTOTAL                               *
***********************************************************************
SUBTOT2  LA    R14,ACCS2           GET ADDRESS OF LEVEL 2 ACCUM
         LH    R15,=H'320'         LOAD LENGTH OF 20 ACCUMULATORS
         LA    R0,SACC1            GET ADDRESS OF PRINT ACCUMULATORS
         LH    R1,=H'320'          LOAD LENGTH OF 20 ACCUMULATORS
         MVCL  R0,R14              SET PRINT ACCUMULATORS
         BCTR  R3,0                REDUCE NBR OF SUBTOTAL FIELDS BY 1
         LR    R1,R3               SET NUMBER OF SUBTOTAL FIELDS
         L     R15,=V(PTOTALN)     LOAD PRINT TOTALS ROUTINE
         BALR  R14,R15             GO PRINT TOTALS
SUBTOT2A LA    R1,ACCS2            GET ADDRESS OF LEVEL 2 ACCUM
         LA    R15,20              SET LOOP COUNTER
SUBTOT2B ZAP   0(16,R1),=P'0'      ZERO THE ACCUMULATOR
         LA    R1,16(,R1)          INCREMENT TO NEXT ACCUMULATOR
         BCT   R15,SUBTOT2B        ZERO ALL 20 ACCUMULATORS
         CH    R2,=H'2'            SEE IF ONLY WANT 2 SUBTOTALS
         BNH   SUBTOT99            YES, GET OUT
         SPACE 3
***********************************************************************
*        PRINT AND ZERO THIRD SUBTOTAL                                *
***********************************************************************
SUBTOT3  LA    R14,ACCS3           GET ADDRESS OF LEVEL 3 ACCUM
         LH    R15,=H'320'         LOAD LENGTH OF 20 ACCUMULATORS
         LA    R0,SACC1            GET ADDRESS OF PRINT ACCUMULATORS
         LH    R1,=H'320'          LOAD LENGTH OF 20 ACCUMULATORS
         MVCL  R0,R14              SET PRINT ACCUMULATORS
         BCTR  R3,0                REDUCE NBR OF SUBTOTAL FIELDS BY 1
         LR    R1,R3               SET NUMBER OF SUBTOTAL FIELDS
         L     R15,=V(PTOTALN)     LOAD PRINT TOTALS ROUTINE
         BALR  R14,R15             GO PRINT TOTALS
SUBTOT3A LA    R1,ACCS3            GET ACCRESS OF LEVEL 3 ACCUM
         LA    R15,20              SET LOOP COUNTER
SUBTOT3B ZAP   0(16,R1),=P'0'      ZERO THE ACCUMULATOR
         LA    R1,16(,R1)          INCREMENT TO NEXT ACCUMULATOR
         BCT   R15,SUBTOT3B        ZERO ALL 20 ACCUMULATORS
         CH    R2,=H'3'            SEE IF ONLY WANT 3 SUBTOTALS
         BNH   SUBTOT99            YES, GET OUT
         SPACE 3
***********************************************************************
*        PRINT AND ZERO FOURTH SUBTOTAL                               *
***********************************************************************
SUBTOT4  LA    R14,ACCS4           GET ADDRESS OF LEVEL 4 ACCUM
         LH    R15,=H'320'         LOAD LENGTH OF 20 ACCUMULATORS
         LA    R0,SACC1            GET ADDRESS OF PRINT ACCUMULATORS
         LH    R1,=H'320'          LOAD LENGTH OF 20 ACCUMULATORS
         MVCL  R0,R14              SET PRINT ACCUMULATORS
         BCTR  R3,0                REDUCE NBR OF SUBTOTAL FIELDS BY 1
         LR    R1,R3               SET NUMBER OF SUBTOTAL FIELDS
         L     R15,=V(PTOTALN)     LOAD PRINT TOTALS ROUTINE
         BALR  R14,R15             GO PRINT TOTALS
SUBTOT4A LA    R1,ACCS4            GET ADDRESS OF LEVEL 4 ACCUM
         LA    R15,20               SET LOOP COUNTER
SUBTOT4B ZAP   0(16,R1),=P'0'       ZERO THE ACCUMULATOR
         LA    R1,16(,R1)           INCREMENT TO NEXT ACCUMULATOR
         BCT   R15,SUBTOT4B         ZERO ALL 20 ACCUMULATORS
         SPACE 3
***********************************************************************
*        RETURN TO CALLER                                             *
***********************************************************************
SUBTOT99 MVI   DETAIL,C'0'         SET NEXT DETAIL TO DOUBLE SPACE
         LA    R15,0               SEQ RETURN CODE TO 0
         L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         LM    R14,R12,12(R13)     RESTORE ORIGINAL REGS
         BR    R14                 RETURN TO CALLER
         LTORG
SAVE13   DS    18F                 ROUTINE SAVE AREA
         EJECT
         SPACE 3
         DROP  R6                  DROP ADDRESSABILITY TO ACCUMULATORS
         DROP  R9,R10,R11,R12
***********************************************************************
*        PROCESS THE JOBNAME SUBPARAMETERS                            *
***********************************************************************
JOBSUB   CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING JOBSUB,R9,R10,R11,R12 SET ADDRESSABILITY TO ROUTINE
         LR    R9,R15              LOAD BASE REGISTER
         LA    R10,2048(R9)        LOAD SECOND
         LA    R10,2048(R10)            BASE REGISTER
         LA    R11,2048(R10)       LOAD THIRD
         LA    R11,2048(R11)            BASE REGISTER
         LA    R12,2048(R11)       LOAD FOURTH
         LA    R12,2048(R12)            BASE REGISTER
         LR    R15,R13             SAVE ADDR OF ORIGINAL SAVE
         LA    R13,SAVE14          LOAD ADDR OF NEW SAVE
         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD
         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW
         L     R8,=V(CONSTANT)     LOAD ADDRESS OF WORK AREA
         USING CONSTANT,R8         SET ADDRESSABILITY
JOBSUB01 XC    JSUB1A,JSUB1A       ZERO ADDRESS OF FIRST JOB SUBPARM
         XC    JSUB1L,JSUB1L       ZERO LENGTH OF FIRST JOB SUBPARM
         XC    JSUB2A,JSUB2A       ZERO ADDRESS OF SECOND JOB SUBPARM
         XC    JSUB2L,JSUB2L       ZERO LENGTH OF SECOND JOB SUBPARM
         XC    JSUB3A,JSUB3A       ZERO ADDRESS OF THIRD JOB SUBPARM
         XC    JSUB3L,JSUB3L       ZERO LENGTH OF THIRD JOB SUBPARM
         XC    JSUBCNT,JSUBCNT     ZERO COUNT OF SUBPARMS
         CLI   0(R1),C'('          SEE IF START OF JOBNAME SUBPARMS
         BNE   JOBSUBR1            NO, ERROR 1
         LA    R7,1(,R1)           INCREMENT PAST '('
         LR    R6,R7               SAVE START OF FIRST PARM
         LA    R15,0               SET PARM LENGTH TO ZERO
JOBSUB02 CLI   0(R7),C' '          END OF PARM
         BE    JOBSUBR2            YES, ERROR 2
         CLI   0(R7),C','          END OF FIRST PARM
         BE    JOBSUB03            YES, GO PROCESS IT
         CLI   0(R7),C')'          END OF FIRST PARM
         BE    JOBSUB03            YES, GO PROCESS IT
         LA    R7,1(,R7)           INCREMENT TO NEXT CHARACTER OF PARM
         LA    R15,1(,R15)         ADD 1 TO LENGTH OF PARM
         B     JOBSUB02            LOOP
JOBSUB03 STH   R15,JSUB1L          SAVE LENGTH OF FIRST PARM
         ST    R6,JSUB1A           SAVE ADDRESS OF FIRST PARM
         MVC   JSUBCNT,=H'1'       SET SUBPARM COUNT TO 1
         CLI   0(R7),C')'          END OF ALL SUBPARMS
         BE    JOBSUBR0            YES, GET OUT
JOBSUB04 LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R6,R7               SAVE START OF SECOND PARM
         LA    R15,0               SET PARM LENGTH TO ZERO
JOBSUB05 CLI   0(R7),C' '          END OF PARM
         BE    JOBSUBR2            YES, ERROR 2
         CLI   0(R7),C','          END OF SECOND PARM
         BE    JOBSUB06            YES, GO PROCESS IT
         CLI   0(R7),C')'          END OF SECOND PARM
         BE    JOBSUB06            YES, GO PROCESS LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHARACTER OF PARM
         LA    R15,1(,R15)         ADD 1 TO LENGTH OF PARM
         B     JOBSUB05            LOOP
JOBSUB06 STH   R15,JSUB2L          SAVE LENGTH OF SECOND PARM
         ST    R6,JSUB2A           SAVE ADDRESS OF SECOND PARM
         MVC   JSUBCNT,=H'2'       SET SUBPARM COUNT TO 2
         CLI   0(R7),C')'          END OF ALL SUBPARMS
         BE    JOBSUBR0            YES, GET OUT
JOBSUB07 LA    R7,1(,R7)           INCREMENT PAST ','
         LR    R6,R7               SAVE START OF THIRD PARM
         LA    R15,0               SET PARM LENGTH TO ZERO
JOBSUB08 CLI   0(R7),C' '          END OF PARM
         BE    JOBSUBR2            YES, ERROR 2
         CLI   0(R7),C','          END OF THIRD PARM
         BE    JOBSUBR3            YES, BUT CANNOT HAVE MORE THAN THREE
         CLI   0(R7),C')'          END OF SECOND PARM
         BE    JOBSUB09            YES, GO PROCESS LENGTH FIELD
         LA    R7,1(,R7)           INCREMENT TO NEXT CHARACTER OF PARM
         LA    R15,1(,R15)         ADD 1 TO LENGTH OF PARM
         B     JOBSUB08            LOOP
JOBSUB09 STH   R15,JSUB3L          SAVE LENGTH OF THIRD PARM
         ST    R6,JSUB3A           SAVE ADDRESS OF THIRD PARM
         MVC   JSUBCNT,=H'3'       SET SUBPARM COUNT TO 3
JOBSUBR0 LA    R15,0               SET RETURN CODE TO 0
         B     JOBSUB99            GET OUT
JOBSUBR1 LA    R15,1               SET RETURN CODE TO 1
         B     JOBSUB99            GET OUT
JOBSUBR2 LA    R15,2               SET RETURN CODE TO 2
         B     JOBSUB99            GET OUT
JOBSUBR3 LA    R15,3               SET RETURN CODE TO 3
JOBSUB99 LR    R1,R7               POINT TO ENDING ')"
         L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         ST    R1,24(,R13)         SET R1 IN SAVE TO ADDR OF ENDING ")"
         RETURN (14,12),RC=(15)    RETURN TO CALLER
         LTORG
SAVE14   DS    18F                 ROUTINE SAVE AREA
         EJECT
         SPACE 3
         DROP  R9,R10,R11,R12
         END
