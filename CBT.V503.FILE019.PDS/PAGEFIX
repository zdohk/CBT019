         TITLE 'PAGE FIX PROGRAM'
***********************************************************************
*                                                                     *
*                         P A G E F I X                               *
*                                                                     *
*        THIS PROGRAM IS DESIGNED TO LIMIT REAL STORAGE               *
*        AVAILABLE TO A CPU BY DOING A GETMAIN TO SUBPOOL 1           *
*        BY A VALUE SPECIFIED IN THE INPUT PARM OR ENTERED            *
*        BY A MODIFY COMMAND FROM THE CONSOLE. THE GETMAINED          *
*        AREA IS THEN CLEARED TO REFERENCE THE STORAGE.  THE          *
*        GETMAINED AREA IS THEN PAGEFIXED TO PREVENT PAGING           *
*        WHILE WAITING FOR THE NEXT STOP/MODIFY COMMAND.              *
*                                                                     *
*        THE VALUE GIVEN TO THE PROGRAM BY THE EXECUTION              *
*        PARM OR THE MODIFY COMMAND MUST BE IN THE FORM               *
*        NNNNNM (MEGABYTES) WHERE THE VALUE MUST NOT EXCEED           *
*        THE MAXIMUM AVAILABLE TO THE JOB OR TASK.                    *
*                                                                     *
*        A MODIFY DOES A FREEMAIN TO THE PREVIOUS GETMAIN             *
*        AREA (IF ANY) PRIOR TO DOING THE NEW GETMAIN.                *
*                                                                     *
*              M O D I F Y   C O M M A N D   F O R M A T              *
*                                                                     *
*        F PAGEFIX,30M           PAGEFIX 30 MEG                       *
*        F PAGEFIX,STATUS        ISSUE A WTO GIVING CURRENT           *
*                                PAGEFIX AMOUNT                       *
*        P PAGEFIX               STOP                                 *
*                                                                     *
*                                                                     *
*        THIS PROGRAM MUST BE AUTHORIZED TO ALLOW THE USE OF          *
*        SYSEVENT, MODESET, PGFIX, PGFREE AND QEDIT MACROS.           *
*                                                                     *
*               * * * *  W A R N I N G  * * * *                       *
*                                                                     *
*        THE SIZE OF THE VALUE GIVEN TO THE PROGRAM MUST NOT          *
*        EXCEED THE VALUE OF AVAILABLE UNFIXED MAIN STORAGE           *
*        OR THE AMOUNT AVAILABLE ABOVE THE 16 MEG LINE.  THE          *
*        NORMAL SYSTEM DEFINED MAXIMUM STORAGE ABOVE THE 16           *
*        MEG LINE IS 32 MEG.  THE SMF EXIT IEFUSI IS FREQUENTLY       *
*        USED TO EXTEND THIS VALUE.                                   *
*                                                                     *
*                                                                     *
*        WRITTEN BY:   JOHN V. HOOPER                                 *
*                      SALISBURY, N.C.                                *
*                                                                     *
*        SUPPORT   :   SBGOLOB@CBTTAPE.ORG                            *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                  M A C R O S   U S E D                              *
*                                                                     *
*        1)   EXTRACT           SYS1.MACLIB                           *
*        2)   FREEMAIN          SYS1.MACLIB                           *
*        3)   GETMAIN           SYS1.MACLIB                           *
*        4)   IEZCIB            SYS1.AMODGEN                          *
*        5)   MODESET           SYS1.MACLIB                           *
*        6)   PGFIX             SYS1.AMODGEN                          *
*        7)   PGFREE            SYS1.AMODGEN                          *
*        8)   QEDIT             SYS1.MACLIB                           *
*        9)   SYSEVENT          SYS1.AMODGEN                          *
*        10)  TESTAUTH          SYS1.MACLIB                           *
*        11)  WAIT              SYS1.MACLIB                           *
*        12)  WTO               SYS1.MACLIB                           *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                  P R O G R A M   A T T R I B U T E S                *
*                                                                     *
*        PROGRAM                                                      *
*                                                                     *
*        SIZE     1 K                                                 *
*        NOT RENT, NOT REUS, NOT REFR, AUTHORIZED                     *
*                                                                     *
*        SUPERVISOR STATE                                             *
*        PROTECT KEY ZERO                                             *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                        REGISTER EQUATES                             *
*                                                                     *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
***********************************************************************
*                                                                     *
*        START OF PROGRAM                                             *
*                                                                     *
***********************************************************************
PAGEFIX  CSECT
PAGEFIX  AMODE 31
PAGEFIX  RMODE 24
         STM   R14,R12,12(R13)     SAVE INPUT REGISTERS
         LR    R12,R15             SET BASE REGISTER VALUE
         USING PAGEFIX,R12         SET PROGRAM ADDRESSABILITY
         LR    R2,R1               SAVE PARM ADDRESS
         LR    R11,R13             SAVE AREA ADDRESS
         LA    R13,SAVEAREA        SET R13
         ST    R13,8(,R11)         CHAIN IT
         ST    R11,4(,R13)         BACKWARD POINTER
***********************************************************************
*                                                                     *
*        TEST TO INSURE THAT WE ARE APF AUTHORIZED                    *
*                                                                     *
***********************************************************************
         TESTAUTH FCTN=1           TEST FOR APF AUTHORIZATION
         LTR   R15,R15             TEST RETURN CODE
         BZ    AUTHOK              ZERO, AUTHORIZED
         WTO   'PGFX0001 PROGRAM NOT PROPERLY AUTHORIZED - REQUEST WILLX
                TERMINATE',ROUTCDE=(2)
         B     END                 GO TO END OF JOB
         SPACE 3
***********************************************************************
*                                                                     *
*        MAKE OURSELVES SUPERVISOR STATE AND PROTECT KEY ZERO.        *
*                                                                     *
***********************************************************************
AUTHOK   MODESET  KEY=ZERO,MODE=SUP
***********************************************************************
*                                                                     *
*        MAKE OURSELVES NON-SWAPPABLE.                                *
*                                                                     *
***********************************************************************
         SYSEVENT DONTSWAP             FLAG JOB NONSWAP
***********************************************************************
*                                                                     *
*        GET FIXED STORAGE FOR WORK AREA.                             *
*                                                                     *
***********************************************************************
         GETMAIN RU,LV=76,SP=234       GET LSQA
         ST    R1,ECB                  SAVE GETMAIN ADDR
         L     R1,MAXM                 GET  MAX "M" VALUE
         CVD   R1,DOUBLE               CONVERT TO PACKED
         ED    MAXVAL,DOUBLE+5         MAKE VALUE PRINTABLE
         MVC   EXCEEDM+54(5),MAXVAL+1  MOVE VALUE TO WTO MESSAGE
***********************************************************************
*                                                                     *
*        PROCESS INPUT PARM (IF ANY).                                 *
*                                                                     *
***********************************************************************
PROCPARM LTR   R2,R2                   CHECK PARM POINTER
         BZ    NOPARM                  ZERO, NO PARM
         L     R2,0(,R2)               LOAD PARM ADDRESS
         LTR   R2,R2                   CHECK PARM ADDRESS
         BZ    NOPARM                  ZERO, NO PARM
         LH    R15,0(,R2)              LOAD PARM LENGTH
         LTR   R15,R15                 CHECK PARM LENGTH
         BZ    NOPARM                  ZERO, NO PARM
         CH    R15,=H'8'               SEE IF EXCEEDS 8 BYTES
         BH    MODERROR                YES, ERROR
         STH   R15,PARMLEN             SAVE LENGTH
         BCTR  R15,0                   MAKE MACHINE LENGTH FOR EX
         EX    R15,MOVEPARM            MOVE PARM TO SAVE AREA
         B     NOPARM                  BYPASS EXECUTED INSTRUCTION
MOVEPARM MVC   PARM(0),2(R2)           **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        SET UP FOR STOP/MODIFY PROCESSING.                           *
*                                                                     *
***********************************************************************
NOPARM   EXTRACT ANSWER,FIELDS=COMM    GET ADDR CMD SCHED COMM LIST
         L     R8,ANSWER               LOAD ADDRESS CMD SCHED COMM LIST
         USING COMMAREA,R8             SET ADDRESSABILITY TO COMM LIST
         L     R4,COMMCIB              GET PTR TO CIB
         USING CIB,R4                  SET ADDRESSABILITY TO CIB
         LTR   R4,R4                   TEST CIB ADDRESS
         BZ    NOSTART                 ZERO, NOT A STARTED TASK
         QEDIT ORIGIN=COMMCIB,BLOCK=(4) FREE START CIB
NOSTART  QEDIT ORIGIN=COMMCIB,CIBCTR=1 SET CIB LIMIT
         B     CHKINPUT                GO CHECK INPUT PARM
         EJECT
***********************************************************************
*                                                                     *
*        WAIT FOR STOP OR MODIFY COMMAND.                             *
*                                                                     *
***********************************************************************
WAIT     L     R1,COMMECB              LOAD ADDR OF STOP/MODIFY ECB
         WAIT  ECB=(1)                 WAIT FOR STOP/MODIFY
         L     R4,COMMCIB              LOAD ADDR OF CIB
         CLI   CIBVERB,CIBSTOP         WAS STOP COMMAND ISSUED?
         BE    END                     YES, BRANCH
         CLI   CIBVERB,CIBMODFY        WAS MODIFY COMMAND ISSUED?
         BE    MODIFY                  YES, BRANCH
         WTO   'PGFX0002 UNKNOWN SYSTEM COMMUNICATION',ROUTCDE=(2)
         B     NEXTCMD                 GO WAIT FOR PROPER STOP/MODIFY
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE MODIFY OPERANDS                                  *
*                                                                     *
***********************************************************************
MODIFY   OI    SWITCH,FREECIB          TURN ON NEED TO FREE CIB IND
         LH    R15,CIBDATLN            LOAD MODIFY DATA LENGTH
         LTR   R15,R15                 CHECK LENGTH
         BZ    MODERROR                ZERO, IGNORE
         CH    R15,=H'8'               SEE IF EXCEEDS 8 BYTES
         BH    MODERROR                YES, ERROR
         STH   R15,PARMLEN             AND SAVE IT
         BCTR  R15,0                   MAKE MACHINE LENGTH FOR EX
         EX    R15,MOVEMDFY            MOVE MODIFY INFO TO SAVE AREA
         B     CHKINPUT                BYPASS EXECUTED INSTRUCTION
MOVEMDFY MVC   PARM(0),CIBDATA         **** EXECUTE ONLY ****
CHKINPUT OC    PARM(8),BLANKS          MAKE UPPER CASE
         CLC   PARM(6),=C'STATUS'      SEE IF STATUS REQUESTED
         BE    STATUS                  YES, BRANCH
         LA    R5,PARM                 GET START ADDR OF MODIFY REQUEST
         SLR   R6,R6                   CLEAR REG FOR COUNTER
         LH    R7,PARMLEN              SET MAX INFORMATION LENGTH
         LTR   R7,R7                   CHECK LENGTH
         BZ    NEXTCMD                 ZERO, GO WAIT FOR NEXT MODIFY
         CH    R7,=H'2'                SEE IF AT LEAST 2 CHARACTERS
         BL    MODERROR                NO, ERROR
         BCTR  R7,0                    REDUCE LENGTH BY 1
MODLOOP  CLI   0(R5),C'0'              TEST FOR NUMERIC
         BL    MODERROR                NO, ERROR
         CLI   0(R5),C'9'              TEST FOR NUMERIC
         BH    MODERROR                NO, ERROR
         LA    R6,1(R6)                ADD 1 TO LENGTH
         LA    R5,1(R5)                ADD 1 TO ADDRESS
         BCT   R7,MODLOOP              LOOP
         CLI   0(R5),C'M'              SEE IF ENDS IN AN 'M'
         BE    MODEND                  YES, OK
MODERROR WTO   'PGFX0003 INVALID MODIFY VALUE - MUST BE IN THE FORM NNNX
               NM',ROUTCDE=(2)
         B     NEXTCMD                 GO WAIT FOR PROPER STOP/MODIFY
         EJECT
***********************************************************************
*                                                                     *
*        FREE STORAGE FROM PREVIOUS PAGEFIX VALUE.                    *
*                                                                     *
***********************************************************************
MODEND   LTR   R6,R6                   TEST NUMERIC LENGTH
         BZ    MODERROR                ZERO, ERROR
         MVC   WTOL1+25(8),BLANKS      BLANK GETMAIN AMT
         EX    R6,MVPARM               MOVE PARM TO WTO LIST FORM
         WTO   MF=(E,WTOL1)            TELL OPERATOR ABOUT IT
         L     R1,GETADDR              LOAD PREVIOUS GETMAIN ADDR
         LTR   R1,R1                   TEST PREVIOUS GETMAIN ADDR
         BZ    ENDFREE                 ZERO, THIS IS THE FIRST
         L     R1,GETADDR              LOAD START ADDR OF GETMAIN AREA
         L     R15,GETAMT              LOAD SIZE OF GETMAIN AREA
         AR    R15,R1                  ADD SIZE TO ADDR FOR END ADDR
         BCTR  R15,R0                  MINUS ONE
         PGSER R,FREE,A=(1),EA=(15),RELEASE=Y
         LR    R11,R15                 SAVE RETURN CODE
         LTR   R11,R11                 TEST RETURN CODE
         BZ    PGFREE1                 ZERO, OK
BADPGFRE WTO   'PGFX0005 PGFREE FOR STORAGE FAILED',                   X
               ROUTCDE=2
         ABEND 0005,DUMP
PGFREE1  L     R1,GETADDR              LOAD START ADDR OF GETMAIN AREA
         L     R0,GETAMT               LOAD SUBPOOL AND LENGTH VALUE
         FREEMAIN RU,LV=(0),A=(1),SP=1 FREE PREVIOUS CORE
         XC    GETADDR,GETADDR         CLEAR GETMAIN ADDRESS
         B     ENDFREE                 BYPASS EXECUTED INSTRUCTION
MVPARM   MVC   WTOL1+25(0),PARM        **** EXECUTE ONLY ****
WTOL1    WTO   'PGFX0000 REQUEST FOR         ',ROUTCDE=(2),MF=L
ENDFREE  BCTR  R6,0                    MAKE INFO MACHINE LENGTH
         EX    R6,PACKPARM             PACK INFO
         CVB   R1,DOUBLE               CONVERT INFO TO BINARY
         LTR   R1,R1                   CHECK GETMAIN LENGTH
         BZ    NEXTCMD                 ZERO, NO GETMAIN
         ST    R1,CURRM                SAVE CURRENT "M" SPECIFICATION
NOTMEG   C     R1,MAXM                 SEE IF EXCEEDS MAX
         BNH   MODOK                   NO, BRANCH
EXCEEDM  WTO   'PGFX0004 INVALID MODIFY VALUE - CANNOT EXCEED XXXXXM', X
               ROUTCDE=(2)
         B     NEXTCMD                 GO WAIT FOR PROPER STOP/MODIFY
PACKPARM PACK  DOUBLE,PARM(0)          **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        GET AND PAGEFIX REQUESTED STORAGE.                           *
*                                                                     *
***********************************************************************
MODOK    SLA   R1,20                   MULTIPLY BY 1 MEG (1024 * 1024)
         ST    R1,GETAMT               AND SAVE IT FOR GETMAIN
         L     R0,GETAMT               LOAD SUBPOOL AND LENGTH VALUE
         GETMAIN RU,LV=(0),LOC=ANY,SP=1,BNDRY=PAGE
         ST    R1,GETADDR              SAVE GETMAIN ADDRESS
         L     R2,CURRM                LOAD NUMBER OF MEGS
         LR    R0,R1                   SET START ADDRESS
CLEARM   L     R1,ONEMEG               SET LENGTH TO CLEAR
         SLR   R15,R15                 SET LENGTH OF "FROM" TO ZERO
         MVCL  R0,R14                  CLEAR 1 MEG
         BCT   R2,CLEARM               LOOP UNTIL ZERO ENTIRE AREA
         L     R1,GETADDR              LOAD START ADDR OF GETMAIN AREA
         L     R15,GETAMT                      GETMAINED
         AR    R15,R1                  ADD SIZE TO ADDR FOR END ADDR
         BCTR  R15,R0                  MINUS ONE
         L     R5,ECB                  LOAD ECB ADDRESS
         XC    0(4,R5),0(R5)           CLEAR ECB
         LR    R0,R5                   SAVE ECB ADDRESS
         PGSER R,FIX,A=(1),EA=(15),ECB=(0),LONG=Y,RELEASE=N
         LR    R11,R15                 SAVE RETURN CODE
         LTR   R11,R11                 TEST RETURN CODE
         BZ    NEXTCMD                 ZERO, OK
         CH    R11,=H'8'               SEE IF RETURN CODE = 8
         BE    WAITPG                  YES, WAITING FOR PAGEIN
         B     BADPGFIX                GO ABEND JOB
WAITPG   WAIT  ECB=(5)                 WAIT FOR PAGEFIX TO COMPLETE
         XR    R11,R11                 CLEAR REG FOR ICM
         ICM   R11,7,1(R5)             LOAD ECB CODE
         LTR   R11,R11                 TEST ECB RETURN CODE
         BZ    NEXTCMD                 ZERO, OK
BADPGFIX WTO   'PGFX0005 PGFIX FOR STORAGE FAILED',                    X
               ROUTCDE=2
         ABEND 0005,DUMP
         EJECT
***********************************************************************
*                                                                     *
*        SET UP FOR NEXT STOP/MODIFY COMMAND.                         *
*                                                                     *
***********************************************************************
NEXTCMD  TM    SWITCH,FREECIB          NEED TO FREE MODIFY CIB?
         BZ    NULL                    NO, BYPASS QEDIT
         QEDIT ORIGIN=COMMCIB,BLOCK=(4) FREE LAST CIB
         OI    SWITCH,255-FREECIB      TURN OFF NEED TO FREE CIB IND
NULL     L     R1,COMMECB              LOAD ADDR OF STOP/MODIFY ECB
         XC    0(4,R1),0(R1)           CLEAR ECB FOR NEXT STOP/MODIFY
         B     WAIT                    GO WAIT FOR NEXT STOP/MODIFY
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE STATUS REQUEST.                                  *
*                                                                     *
***********************************************************************
STATUS   SLR   R15,R15                 CLEAR REGISTER FOR ICM
         L     R15,GETAMT              LOAD LAST GETMAIN SIZE
         SRA   R15,20                  DIVIDE BY 1024 * 1024 (FOR "M")
         CVD   R15,DOUBLE              CONVERT TO PACKED
         MVC   WTOL2+25(6),MASK        MOVE EDIT MASK TO WTO LIST FORM
         ED    WTOL2+25(6),DOUBLE+5    EDIT LAST GETMAIN AMT TO WTO
         L     R15,MAXM                LOAD MAX  GETMAIN SIZE
         CVD   R15,DOUBLE              CONVERT TO PACKED
         MVC   WTOL2+42(6),MASK        MOVE EDIT MASK TO WTO LIST FORM
         ED    WTOL2+42(6),DOUBLE+5    EDIT LAST GETMAIN AMT TO WTO
         WTO   MF=(E,WTOL2)            TELL OPERATOR ABOUT IT
         B     NEXTCMD                 GO GET NEXT STOP/MODIFY CMD
WTOL2    WTO   'PGFX0000 CURRENT SIZEXXXXXXM  MAX SIZEXXXXXXM',        X
               ROUTCDE=(2),MF=L
         EJECT
***********************************************************************
*                                                                     *
*        END OF PROCESSING                                            *
*                                                                     *
*        FREE ALL STORAGE AND RETURN CONTROL TO THE SYSTEM            *
*                                                                     *
***********************************************************************
END      L     R1,GETADDR              LOAD PREVIOUS GETMAIN ADDR
         BZ    END1                    ZERO, THIS IS THE FIRST
         L     R1,GETADDR              LOAD START ADDR OF GETMAIN AREA
         L     R15,GETAMT              LOAD SIZE OF GETMAIN AREA
         AR    R15,R1                  ADD SIZE TO ADDR FOR END ADDR
         BCTR  R15,R0                  MINUS ONE
         PGSER  R,FREE,A=(1),EA=(15),RELEASE=Y
         LR    R11,R15                 SAVE RETURN CODE
         LTR   R11,R11                 TEST RETURN CODE
         BZ    PGFREE2                 ZERO, OK
         WTO   'PGFX0006 PGFREE FOR STORAGE FAILED',                   X
               ROUTCDE=2
         ABEND 0006,DUMP
PGFREE2  L     R1,GETADDR              LOAD START ADDR OF GETMAIN AREA
         L     R0,GETAMT               LOAD SUBPOOL AND LENGTH VALUE
         FREEMAIN RU,LV=(0),A=(1)      FREE PREVIOUS CORE
         XC    GETADDR,GETADDR         CLEAR GETMAIN ADDRESS
END1     L     R1,ECB                  LOAD ECB CORE ADDRESS
         LTR   R1,R1                   TEST ADDRESS
         BZ    END2                    ZERO, NON TO FREE
         FREEMAIN RU,LV=76,SP=234,A=(1) FREE LSQA
END2     L     R13,4(R13)              LOAD ORIG SAVE AREA
         LM    R14,R12,12(R13)         RESTORE ORIG REGS
         SLR   R15,R15                 SET RETURN CODE TO ZERO
         BR    R14                     RETURN TO O/S
         EJECT
***********************************************************************
*                                                                     *
*        CONSTANTS AND WORK AREAS                                     *
*                                                                     *
***********************************************************************
         LTORG
SAVEAREA DS    18F                     PROGRAM SAVE AREA
DOUBLE   DS    D                       DOUBLE WORD WORK AREA
ANSWER   DS    F                       EXTRACT ANSWER AREA
ECB      DC    F'0'                    LSQA AREA ADDRESS FOR PGFIX ECB
GETADDR  DC    F'0'                    GETMAINED AREA ADDRESS
GETAMT   DC    A(0)                    GETMAIN AMOUNT
CURRM    DC    F'0'                    SPECIFIED VALUE FOR NNNNM
ONEMEG   DC    A(1024*1024)            ONE MEG CONSTANT
MAXM     DC    F'500'                  DETERMINED MAX VALUE FOR NNNNM
MAXVAL   DC    X'402020202120'         PRINTABLE MAX VALUE FOR "M"
BLANKS   DC    8C' '                   CHARACTER STRING OF BLANKS
PARMLEN  DC    H'0'                    PARM OR MODIFY LEN
PARM     DC    CL8' '                  PARM OR MODIFY DATA
MASK     DC    X'402020202120'         GETMAIN SIZE EDIT MASK
SWITCH   DC    X'00'                   MULTIPLE PURPOSE SWITCHES
FREECIB  EQU   X'80'                   NEED TO FREE CIB
         EJECT
COMMAREA DSECT                         EXTRACT COMM AREA DSECT
COMMECB  DS    F                       STOP/MODIFY ECB ADDRESS
COMMCIB  DS    F                       CIB ADDRESS
         EJECT
CIB      DSECT                         COMMAND INPUT BUFFER
         IEZCIB ,                      MAP CIB
         END
