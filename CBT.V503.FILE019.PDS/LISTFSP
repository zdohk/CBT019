         TITLE 'LISTFSP COMMAND FOR TSO'
***********************************************************************
*                                                                     *
*        THE TSO LISTFSP COMMAND IS DESIGNED TO RETURN DASD VOLUME    *
*        INFORMATION CONCERNING MOUNT ATTRIBUTES, VOLUME USE, AND     *
*        FREE SPACE INFORMATION.  THE FORMAT OF THE COMMAND IS AS     *
*        FOLLOWS:                                                     *
*                                                                     *
*        LISTFSP VOLUME/UNITADD/*                                     *
*                HARDINFO/NOHARDINFO                                  *
*                TOTALS/NOTOTALS                                      *
*                SMSONLY/NOSMS                                        *
*                INXVTOCONLY/NOIXVTOC                                 *
*                VOLSER(VOLUME)                                       *
*                UNITADDRESS/ADDRESS(AAAA)                            *
*                DEVICETYPE(DEVICETYPE)                               *
*                STORAGEGROUP/SG(SSSSSSSS)                            *
*                SORT(FLD1,A/D,FLD2,A/D,FLD3,A/D)                     *
*                                                                     *
*                                                                     *
*        WHERE THE OPERAND CAN BE A FULL DASD VOLUME NAME, A VOLUME   *
*        NAME PREFIX, OR A UNIT ADDRESS PREFIXED BY "@", OR "*"       *
*        FOR ALL VOLUMES.  IF NO OPERAND IS ENTERED, THE DEFAULT      *
*        UNITNAME FOR THE TSO USER WILL BE TRANSLATED INTO EITHER     *
*        "*" OR A VOLUME NAME PREFIX DEPENDING ON THE NAME AS         *
*        DEFINED IN AN INTERNAL TABLE.                                *
*                                                                     *
*        THE STORAGEGROUP SELECTION CRITERIA IS ONLY VALID IF         *
*        SMS SUPPORT WAS SELECTED IN THE SETC FOR ASSEMBLY            *
*        VARIABLE &SMS.                                               *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        MACROS USED IN THIS PROGRAM                                  *
*                                                                     *
*        1)  CVT      - SYS1.MACLIB                                   *
*        2)  FREEMAIN - SYS1.MACLIB                                   *
*        3)  GETMAIN  - SYS1.MACLIB                                   *
*        4)  IECDDCE  - SYS1.MODGEN                                   *
*        5)  IECSDSL1 - SYS1.MODGEN                                   *
*        6)  IEFJESCT - SYS1.MACLIB                                   *
*        7)  IEFJSSIB - SYS1.MACLIB                                   *
*        8)  IEFJSSOB - SYS1.MACLIB                                   *
*        9)  IEFSSREQ - SYS1.MACLIB                                   *
*        10) IEFSSSA  - SYS1.MODGEN                                   *
*        11) IEFUCBOB - SYS1.MACLIB                                   *
*        12) IGDVLD   - SYS1.MODGEN                                   *
*        13) IHAECVT  - SYS1.MODGEN                                   *
*        14) IKJENDP  - SYS1.MACLIB                                   *
*        15) IKJIDENT - SYS1.MACLIB                                   *
*        16) IKJKEYWD - SYS1.MACLIB                                   *
*        17) IKJNAME  - SYS1.MACLIB                                   *
*        18) IKJPARM  - SYS1.MACLIB                                   *
*        19) IKJPSCB  - SYS1.MACLIB                                   *
*        20) IKJRLSA  - SYS1.MACLIB                                   *
*        21) IKJSUBF  - SYS1.MACLIB                                   *
*        22) IKJUPT   - SYS1.MACLIB                                   *
*        23) LINK     - SYS1.MACLIB                                   *
*        24) LSPACE   - SYS1.MODGEN                                   *
*        25) PUTLINE  - SYS1.MACLIB                                   *
*        26) RETURN   - SYS1.MACLIB                                   *
*        27) SAVE     - SYS1.MACLIB                                   *
*        28) UCBDEVN  - SYS1.MACLIB                                   *
*        29) UCBSCAN  - SYS1.MACLIB                                   *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                        C H A N G E    L O G                         *
*                                                                     *
*        VERSION 2.0  01/04/08                                        *
*                                                                     *
*             CHANGED STORAGE GROUP PARAMETER TO ALLOW GENERIC        *
*             SPECIFICATION INSTEAD OF DEFAULTING TO A GENERIC        *
*             NAME.                                                   *
*                                                                     *
*             IN PRIOR VERSION THE STORAGE GROUP NAME WAS ASSUMED     *
*             TO BE GENERIC.  THAT IS, A STORAGE GROUP NAME OF        *
*             "PRD" WOULD SELECT ALL STORAGE GROUPS THAT START        *
*             WITH "PRD".  WITH THIS CHANGE A STORAGE GROUP NAME      *
*             OF "PRD" WILL SELECT ONLY STORAGE GROUPS THAT MATCH     *
*             "PRD     ".  IF A GENERIC NAME IS DESIRED, ENTER        *
*             A STORAGE GROUP NAME OF "PRD*" TO MAKE THE COMMAND      *
*             SELECT THOSE STARTING WITH "PRD".                       *
*                                                                     *
*        VERSION 3.0  02/06/16                                        *
*                                                                     *
*             CHANGED THE MAXIMUM NUMBER OF VOLUMES TO  ABOUT 55K     *
*                                                                     *
*             CHANGED THE DETERMINATION OF THE 3380/3390 MODEL        *
*             NUMBER TO BE EXTRACTED FROM THE DCE (UCB DASD CLASS     *
*             EXTENSION.  MANY DISKS TODAY ARE EITHER MINI-DISKS OR   *
*             VIRTUAL.  THE MODEL NUMBER IS NO LONGER CONSISTENT.     *
*                                                                     *
*             CHANGED THE CODE TO SUPPORT EAV VOLUMES - VOLUMES       *
*             THAT ARE LARGER THAN 65,520 CYLINDERS IN SIZE.          *
*                                                                     *
*             CHANGED THE MAXIMUM NUMBER OF CYLINDERS TO BE           *
*             999,999,999.                                            *
*                                                                     *
*             CHANGED THE VOLUME NAME AND UNIT ADDRESS VALUES         *
*             TO SUPPORT MASKING.  A "?" CAN BE ENTERED IN THE        *
*             VALUE SPECIFIED AS A PLACEHOLDER CHARACTER WHERE        *
*             THE VALUE FOR THAT CHARACTER IS NOT USED AS PART        *
*             OF THE SEARCH CRITERIA.                                 *
*                                                                     *
*             ADDED A NEW OPTION - HARDINFO - TO DISPLAY VOLUME       *
*             INFORMATION INCLUDING TOTAL SIZE IN CYLINDERS AND       *
*             THE NUMBER OF ALTERNATE CYLINDERS.  MORE DETAILED       *
*             INFORMATION SUCH AS LARGEST FREE EXTENT AND TOTAL       *
*             FREE SPACE ARE NOT DISPLAYED.                           *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                    LINKAGE INFORMATION                              *
*                                                                     *
*                                                                     *
*            EXTERNAL ROUTINES                                        *
*                                                                     *
*        1)  IKJPARS  - TSO PARSE ROUTINE                             *
*                                                                     *
*                                                                     *
*            LINKAGE EDITOR INFORMATION                               *
*                                                                     *
*        SIZE       - 11 K                                            *
*        ATTRIBUTES - RENT, REUS, REFR                                *
*                                                                     *
*                                                                     *
*                                                                     *
*        WRITTEN BY:   JOHN V. HOOPER                                 *
*                      SALISBURY, N.C.                                *
*                                                                     *
*        SUPPORT   :   SBGOLOB@CBTTAPE.ORG                            *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        ASSEMBLER VARIABLES                                          *
*                                                                     *
***********************************************************************
         LCLC  &SMS
&SMS     SETC  'YES'               GENERATE SMS SUPPORT (YES OR NO)
         EJECT
***********************************************************************
*                                                                     *
*        REGISTER EQUATES                                             *
*                                                                     *
***********************************************************************
         SPACE 3
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
***********************************************************************
*                                                                     *
*        START OF PROGRAM                                             *
*                                                                     *
***********************************************************************
LISTFSP  CSECT
LISTFSP  AMODE 31
LISTFSP  RMODE ANY
         SAVE  (14,12),,LISTF.COMMAND.VERSION.3.0.&SYSDATE..&SYSTIME.
         LR    R10,R15             SET FIRST BASE REGISTER
         LA    R11,4095(R10)       SET SECOND
         LA    R11,1(,R11)             BASE REGISTER
         LA    R12,4095(R11)       SET THIRD
         LA    R12,1(,R12)             BASE REGISTER
         USING LISTFSP,R10,R11,R12 SET ADDRESSABILITY TO CSECT
         LR    R2,R1               SAVE CPPL ADDRESS
         GETMAIN R,LV=LDSA         GET WORK AREA
         ST    R1,8(R13)           SAVE NEW SAVE ADDRESS IN OLD
         ST    R13,4(R1)           SAVE OLD SAVE ADDRESS IN NEW
         LR    R13,R1              SET NEW SAVE AREA ADDRESS
         USING WORKA,R13           SET ADDRESSABILITY TO WORK AREA
         MVC   CPPL(16),0(R2)      SAVE CPPL
         XC    SWITCH,SWITCH       ZERO MISC BIT SWITCHES
         XC    SWITCH1,SWITCH1     ZERO MISC BIT SWITCHES
         GETMAIN R,LV=GETL,LOC=ANY GET VOLUME TABLE
         ST    R1,VOLTBL           SAVE ADDRESS OF VOLUME TABLE
         XC    VOLENTS,VOLENTS     ZERO THE NUMBER OF ENTRIES IN TBL
         XC    TBLFIRST,TBLFIRST   ZERO ADDRESS OF FIRST TBL ENTRY
         XC    TBLLAST,TBLLAST     ZERO ADDRESS OF LAST TBL ENTRY
***********************************************************************
*                                                                     *
*        INITIALIZE THE IOPL FOR PUTLINE                              *
*                                                                     *
***********************************************************************
         MVC   IOPL+0(4),CPPLUPT   SAVE UPT ADDRESS IN IOPL
         MVC   IOPL+4(4),CPPLECT   SAVE ECT ADDRESS IN IOPL
         LA    R15,ECB             LOAD ADDRESS OF MY ECB
         ST    R15,IOPL+8          SAVE IN IOPL
***********************************************************************
*                                                                     *
*        INITIALIZE THE PUTLINE CONTROL BLOCKS                        *
*                                                                     *
***********************************************************************
         MVC   PUTLINE(LPUTLINE),PUTLINIT INITIALIZE PUTLINE LIST FORM
         LA    R15,1               SET NUMBER OF MESSAGE LINES
         ST    R15,MSGOUT          SAVE IN MSG POINTER LIST
         LA    R15,MSGLINE         LOAD ADDRESS OF MSG LINE
         ST    R15,MSGOUT+4        SAVE IN MSG POINTER LIST
         LA    R15,121             LOAD LENGTH OF MESSAGE LINE
         STH   R15,MSGLINE         SAVE IN MSG LINE
         XC    MSGLINE+2(2),MSGLINE+2 ZERO THE OFFSET FIELD
         MVI   MSGPREF,C' '        BLANK THE MSG PREFIX CHAR
         MVC   MSG,BLANKS          BLANK THE ACTUAL MESSAGE AREA
         AIF   ('&SMS' NE 'YES').NOSMS01
         EJECT
***********************************************************************
*                                                                     *
*        GO EXTRACT THE SMS BASE INFORMATION                          *
*                                                                     *
***********************************************************************
         BAL   R14,GETSMSB         GO GET SMS BASE INFORMATION
.NOSMS01 ANOP
         EJECT
***********************************************************************
*                                                                     *
*        PARSE THE INPUT COMMAND                                      *
*                                                                     *
***********************************************************************
         MVC   PPLUPT,CPPLUPT      SET UPT ADDRESS
         MVC   PPLECT,CPPLECT      SET ECT ADDRESS
         XC    ECB,ECB             ZERO MY ECT
         LA    R15,ECB             LOAD ADDRESS OF MY ECB
         ST    R15,PPLECB          SET MY ECB ADDRESS
         L     R15,=A(LSTFPCL)     LOAD ADDRESS OF PARSE CONTROL LIST
         ST    R15,PPLPCL          SET PCL ADDRESS
         XC    PDLPOINT,PDLPOINT   ZERO PDL
         LA    R15,PDLPOINT        LOAD ADDRESS OF PDL
         ST    R15,PPLPDL          SET POINTER TO PDL
         MVC   PPLBUFF,CPPLCBUF    SET COMMAND BUFFER ADDRESS
         XC    PPLWORK,PPLWORK     ZERO WORK AREA ADDRESS
         LA    R1,PPL              LOAD ADDRESS OF PPL
         LINK  EP=IKJPARS          GO TO PARSE
         LTR   R15,R15             TEST RETURN CODE FROM PARSE
         BNZ   ERROR02             NOT ZERO, ERROR
GOODPARS L     R2,PDLPOINT         LOAD ADDRESS OF PDL
         USING LSTFPDL,R2          SET ADDRESSABILITY TO PDL
         MVC   VOLSER,BLANKS       BLANK THE VOLSER
         XC    VOLSERL,VOLSERL     ZERO THE VOLSER LENGTH
         MVC   UNITADD,BLANKS      BLANK THE UNIT ADDRESS
         XC    UNITADDL,UNITADDL   ZERO THE UNIT ADDRESS LENGTH
         MVC   DEVTYPE,BLANKS      BLANK THE DEVICE TYPE
         XC    DEVTYPEL,DEVTYPEL   ZERO THE DEVICE TYPE LENGTH
         MVC   SG,BLANKS           BLANK THE STORAGE GROUP
         XC    SGL,DEVTYPEL        ZERO THE STORAGE GROUP LENGTH
         EJECT
***********************************************************************
*                                                                     *
*        TEST ALL OF THE PARAMETERS PROCESSED BY PARSE                *
*                                                                     *
***********************************************************************
***********************************************************************
*                                                                     *
*        SEE IF SORT WAS REQUESTED                                    *
*                                                                     *
***********************************************************************
CKSORT   CLC   SORTK(2),=AL2(1)    SEE IF 'SORT' REQUESTED
         BNE   CKHARD              NO GO CHECK HARDWARE INFO
         MVC   SORT1OFF,=X'FFFF'   FLAG NULL SORT1
         MVC   SORT2OFF,=X'FFFF'   FLAG NULL SORT2
         MVC   SORT3OFF,=X'FFFF'   FLAG NULL SORT3
CKSORT1  ICM   R3,15,SUBSRT1A      LOAD ADDRESS OF 1ST SORT PARAMETER
         BZ    CKSORTX             ZERO, NONE
         LH    R4,SUBSRT1A+4       LOAD LENGTH OF PARAMETER
         LTR   R4,R4               TEST LENGTH
         BNP   CKSORTX             ZERO, NONE
         BCTR  R4,0                MAKE MACHINE LENGTH
         LA    R14,OPTNTBL         LOAD ADDRESS OF OPTION TABLE
CKSORT1A CLI   0(R14),X'FF'        SEE IF END OF OPTION TABLE
         BE    CKSORTX             YES, ERROR, SHOULD NEVER HAPPEN
         CH    R4,0(R14)           SEE IF LENGTH GE MIN LENGTH
         BL    CKSORT1B            NO, BYPASS THIS OPTION
         EX    R4,COMPOPT1         SEE IF MATCH ON OPTION
         BE    CKSORT1C            YES, GET PROCESS IT
CKSORT1B LA    R14,20(,R14)        INCREMENT TO NEXT TABLE ENTRY
         B     CKSORT1A            LOOP
CKSORT1C MVC   SORT1OFF,16(R14)    SAVE OFFSET FROM TABLE ENTRY
         MVC   SORT1LEN,18(R14)    SAVE LENGTH FROM TABLE ENTRY
         MVI   SORT1SEQ,C'A'       SET TO ASCENDING
         ICM   R3,15,SUBSRT1B      LOAD ADDRESS OF 1ST SORT SEQUENCE
         BZ    CKSORT2             ZERO, NONE, USE DEFAULT
         CLI   0(R3),C'D'          SEE IF DESCENDING
         BNE   CKSORT2             NO, USE ASCENDING
         MVI   SORT1SEQ,C'D'       SET TO DESCENDING
CKSORT2  ICM   R3,15,SUBSRT2A      LOAD ADDRESS OF 2ND SORT PARAMETER
         BZ    CKSORTX             ZERO, NONE
         LH    R4,SUBSRT2A+4       LOAD LENGTH OF PARAMETER
         LTR   R4,R4               TEST LENGTH
         BNP   CKSORTX             ZERO, NONE
         BCTR  R4,0                MAKE MACHINE LENGTH
         LA    R14,OPTNTBL         LOAD ADDRESS OF OPTION TABLE
CKSORT2A CLI   0(R14),X'FF'        SEE IF END OF OPTION TABLE
         BE    CKSORTX             YES, ERROR, SHOULD NEVER HAPPEN
         CH    R4,0(R14)           SEE IF LENGTH GE MIN LENGTH
         BL    CKSORT2B            NO, BYPASS THIS OPTION
         EX    R4,COMPOPT1         SEE IF MATCH ON OPTION
         BE    CKSORT2C            YES, GET PROCESS IT
CKSORT2B LA    R14,20(,R14)        INCREMENT TO NEXT TABLE ENTRY
         B     CKSORT2A            LOOP
CKSORT2C MVC   SORT2OFF,16(R14)    SAVE OFFSET FROM TABLE ENTRY
         MVC   SORT2LEN,18(R14)    SAVE LENGTH FROM TABLE ENTRY
         MVI   SORT2SEQ,C'A'       SET TO ASCENDING
         ICM   R3,15,SUBSRT2B      LOAD ADDRESS OF 2ND SORT SEQUENCE
         BZ    CKSORT3             ZERO, NONE, USE DEFAULT
         CLI   0(R3),C'D'          SEE IF DESCENDING
         BNE   CKSORT3             NO, USE ASCENDING
         MVI   SORT2SEQ,C'D'       SET TO DESCENDING
CKSORT3  ICM   R3,15,SUBSRT3A      LOAD ADDRESS OF 3RD SORT PARAMETER
         BZ    CKSORTX             ZERO, NONE
         LH    R4,SUBSRT3A+4       LOAD LENGTH OF PARAMETER
         LTR   R4,R4               TEST LENGTH
         BNP   CKSORTX             ZERO, NONE
         BCTR  R4,0                MAKE MACHINE LENGTH
         LA    R14,OPTNTBL         LOAD ADDRESS OF OPTION TABLE
CKSORT3A CLI   0(R14),X'FF'        SEE IF END OF OPTION TABLE
         BE    CKSORTX             YES, ERROR, SHOULD NEVER HAPPEN
         CH    R4,0(R14)           SEE IF LENGTH GE MIN LENGTH
         BL    CKSORT3B            NO, BYPASS THIS OPTION
         EX    R4,COMPOPT1         SEE IF MATCH ON OPTION
         BE    CKSORT3C            YES, GET PROCESS IT
CKSORT3B LA    R14,20(,R14)        INCREMENT TO NEXT TABLE ENTRY
         B     CKSORT3A            LOOP
CKSORT3C MVC   SORT3OFF,16(R14)    SAVE OFFSET FROM TABLE ENTRY
         MVC   SORT3LEN,18(R14)    SAVE LENGTH FROM TABLE ENTRY
         MVI   SORT3SEQ,C'A'       SET TO ASCENDING
         ICM   R3,15,SUBSRT3B      LOAD ADDRESS OF 2ND SORT SEQUENCE
         BZ    CKSORTX             ZERO, NONE, USE DEFAULT
         CLI   0(R3),C'D'          SEE IF DESCENDING
         BNE   CKSORTX             NO, USE ASCENDING
         MVI   SORT3SEQ,C'D'       SET TO DESCENDING
CKSORTX  CLC   SORT1OFF,=X'FFFF'   SEE IF NULL SORT
         BE    CKHARD              YES, GET OUT
         OI    SWITCH,DOSORT       TURN ON SORT INDICATOR
         SPACE 3
***********************************************************************
*                                                                     *
*        SEE IF HARDWARE INFO WAS REQUESTED                           *
*                                                                     *
***********************************************************************
CKHARD   CLC   HARDOPT(2),=AL2(1)   SEE IF 'HARDINFO' REQUESTED
         BNE   CKTOT               NO GO CHECK TOTALS
         OI    SWITCH,DOHARD       TURN ON HARDWARE INFO INDICATOR
***********************************************************************
*                                                                     *
*        SEE IF TOTALS WERE REQUESTED                                 *
*                                                                     *
***********************************************************************
CKTOT    CLC   TOTALS(2),=AL2(1)   SEE IF 'TOTALS' REQUESTED
         BNE   CKSMS               NO GO CHECK SMS
         OI    SWITCH,DOTOTALS     TURN ON TOTALS INDICATOR
         SPACE 3
***********************************************************************
*                                                                     *
*        SEE IF SMS SELECTION WAS REQUESTED                           *
*                                                                     *
***********************************************************************
CKSMS    CLC   SMS(2),=AL2(0)      SEE IF ANY SMS SELECTION REQUESTED
         BE    CKIX                NO GO CHECK INDEX VTOC
CKSMS1   CLC   SMS(2),=AL2(1)      SEE IF 'SMSONLY' REQUESTED
         BNE   CKSMS2              NO, CONTINUE
         OI    SWITCH1,DOSMS       TURN ON SMSONLY INDICATOR
         B     CKIX                GO CHECK INDEX VTOC
CKSMS2   CLC   SMS(2),=AL2(2)      SEE IF 'NOSMS'   REQUESTED
         BNE   CKIX                NO, GO CHECK INDEX VTOC
         OI    SWITCH1,DONOSMS     TURN ON NOSMS   INDICATOR
         B     CKIX                GO CHECK INDEX VTOC
         SPACE 3
***********************************************************************
*                                                                     *
*        SEE IF INDEX VTOC SELECTION WAS REQUESTED                    *
*                                                                     *
***********************************************************************
CKIX     CLC   IXVTOC(2),=AL2(0)   SEE IF ANY IX VTOC SELECTION REQ
         BE    CKVOL               NO GO CHECK VOLUME
CKIX1    CLC   IXVTOC(2),=AL2(1)   SEE IF 'IXVTOCONLY' REQUESTED
         BNE   CKIX2               NO, CONTINUE
         OI    SWITCH1,DOIX        TURN ON IXVTOCONLY INDICATOR
         B     CKVOL               GO CHECK VOLUME
CKIX2    CLC   IXVTOC(2),=AL2(2)   SEE IF 'NOIXVTOC'   REQUESTED
         BNE   CKVOL               NO, GO CHECK VOLUME
         OI    SWITCH1,DONOIX      TURN ON NOIXVTOC INDICATOR
         B     CKVOL               GO CHECK VOLUME
         SPACE 3
***********************************************************************
*                                                                     *
*        SEE IF VOLSER WAS REQUESTED                                  *
*                                                                     *
***********************************************************************
CKVOL    CLC   VOL(2),=AL2(1)      SEE IF 'VOL' REQUESTED
         BNE   CKUNIT              NO GO CHECK UNIT ADDRESS
CKVOL1   ICM   R3,15,SUBVOL1       LOAD ADDRESS OF VOLUME PARAMETER
         BZ    CKUNIT              ZERO, NONE
         LH    R4,SUBVOL1+4        LOAD LENGTH OF PARAMETER
         LTR   R4,R4               TEST LENGTH
         BNP   CKUNIT              ZERO, NONE
         STH   R4,VOLSERL          SAVE THE VOLSER LENGTH
         BCTR  R4,0                MAKE MACHINE LENGTH
         MVC   VOLSER,BLANKS       BLANK THE VOLSER
         EX    R4,MVVOL            SAVE THE VOLSER
         B     CKUNIT              GO PROCESS UNIT ADDRESS
MVVOL    MVC   VOLSER(0),0(R3)     **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*                                                                     *
*        SEE IF UNIT ADDRESS WAS REQUESTED                            *
*                                                                     *
***********************************************************************
CKUNIT   CLC   UNIT(2),=AL2(1)     SEE IF 'UNITADDR' REQUESTED
         BNE   CKDEVT              NO GO CHECK DEVICE TYPE
CKUNIT1  ICM   R3,15,SUBUNIT1      LOAD ADDRESS OF UNIT ADDR PARAMETER
         BZ    CKDEVT              ZERO, NONE
         LH    R4,SUBUNIT1+4       LOAD LENGTH OF PARAMETER
         LTR   R4,R4               TEST LENGTH
         BNP   CKDEVT              ZERO, NONE
         BCTR  R4,0                MAKE MACHINE LENGTH
         MVC   UNITADD,BLANKS      BLANK THE UNIT ADDRESS
         EX    R4,MVUNIT           SAVE THE UNIT ADDRESS
         STH   R4,UNITADDL         SAVE THE UNIT ADDRESS LENGTH
         B     CKDEVT              GO PROCESS DEVICE TYPE
MVUNIT   MVC   UNITADD(0),0(R3)    **** EXECUTE ONLY ****
         SPACE 3
***********************************************************************
*                                                                     *
*        SEE IF DEVICE TYPE WAS REQUESTED                             *
*                                                                     *
***********************************************************************
CKDEVT   CLC   DEVT(2),=AL2(1)     SEE IF 'DEVICETYPE' REQUESTED
         BNE   CKDEVT2             NO GO CHECK SELECTION ITEM
CKDEVT1  ICM   R3,15,SUBDEVT1      LOAD ADDRESS OF DEV TYPE PARAMETER
         BZ    CKDEVT2             ZERO, NONE
         LH    R4,SUBDEVT1+4       LOAD LENGTH OF PARAMETER
         LTR   R4,R4               TEST LENGTH
         BNP   CKDEVT2             ZERO, NONE
         BCTR  R4,0                MAKE MACHINE LENGTH
         MVC   DEVTYPE,BLANKS      BLANK THE DEV TYPE
         EX    R4,MVDEVT           SAVE THE DEV TYPE
         STH   R4,DEVTYPEL         SAVE THE DEV TYPE LENGTH
         B     CKDEVT2             GO PROCESS SELECTION ITEM
MVDEVT   MVC   DEVTYPE(0),0(R3)    **** EXECUTE ONLY ****
CKDEVT2  DS    0H
         SPACE 3
         AIF   ('&SMS' NE 'YES').NOSMS02
***********************************************************************
*                                                                     *
*        SEE IF STORAGE GROUP WAS REQUESTED                           *
*                                                                     *
*        THE STORAGE GROUP NAME IS GENERIC IF IT ENDS IN AN "*"       *
*        OTHERWISE IT MUST SPECIFY A FULL STORAGE GROUP NAME.         *
*                                                                     *
***********************************************************************
CKSG     CLC   STORG(2),=AL2(1)    SEE IF 'STORAGEGROUP' REQUESTED
         BNE   CKSEL               NO GO CHECK SELECTION ITEM
CKSG1    ICM   R3,15,SUBSG1        LOAD ADDRESS OF SG PARAMETER
         BZ    CKSEL               ZERO, NONE
         LH    R4,SUBSG1+4         LOAD LENGTH OF PARAMETER
         LTR   R4,R4               TEST LENGTH
         BNP   CKSEL               ZERO, NONE
         BCTR  R4,0                MAKE MACHINE LENGTH
         MVC   SG,BLANKS           BLANK THE STORAGE GROUP
         EX    R4,MVSG             SAVE THE STORAGE GROUP
         MVC   SGL,=H'7'           SET LENGTH OF STORAGE GROUP TO 7
         LA    R15,0(R4,R3)        POINT TO LAST CHARACTER OF SG
         CLI   0(R15),C'*'         SEE IF GENERIC
         BNE   CKSEL               NO, LEAVE LENGTH = 8
         BCTR  R4,0                REDUCE BY 1 FOR '*'
         STH   R4,SGL              SAVE THE STORAGE GROUP LENGTH
         B     CKSEL               GO PROCESS SELECTION ITEM
MVSG     MVC   SG(0),0(R3)         **** EXECUTE ONLY ****
         SPACE 3
.NOSMS02 ANOP
***********************************************************************
*                                                                     *
*        PROCESS THE SELECTION ITEM (VOLSER OR UNIT ADDR) IF ANY      *
*                                                                     *
***********************************************************************
CKSEL    MVC   SELECT,BLANKS       BLANK THE SELECT FIELD
         ICM   R3,15,PARSSEL       LOAD POINTER TO SELECT FIELD
         BZ    CKSEL1              ZERO, NONE, USE UNITNAME FROM PSCB
         CLC   PARSSEL+4(2),=AL2(1) SEE IF LENGTH = 1
         BNE   CKSEL2              NO, MUST BE A VOLSER
         CLI   0(R3),C'*'          SEE IF SELECT FIELD OF '*'
         BE    CKSEL1              YES,  NO VOLSER, JUST A PLACEHOLDER
         CLI   0(R3),C'-'          SEE IF SELECT FIELD OF '-'
         BE    CKSEL1              YES,  NO VOLSER, JUST A PLACEHOLDER
         B     CKSEL2              NO, MUST BE A VOLSER
CKSEL1   MVC   SELECT,=CL6'*     ' SET VOLSER TO '*'
         MVI   LEN,1               SET LENGTH OF VOLSER TO '1'
         B     NOSEL               GO GET UNITNAME FROM PSCB
CKSEL2   LA    R4,SELECT           LOAD ADDRESS OF SELECT FIELD
         LH    R5,PARSSEL+4        LOAD LENGTH OF SELECT FIELD
         STC   R5,LEN              SAVE LENGTH OF SELECT FIELD
         BCTR  R5,0                MAKE MACHINE LENGTH
         EX    R5,SAVESEL          SAVE SELECT FIELD FROM PARSE
         B     CKSEL3              GO PROCESS SELECT ITEM
SAVESEL  MVC   0(0,R4),0(R3)       **** EXECUTE ONLY ****
NOSEL    L     R15,CPPLPSCB        LOAD PSCB ADDRESS
         USING PSCB,R15            SET ADDRESSABILITY TO PSCB
         MVC   UNITNAME,PSCBGPNM   SAVE DEFAULT UNITNAME
         DROP  R15                 DROP ADDRESSABILITY TO PSCB
         LA    R15,UNITABLE        LOAD ADDRESS OF UNIT NAME TABLE
NOSEL1   CLI   0(R15),X'FF'        END OF TABLE
         BE    CKSEL4              YES, USE '*'
         CLC   UNITNAME,0(R15)     SEE IF MATCH ON UNITNAME
         BE    NOSEL2              YES, BRANCH
         LA    R15,14(R15)         INCREMENT TO NEXT TABLE ENTRY
         B     NOSEL1              LOOP
NOSEL2   MVC   SELECT,8(R15)       SAVE VOLSER PREFIX FROM TABLE
         SLR   R14,R14             CLEAR LENGTH COUNTER
         LA    R15,SELECT          LOAD START ADDRESS OF VOLSER PREFIX
         LA    R1,6                LOAD MAX LENGTH OF VOLSER
NOSEL3   CLI   0(R15),C' '         END OF VOLSER PREFIX
         BE    NOSEL4              YES, BRANCH
         LA    R14,1(R14)          ADD 1 TO LENGTH COUNTER
         LA    R15,1(R15)          INCREMENT TO NEXT CHAR OF VOLSER
         BCT   R1,NOSEL3           LOOP
NOSEL4   STC   R14,LEN             SAVE LENGTH OF VOLSER
CKSEL3   CLI   SELECT,C'@'         SEE IF VOLSER OR UNITADDRESS
         BE    CKSEL5              GO PROCESS UNITADDRESS
CKSEL4   CLI   VOLSER,C' '         SEE IF VOLSER ALREADY SPECIFIED
         BNE   CKSEL6              YES, IGNORE THIS VALUE
         MVC   VOLSER,SELECT       MOVE SELECT TO VOLSER FIELD
         XC    VOLSERL,VOLSERL     SET VOLSER LENGTH TO ZERO
         MVC   VOLSERL+1(1),LEN    MOVE SELECT LEN TO VOLSER LEN
         BE    CKSEL6              END OF PARSE PROCESSING
CKSEL5   CLI   UNITADD,C' '        SEE IF UNIT ADD ALREADY SPECIFIED
         BNE   CKSEL6              YES, IGNORE THIS VALUE
         MVC   UNITADD(4),SELECT+1 MOVE SELECT TO UNITADD FIELD
         XC    UNITADDL,UNITADDL   ZERO UNIT ADDRESS LENGTH
         SLR   R1,R1               CLEAR FOR IC
         IC    R1,LEN              GET LENGTH
         BCTR  R1,0                DECREMENT LENGTH FOR @
         LTR   R1,R1               TEST LENGTH
         BM    CKSEL6              NEGATIVE, LEAVE "0'
         STH   R1,UNITADDL         SAVE IN UNITADD FIELD LENGTH
***********************************************************************
*                                                                     *
*        SEE IF VOLSER AND/OR UNIT ADDRESS SELECTION CRITERIA         *
*        ENDS IN '*'.  IF SO, REDUCE THE LENGTH OF EACH BY ONE.       *
*        THESE VALUES ARE ALREADY CONSIDERED GENERIC.                 *
*                                                                     *
***********************************************************************
CKSEL6   CLC   VOLSERL,=H'1'       SEE IF LENGTH OF VOLSER = 1
         BNE   CKSEL6A             NO, BRANCH
         CLI   VOLSER,C'*'         SEE IF ALL VOLUMES
         BE    CKSEL7              YES, THIS IS OK
CKSEL6A  LA    R15,VOLSER          LOAD ADDRESS OF VOLSER
         LH    R1,VOLSERL          LOAD LENGTH OF VOLSER
         BCTR  R1,0                MAKE MACHINE LENGTH
         AR    R15,R1              POINT TO LAST CHARACTER OF VOLSER
         CLI   0(R15),C'*'         SEE IF IT ENDS IN '*'
         BNE   CKSEL7              NO, THIS IS OK
         STH   R1,VOLSERL          YES, SAVE LENGTH MINUS '*'
         SPACE 3
CKSEL7   LA    R15,UNITADD         LOAD ADDRESS OF UNITADDRESS
         LH    R1,UNITADDL         LOAD LENGTH OF UNITADDRESS
         LTR   R1,R1               TEST LENGTH OF UNITADDRESS
         BZ    PARSEND             ZERO, NO UNIT ADDRESS
         BCTR  R1,0                MAKE MACHINE LENGTH
         AR    R15,R1              POINT TO LAST CHARACTER OF UNITADD
         CLI   0(R15),C'*'         SEE IF IT ENDS IN '*'
         BNE   PARSEND             NO, THIS IS OK
         STH   R1,UNITADDL         YES, SAVE LENGTH MINUS '*'
         MVI   0(R15),C' '         BLANK OUT THE '*'
         SPACE 3
***********************************************************************
*                                                                     *
*        END OF PARSE                                                 *
*                                                                     *
***********************************************************************
PARSEND  LA    R1,PDLPOINT         LOAD ADDRESS OF POINTER TO PDL
         IKJRLSA (1)               FREE STORAGE USED BY PARSE
         DROP  R2                  DROP ADDRESSABILITY TO PDL
         EJECT
***********************************************************************
*                                                                     *
*        PRODUCE PROPER HEADINGS                                      *
*                                                                     *
***********************************************************************
DOHEAD   TM    SWITCH,DOHARD       SEE IF REQUESTING HARDWARE INTO
         BO    DOHEAD1             YES, BRANCH
         MVC   MSG,HEAD1A          HEADING LINE 1
         BAL   R14,PUTMSG          WRITE HEADING LINE
         MVC   MSG,HEAD2A          HEADING LINE 2
         BAL   R14,PUTMSG          WRITE HEADING LINE
         B     DOHEAD2             DONE WITH HEADINGS
DOHEAD1  MVC   MSG,HEAD1B          HEADING LINE 1
         BAL   R14,PUTMSG          WRITE HEADING LINE
         MVC   MSG,HEAD2B          HEADING LINE 2
         BAL   R14,PUTMSG          WRITE HEADING LINE
DOHEAD2  EQU   *                   DONE WITH HEADINGS
         EJECT
***********************************************************************
*                                                                     *
*        SCAN UCB TABLE                                               *
*                                                                     *
***********************************************************************
         SPACE 1
         XC    SCANWORK,SCANWORK   CLEAR SCAN SERVICE WORK AREA
LOOP     UCBSCAN COPY,                                                 X
               WORKAREA=SCANWORK,                                      X
               UCBAREA=UCBAREA,                                        X
               DYNAMIC=YES,                                            X
               DCEAREA=DCEAREA,                                        X
               DCELEN=MYDCELEN,                                        X
               DEVCLASS=DASD,                                          X
               RANGE=ALL,                                              X
               MF=(E,UCBSCN)
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ENDVOLS             NOT ZERO, END OF UCBS
         LA    R8,UCBAREA          LOAD UCB ADDRESS
         EJECT
***********************************************************************
*                                                                     *
*        TEST EACH UCB FOR PROPER ATTRIBUTES                          *
*                                                                     *
***********************************************************************
         SPACE 1
         USING UCB,R8              SET ADDRESSABILITY TO UCB
GOTUCB   TM    UCBTBYT3,UCB3DACC   DIRECT ACCESS?
         BZ    LOOP                NO
         TM    UCBSTAT,UCBONLI     ONLINE?
         BNO   LOOP                NO, IGNORE DEVICE
         TM    UCBVOLI,X'FF'       ANY NAME?
         BZ    LOOP                NO, IGNORE IT
         UCBDEVN DEVN=DEVADDR      CONVERT TO 4 DIGIT DEVICE NUMBER
         CLI   DEVADDR,C' '        SEE IF 3 DIGIT DEVICE NUMBER
         BNE   DEVOK               NO, BRANCH
         MVI   DEVADDR,C'0'        YES, MAKE LEADING ZERO
DEVOK    DS    0H
***********************************************************************
*                                                                     *
*        FILTER THE VOLSER OR UNIT ADDRESS                            *
*                                                                     *
***********************************************************************
FILTER1  CLI   VOLSER,C' '         SEE IF VOLSER SPECIFIED
         BE    FILTER2             NO, BRANCH
FILTER1A CLC   VOLSER,=CL6'*     ' DO ALL?
         BE    FILTER2             YES, CONTINUE
         LA    R14,VOLSER          LOAD ADDRESS OF VOLSER
         LH    R15,VOLSERL         LOAD VOLSER LENGTH
         LA    R0,UCBVOLI          LOAD ADDRESS OF VOLSER IN UCB
         LH    R1,VOLSERL          LOAD VOLSER LENGTH
FILTER1B CLCL  R14,R0              COMPARE
         BE    FILTER2             MATCH, CONTINUE
         CLI   0(R14),C'?'         SEE IF MISMATCH ON PLACEHOLDER
         BNE   LOOP                NO, SKIP IT
         CH    R15,=H'1'           SEE IF LAST CHARACTER
         BE    FILTER2             YES, MATCH, CONTINUE
         AH    R0,=H'1'            ADD 1 TO ADDRESS OF VOLSER IN UCB
         BCTR  R1,0                REDUCE LENGTH BY 1
         AH    R14,=H'1'           ADD 1 TO ADDRESS OF VOLSER
         BCTR  R15,0               REDUCE LENGTH BY 1
         B     FILTER1B            RESTART COMPARE
FILTER2  CLI   UNITADD,C' '        SEE IF UNIT ADDRESS SPECIFIED
         BE    USEUCB              NO, USE THIS UCB
         LA    R14,UNITADD         LOAD ADDRESS OF UNITADDRESS
         LH    R15,UNITADDL        LOAD UNITADDRESS LENGTH
         LA    R0,DEVADDR          LOAD ADDRESS OF DEVICE ADDRESS
         LH    R1,UNITADDL         LOAD UNITADDRESS LENGTH
FILTER2B CLCL  R14,R0              COMPARE
         BE    USEUCB              MATCH, USE THIS UCB
         CLI   0(R14),C'?'         SEE IF MISMATCH ON PLACEHOLDER
         BNE   LOOP                NO, SKIP IT
         CH    R15,=H'1'           SEE IF LAST CHARACTER
         BE    USEUCB              YES, MATCH, USE THIS UCB
         AH    R0,=H'1'            ADD 1 TO ADDRESS OF UNITADDRESS
         BCTR  R1,0                REDUCE LENGTH BY 1
         AH    R14,=H'1'           ADD 1 TO ADDRESS OF UNIT ADDRESS
         BCTR  R15,0               REDUCE LENGTH BY 1
         B     FILTER2B            RESTART COMPARE
         SPACE 1
EXCLC    CLC   VOLSER(0),UCBVOLI   **** EXECUTE ONLY ****
EXCLC@   CLC   UNITADD(0),DEVADDR  **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        FORMAT UCB INFORMATION                                       *
*                                                                     *
***********************************************************************
         SPACE 1
USEUCB   OI    SWITCH,FOUND        TURN ON FOUND SWITCH
         MVC   TBLREC,TBLINIT      CLEAR THE TABLE RECORD
         MVC   TBLVOL,UCBVOLI      MOVE VOLSER TO TABLE ENTRY
         MVC   TBLADDR,DEVADDR     MOVE UNIT ADDRESS TO TABLE ENTRY
         MVC   TBLADDRX,UCBCHAN    MOVE UNIT ADDRESS IN HEX TO TBL ENT
USEUCB1  XR    R1,R1               ZERO REG FOR IC
         ICM   R1,B'0011',UCBUSER  LOAD USE COUNT
         ST    R1,TBLUCNT          SAVE USE COUNT IN TABLE ENTRY
         MVC   TBLDEVT,=CL8'3350'  SET DEVICE TYPE TO 3350
         CLI   UCBTBYT4,X'0B'      IS THIS A 3350?
         BE    USEUCB2             YES, GO CHECK MOUNT ATTR
         MVC   TBLDEVT,=CL8'3380'  SET DEVICE TYPE TO 3380
         CLI   UCBTBYT4,X'0E'      IS THIS A 3380?
         BE    USEUCB2             YES, GO CHECK MOUNT ATTR
         MVC   TBLDEVT,=CL8'3390'  SET DEVICE TYPE TO 3390
         CLI   UCBTBYT4,X'0F'      IS THIS A 3390?
         BE    USEUCB2             YES, GO CHECK MOUNT ATTR
         MVC   TBLDEVT,=CL8'3330-1' SET DEVICE TYPE TO 3330-1
         CLI   UCBTBYT4,X'0D'      IS THIS A 3330-1?
         BE    USEUCB2             YES, GO CHECK MOUNT ATTR
         MVC   TBLDEVT,=CL8'3330'  SET DEVICE TYPE TO 3330
         CLI   UCBTBYT4,X'09'      IS THIS A 3330?
         BE    USEUCB2             YES, GO CHECK MOUNT ATTR
         MVC   TBLDEVT,=CL8'3340'  SET DEVICE TYPE TO 3340
         CLI   UCBTBYT4,X'0A'      IS THIS A 3340?
         BE    USEUCB2             YES, GO CHECK MOUNT ATTR
         MVC   TBLDEVT,=CL8'3375'  SET DEVICE TYPE TO 3375
         CLI   UCBTBYT4,X'0C'      IS THIS A 3375?
         BE    USEUCB2             YES, GO CHECK MOUNT ATTR
         MVC   TBLDEVT,=CL8'2305-2' SET DEVICE TYPE TO 2305-2
         CLI   UCBTBYT4,X'07'      IS THIS A 2305-2?
         BE    USEUCB2             YES, GO CHECK MOUNT ATTR
         MVC   TBLDEVT,=CL8'2305-1' SET DEVICE TYPE TO 2305-1
         CLI   UCBTBYT4,X'06'      IS THIS A 2305-1?
         BE    USEUCB2             YES, GO CHECK MOUNT ATTR
         MVC   TBLDEVT,=CL8'2314'  SET DEVICE TYPE TO 2314
         CLI   UCBTBYT4,X'08'      IS THIS A 2314?
         BE    USEUCB2             YES, GO CHECK MOUNT ATTR
         MVC   TBLDEVT,=CL8'UNKN'  SET DEVICE TYPE TO UNKN
USEUCB2  DS    0H
         AIF   ('&SMS' NE 'YES').NOSMS03
CKSMSI   MVC   SMSVOL,UCBVOLI      SET VOLSER FOR SMS INFORMATION
         BAL   R14,GETSMSV         GO GET SMS INFORMATION FOR VOLUME
         MVC   TBLSG,STORGRP       SET THE STORAGE GROUP NAME
         MVC   TBLSGST,STORSTAT    SET THE STORAGE GROUP STATUS
         AGO   .NOSMS04
.NOSMS03  ANOP
CKMNT1   MVI   TBLSLASH,C'/'       SET SLASH IN MOUNT ATTRIBUTES
         MVC   TBLMNT1,=CL3'PRV'   SET 1ST MOUNT ATTR TO PRIV
         TM    UCBSTAB,UCBBPRV     IS IT MOUNTED PRIVATE?
         BO    CKMNT2              YES, GO CHECK NEXT MOUNT ATTR
         MVC   TBLMNT1,=CL3'STG'   SET 1ST MOUNT ATTR TO STRG
         TM    UCBSTAB,UCBBSTR     IS IT MOUNTED AS STORAGE?
         BO    CKMNT2              YES, GO CHECK NEXT MOUNT ATTR
         MVC   TBLMNT1,=CL3'PUB'   SET 1ST MOUNT ATTR TO PUBL
         TM    UCBSTAB,UCBBPUB     IS IT MOUNTED PUBLIC?
         BO    CKMNT2              YES, GO CHECK NEXT MOUNT ATTR
         MVC   TBLMNT1,=CL3'UNK'   SET 1ST MOUNT ATTR TO UNKN
CKMNT2   MVC   TBLMNT2,=CL3'RES'   SET 2ND MOUNT ATTR TO RSDNT
         TM    UCBSTAT,UCBPRES     IS IT MOUNTED PERM RESIDENT?
         BO    SPECLASS            YES, GO CHECK FOR SPEC CLASS
         MVC   TBLMNT2,=CL3'RSV'   SET 2ND MOUNT ATTR TO RSERV
         TM    UCBSTAT,UCBRESV     IS IT MOUNTED RESERVED?
         BO    SPECLASS            YES, GO CHECK FOR SPEC CLASS
         MVC   TBLMNT2,=CL3'UNK'   SET 2ND MOUNT ATTR TO UNKN
.NOSMS04 ANOP
SPECLASS MVI   TBLCLASS,C'S'       SET TO SYSRES VOLUME
         TM    UCBSTAT,UCBSYSR     IS IT THE SYSRES VOLUME?
         BO    DOLSPACE            YES, GO FILL OUT REST OF TABLE REC
         MVI   TBLCLASS,C'P'       SET TO PAGING VOLUME
         TM    UCBSTAB,UCBPGFL     IS IT USED AS A PAGING VOLUME?
         BO    DOLSPACE            YES, GO FILL OUT REST OF TABLE REC
         MVI   TBLCLASS,C' '       SET TO NO SPECIAL CLASS
         EJECT
***********************************************************************
*                                                                     *
*        CALL LSPACE TO GET VTOC INFORMATION                          *
*                                                                     *
***********************************************************************
         SPACE 1
DOLSPACE MVC   LSPACE(LSPCL),LSPC  INITIALIZE LSPACE LIST FORM
         LA    R8,UCBAREA          LOAD ADDRESS OF UCB
         LSPACE DATA=LSPWORK,F4DSCB=DSCB4,UCB=(R8),MF=(E,LSPACE)
CKLSPACE LTR   R15,R15             DID IT WORK?
         BNZ   ERROR01             NO, ERROR
***********************************************************************
*                                                                     *
*        FORMAT INFORMATION FROM DATA AREA                            *
*                                                                     *
***********************************************************************
         LA    R15,LSPWORK         LOAD ADDRESS OF RETURN AREA
         USING LSPDRETN,R15        SET ADDRESSABILITY TO RETURN AREA
         MVI   TBLIXIN,C' '        TURN OFF INDEX VTOC INDICATOR
         TM    LSPDSTAT,LSPDIXAC   SEE IF INDEX ACTIVE
         BNO   *+8                 NO, BRANCH
         MVI   TBLIXIN,C'Y'        TURN ON INDEX VTOC INDICATOR
         MVC   TBLFCYL,LSPDTCYL    SAVE TOTAL FREE CYL
         MVC   TBLFTRK,LSPDTTRK    SAVE TOTAL EXTRA FREE TRK
         MVC   TBLFAREA,LSPDNEXT   SAVE NUMBER OF FREE EXTENTS
         MVC   TBLLCYL,LSPDLCYL    SAVE LARGEST FREE CYL
         MVC   TBLLTRK,LSPDLTRK    SAVE LARGEST EXTRA FREE TRK
         MVC   TBLDSCB,LSPDF0S     SAVE NUMBER OF FREE DSCBS
         DROP  R15                 DROP ADDRESSABILITY TO RETURN AREA
***********************************************************************
*                                                                     *
*        FORMAT INFORMATION FROM FORMAT 4 DSCB                        *
*                                                                     *
***********************************************************************
         SPACE 1
CKTCYL   CLC   DS4DSCYL,=X'FFFE'   SEE IF MORE THAN 65,520 CYLS ON VOL
         BE    CKTCYL1             YES, BRANCH
         LH    R7,DS4DSCYL         LOAD NUMBER OF CYLS ON VOL
         ST    R7,TBLTCYL          SAVE NUMBER OF CYLS ON VOL
         B     CKACYL              TO CHECK FOR ALTERNATE CYLSW
CKTCYL1  L     R7,DS4DCYL          LOAD NUMBER OF CYLS ON VOL
         ST    R7,TBLTCYL          SAVE NUMBER OF CYLS ON VOL
CKACYL   MVI   TBLACYL,0           SET ALTERNATE CYL COUNT TO ZERO
         TM    DS4DEVFG,DS4DEVAV   SEE IF ALTERNATE CYL COUNT VALID
         BZ    CKFORSMS            NO, SKIP ALTERNATE CYL COUNT
         MVC   TBLACYL,DS4DEVAC    SAVE ALTERNATE CYL COUNT
CKFORSMS MVI   TBLSMSIN,C' '       TURN OFF SMS INDICATOR
         TM    DS4SMSFG,DS4SMS     SEE IF SMS MANAGED
         BZ    CK3380              NO, BRANCH
         MVI   TBLSMSIN,C'Y'       TURN ON SMS INDICATOR
         TM    DS4SMSFG,DS4SMS     SEE IF FULLY SMS MANAGED
         BO    CK3380              YES, BRANCH
         MVI   TBLSMSIN,C'I'       NO,  TURN ON SMS INITIAL STATUS IND
CK3380   CLC   TBLDEVT,=CL6'3380'  SEE IF THIS IS A 3380
         BE    CKDCE               YES, GO CHECK DCE
CK3390   CLC   TBLDEVT,=CL8'3390'  SEE IF THIS IS A 3390
         BNE   CKCOMB              NO, GO WRITE DETAIL LINE
CKDCE    MVC   TBLDEVT+4(2),=C'-?' SET UNKNOWN SUBTYPE
*********************************************************************
*          GET THE DCE ADDRESS.                                     *
*********************************************************************
         LA    R7,DCEAREA             GET DCE ADDRESS
         USING DCE,R7                 SET ADDRESSABILITY TO DCE
         LA    R9,DEVTABLE            LOAD DEVICE TABLE
LOOPLUPD CLI   0(R9),X'00'            END OF TABLE?
         BE    CKCOMB                 YES. END SEARCH FOR TYPE
         CLC   0(1,R9),DCEOBRDT       IS THIS A MATCH?
         BE    LOOPPUTD               YES. MODIFY DEVICE WITH TYPE
         LA    R9,3(,R9)              NO. BUMP UP A TABLE ENTRY
         B     LOOPLUPD               AND TRY AGAIN UNTIL DONE
LOOPPUTD MVC   TBLDEVT+4(2),1(R9)     MOVE IN LISTED DEVICE SIZE
         DROP  R7                     DROP ADDRESSABILITY TO DCE
         EJECT
***********************************************************************
*                                                                     *
*        VERIFY COMBINATIONS OF FIELDS IN THE RECORD                  *
*                                                                     *
***********************************************************************
CKCOMB   DS    0H
         AIF   ('&SMS' NE 'YES').NOSMS05
CKCOMB01 CLI   TBLSG,C' '          SEE IF STORAGE GROUP
         BE    CKCOMB02            NO, BRANCH
         CLI   TBLSMSIN,C'Y'       SEE IF SMS INDICATOR ON IN VTOC
         BNE   CKCOMB03            NO, INVALID COMBINATION
         CLI   TBLIXIN,C'Y'        SEE IF IX VTOC ACTIVE
         BNE   CKCOMB03            NO, INVALID COMBINATION
         B     CKCOMB04            YES, EVERYTHING OK
CKCOMB02 CLI   TBLSMSIN,C'Y'       SEE IF SMS INDICATOR ON IN VTOC
         BE    CKCOMB03            YES, INVALID COMBINATION
         B     CKCOMB04            YES, EVERYTHING OK
CKCOMB03 MVC   TBLSGST,=C'**'      SET ERROR FLAG
CKCOMB04 DS    0H
.NOSMS05 ANOP
         EJECT
***********************************************************************
*                                                                     *
*        FILTER THE FORMATTED ENTRY BEFORE ADDING TO TABLE            *
*                                                                     *
***********************************************************************
FILTER3  TM    SWITCH1,DOSMS       SEE IF SMSONLY REQUESTED
         BNO   FILTER4             NO, BRANCH
         CLI   TBLSMSIN,C' '       SEE IF SMS VOLUME
         BE    LOOP                NO, SKIP THIS VOLUME
FILTER4  TM    SWITCH1,DONOSMS     SEE IF NOSMS   REQUESTED
         BNO   FILTER5             NO, BRANCH
         CLI   TBLSMSIN,C' '       SEE IF SMS VOLUME
         BNE   LOOP                YES, SKIP THIS VOLUME
FILTER5  TM    SWITCH1,DOIX        SEE IF IXVTOCONLY REQUESTED
         BNO   FILTER6             NO, BRANCH
         CLI   TBLIXIN,C' '        SEE IF INDEX VTOC VOLUME
         BE    LOOP                NO, SKIP THIS VOLUME
FILTER6  TM    SWITCH1,DONOIX      SEE IF NOIXVTOC   REQUESTED
         BNO   FILTER7             NO, BRANCH
         CLI   TBLIXIN,C' '        SEE IF INDEX VTOC VOLUME
         BNE   LOOP                YES, SKIP THIS VOLUME
FILTER7  CLI   DEVTYPE,C' '        SEE IF DEVICE TYPE REQUESTED
         BE    FILTER8             NO, BRANCH
         CLC   DEVTYPE,TBLDEVT     SEE MATCH ON DEVICE TYPE
         BNE   LOOP                NO, SKIP THIS VOLUME
FILTER8  CLI   SG,C' '             SEE IF STORAGE GROUP REQUESTED
         BE    FILTER9             NO, BRANCH
         LH    R15,SGL             LOAD LENGTH OF STORAGE GROUP
         EX    R15,COMPSG          SEE IF MATCH ON STORAGE GROUP
         BNE   LOOP                NO, SKIP THIS VOLUME
         B     FILTER9             CONTINUE
COMPSG   CLC   SG(0),TBLSG         **** EXECUTE ONLY ****
FILTER9  DS    0H
***********************************************************************
*                                                                     *
*        MOVE THE NEW ENTRY TO THE TABLE                              *
*                                                                     *
***********************************************************************
PUTTBL   ICM   R1,B'1111',TBLLAST  LOAD ADDRESS OF LAST TABLE
         BNZ   PUTTBL01            NOT ZERO, NOT FIRST
         L     R1,VOLTBL           POINT TO START OF TABLE
         XC    TBLCHAIN,TBLCHAIN   ZERO THE CHAIN POINTER
         MVC   0(76,R1),TBLREC     MOVE TABLE RECORD TO TABLE
         ST    R1,TBLFIRST         SAVE ADDRESS OF FIRST TBL ENTRY
         ST    R1,TBLLAST          SAVE ADDRESS OF LAST TBL ENTRY
         MVC   VOLENTS,=F'1'       SET NUMBER OF ENTRIES TO 1
         B     PUTTBL99            CONTINUE
PUTTBL01 L     R15,VOLENTS         LOAD NUMBER OF VOLUME ENTRIES
         LA    R15,1(,R15)         ADD 1 FOR NEW ENTRY
         ST    R15,VOLENTS         SAVE NEW NUMBER OF ENTRIES
         C     R15,MAXENT          SEE IF EXCEEDS MAX
         BH    ERROR03             YES, ERROR
         LA    R1,76(,R1)          POINT TO NEXT ENTRY IN TABLE
         XC    TBLCHAIN,TBLCHAIN   ZERO THE CHAIN POINTER
         MVC   0(76,R1),TBLREC     MOVE TABLE RECORD TO TABLE
         ST    R1,TBLLAST          SAVE NEW ADDRESS OF LAST TBL ENTRY
         TM    SWITCH,DOSORT       SEE IF SORT REQUESTED
         BO    CHAIN               YES, GO CHAIN NEW RECORD IN SEQUENCE
***********************************************************************
*                                                                     *
*        NOSORT                                                       *
*                                                                     *
*        ADD NEW ENTRY TO END OF CHAIN                                *
*                                                                     *
***********************************************************************
PUTTBL03 L     R2,TBLFIRST         POINT TO FIRST TABLE ENTRY
PUTTBL04 CLC   0(4,R2),=A(0)       SEE IF END OF TABLE
         BE    PUTTBL05            YES, GO CHAIN RECORD
         L     R2,0(,R2)           POINT TO NEXT TBL ENTRY
         B     PUTTBL04            LOOP
PUTTBL05 ST    R1,0(R2)            SET CHAIN IN LAST RECORD TO NEW REC
PUTTBL99 B     LOOP                GO PROCESS NEXT VOLUME
***********************************************************************
*                                                                     *
*        CHAIN NEW ENTRY IN PROPER ORDER WITHIN VOLUME TABLE          *
*                                                                     *
*                                                                     *
*        IF KEYS MATCH                                                *
*           POINT TO NEXT RECORD AND LOOP                             *
*                                                                     *
*        IF NEW RECORD KEYS GT LAST AND DESCENDING                    *
*           INSERT NEW RECORD BEFORE LAST RECORD                      *
*                                                                     *
*        IF NEW RECORD KEYS LT LAST AND DESCENDING                    *
*           POINT TO NEXT RECORD AND LOOP                             *
*                                                                     *
*        IF NEW RECORD KEYS GT LAST AND ASCENDING                     *
*           POINT TO NEXT RECORD AND LOOP                             *
*                                                                     *
*        IF NEW RECORD KEYS LT LAST AND ASCENDING                     *
*           INSERT NEW RECORD BEFORE LAST RECORD                      *
*                                                                     *
*        IF END OF CHAIN REACHED                                      *
*           INSERT NEW RECORD AFTER LAST RECORD                       *
*                                                                     *
***********************************************************************
CHAIN    ICM   R2,B'1111',TBLFIRST POINT TO FIRST TABLE ENTRY
         BZ    CHAINF              ZERO, FIRST RECORD, INSERT IT
         SLR   R6,R6               ZERO LAST RECORD ADDRESS
CHAIN01  LH    R3,SORT1OFF         LOAD OFFSET OF 1ST SORT FIELD
         LA    R14,0(R3,R2)        POINT TO SEQ IN TABLE ENTRY
         LA    R15,0(R3,R1)        POINT TO SEQ IN NEW ENTRY
         LH    R4,SORT1LEN         LOAD LENGTH OF 1ST SORT FIELD
         LA    R5,SORT1SEQ         POINT TO SEQ OF 1ST SORT FIELD
         EX    R4,COMPNEW          COMPARE TABLE TO NEW ENTRY
         BE    CHAIN02             EQUAL, CHECK 2ND SORT FIELD
         BH    CHAINH              HIGH, GO CHECK SORT SEQ
         B     CHAINL              LOW,  GO CHECK SORT SEQ
CHAIN02  CLI   SORT2OFF,X'FF'      SEE IF NULL 2ND SORT FIELD
         BE    CHAINLP             YES, EQUAL KEYS, CHECK NXT REC
         LH    R3,SORT2OFF         LOAD OFFSET OF 2ND SORT FIELD
         LA    R14,0(R3,R2)        POINT TO SEQ IN TABLE ENTRY
         LA    R15,0(R3,R1)        POINT TO SEQ IN NEW ENTRY
         LH    R4,SORT2LEN         LOAD LENGTH OF 2ND SORT FIELD
         LA    R5,SORT2SEQ         POINT TO SEQ OF 2ND SORT FIELD
         EX    R4,COMPNEW          COMPARE TABLE TO NEW ENTRY
         BE    CHAIN03             EQUAL, CHECK 3RD SORT FIELD
         BH    CHAINH              HIGH, GO CHECK SORT SEQ
         B     CHAINL              LOW,  GO CHECK SORT SEQ
CHAIN03  CLI   SORT3OFF,X'FF'      SEE IF NULL 3RD SORT FIELD
         BE    CHAINLP             YES, EQUAL KEYS, CHECK NXT REC
         LH    R3,SORT3OFF         LOAD OFFSET OF 3RD SORT FIELD
         LA    R14,0(R3,R2)        POINT TO SEQ IN TABLE ENTRY
         LA    R15,0(R3,R1)        POINT TO SEQ IN NEW ENTRY
         LH    R4,SORT3LEN         LOAD LENGTH OF 3RD SORT FIELD
         LA    R5,SORT3SEQ         POINT TO SEQ OF 3RD SORT FIELD
         EX    R4,COMPNEW          COMPARE TABLE TO NEW ENTRY
         BE    CHAINLP             EQUAL, CHECK NEXT RECORD
         BH    CHAINH              HIGH, GO CHECK SORT SEQ
         B     CHAINL              LOW,  GO CHECK SORT SEQ
CHAINH   CLI   0(R5),C'A'          SEE IF ASCENDING SEQ
         BE    CHAINLP             YES, CHECK NEXT RECORD
         B     CHAINB              NO,  CHAIN RECORD BEFORE CURR
CHAINL   CLI   0(R5),C'A'          SEE IF ASCENDING SEQ
         BE    CHAINB              YES, CHAIN RECORD BEFORE CURR
         B     CHAINLP             NO,  CHECK NEXT RECORD
***********************************************************************
*        POINT TO NEXT RECORD IN CHAIN AND LOOP                       *
***********************************************************************
CHAINLP  LR    R6,R2               SAVE ADDRESS AS LAST RECORD
         ICM   R15,B'1111',0(R2)   POINT TO NEXT RECORD IN CHAIN
         BZ    CHAINA              ZERO, LAST REC, CHAIN AFTER CURR
         LR    R2,R15              SET RECORD ADDRESS
         B     CHAIN01             LOOP
***********************************************************************
*        CHAIN NEW RECORD AFTER CURRENT ENTRY                         *
***********************************************************************
CHAINA   ST    R1,0(R6)            SAVE NEW CHAIN IN OLD RECORD
         B     CHAIN99             END OF CHAINING
***********************************************************************
*        CHAIN NEW RECORD BEFORE CURRENT ENTRY                        *
***********************************************************************
CHAINB   LTR   R6,R6               SEE IF FIRST RECORD
         BNZ   CHAINB2             NO, PRIOR RECORD EXISTS
CHAINB1  ST    R2,0(R1)            CHAIN NEW RECORD TO OLD RECORD
         ST    R1,TBLFIRST         SAVE NEW RECORD AS FIRST
         B     CHAIN99             END OF CHAINING
CHAINB2  MVC   0(4,R1),0(R6)       SAVE OLD CHAIN IN NEW RECORD
         ST    R1,0(R6)            SAVE NEW CHAIN IN OLD RECORD
         B     CHAIN99             END OF CHAINING
***********************************************************************
*        SET NEW RECORD AS FIRST ENTRY                                *
***********************************************************************
CHAINF   ST    R1,TBLFIRST         SAVE NEW RECORD AS FIRST
         B     CHAIN99             END OF CHAINING
***********************************************************************
*        END OF CHAINING                                              *
***********************************************************************
CHAIN99  B     LOOP                GO PROCESS NEXT VOLUME
         SPACE 3
COMPNEW  CLC   0(0,R15),0(R14)     **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        END OF VOLUME LIST                                           *
*                                                                     *
*        1)  IF NOT VOLUMES, ISSUE ERROR MESSAGE                      *
*                                                                     *
*        2)  LOOP THROUGH THE VOLUME TABLE PRODUCING A MESSAGE        *
*            FOR EACH VOLUME                                          *
*                                                                     *
*        3)  PRODUCE A TOTAL LINE IF REQUESTED                        *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        IF NO VOLUME FOUND, ISSUE MESSAGE                            *
*                                                                     *
***********************************************************************
ENDVOLS  TM    SWITCH,FOUND        SEE IF VOLUME FOUND
         BNO   ERROR04             NO, ERROR
         SPACE 3
***********************************************************************
*                                                                     *
*        LOOP THROUGH ALL OF THE VOLUMES                              *
*                                                                     *
***********************************************************************
ENDVOLS1 ICM   R2,B'1111',TBLFIRST LOAD ADDRESS OF FIRST TABLE ENTRY
         BZ    ERROR04             SHOULDN'T HAPPEN
ENDVOLS2 MVC   TBLREC,0(R2)        COPY TABLE RECORD
         BAL   R14,FORMAT          GO FORMAT ENTRY FOR THIS VOLUME
         ICM   R2,B'1111',0(R2)    POINT TO NEXT ENTRY
         BNZ   ENDVOLS2            NOT ZERO, KEEP GOING
         SPACE 3
***********************************************************************
*                                                                     *
*        PRODUCE TOTALS IF REQUESTED                                  *
*                                                                     *
***********************************************************************
ENDVOLS3 TM    SWITCH,DOTOTALS     SEE IF TOTALS REQUESTED
         BNO   EXIT                NO, GET OUT
         BAL   R14,DOTOTAL         GO PRODUCE TOTALS
         B     EXIT                GET OUT
         EJECT
***********************************************************************
*                                                                     *
*        END OF PROGRAM ROUTINE                                       *
*                                                                     *
***********************************************************************
EXIT     L     R1,VOLTBL           LOAD ADDRESS OF VOLUME TABLE
         FREEMAIN R,LV=GETL,A=(1)  FREE VOLUME TABLE
         AIF   ('&SMS' NE 'YES').NOSMS06
         LM    R1,R2,SMSSSOB       LOAD ADDR AND LENGTH OF SMS WORK
         FREEMAIN RU,A=(R1),LV=(R2) FREE SMS WORK AREA
.NOSMS06 ANOP
         LR    R1,R13              SAVE DSA ADDRESS
         L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         FREEMAIN R,LV=LDSA,A=(1)  FREE WORK AREA
         RETURN (14,12),RC=0       RETURN TO TSO USER
         EJECT
***********************************************************************
*                                                                     *
*        WRITE MESSAGE LINE TO TSO TERMINAL                           *
*                                                                     *
***********************************************************************
PUTMSG   ST    R14,SAVERET         SAVE RETURN ADDRESS
         XC    ECB,ECB             ZERO MY ECB
         PUTLINE PARM=PUTLINE,OUTPUT=(MSGOUT,TERM,SINGLE,INFOR),       X
               MF=(E,IOPL)
         MVC   MSG,BLANKS          BLANK THE MESSAGE AREA
         L     R14,SAVERET         RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        WRITE TOTAL LINE TO TSO TERMINAL                             *
*                                                                     *
***********************************************************************
DOTOTAL  ST    R14,SAVETOT         SAVE RETURN ADDRESS
         MVC   DETAIL1,BLANKS      CLEAR THE DETAIL LINE
         MVC   DETAIL1+00(6),=C' TOTAL' SET TOTALS INDICATOR
         MVC   DETAIL1+08(4),=C'VOL:'  SET VOLUME
         MVC   DETAIL1+12(5),=C'*****' ASSUME TOO LARGE A COUNT
         L     R1,TOTVOLS          LOAD TOTAL VOLUMES
         C     R1,=F'9999'         SEE IF VOLUME COUNT GT 9,999
         BH    DOTOTAL1            YES, BRANCH
         CVD   R1,DOUBLE           CONVERT VOLUME COUNT TO PACKED
         MVC   EDWORK4,=X'40202020206B202120' SET EDIT MASK
         ED    EDWORK4,DOUBLE+4    EDIT FIELD
         MVC   DETAIL1+12(5),EDWORK4+4 MOVE VOLUME COUNT TO DETAIL
DOTOTAL1 MVC   DETAIL1+20(4),=C'CYL:'  SET CYLINDERS
         MVC   DETAIL1+24(12),=C'************' ASSUME TOO MANY CYLS
         L     R1,TOTCYLA          LOAD TOTAL CYLINDERS AVAILABLE
         C     R1,=F'999999999'     SEE IF TOTAL CYLS GT 999,999,999
         BH    DOTOTAL2            YES, BRANCH
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   EDWORK5,=X'4020202020206B2020206B202120' SET EDIT MASK
         ED    EDWORK5,DOUBLE+2    EDIT FIELD
         MVC   DETAIL1+24(12),EDWORK5+2 MOVE TOTAL CYL AVAIL TO DETAIL
         TM    SWITCH,DOHARD       SEE IF REQUESTING HARDWARE INTO
         BO    DOTOTAL6            YES, DONE WITH TOTALS
DOTOTAL2 MVC   OUTFCYL1,=C'*******' ASSUME TOO LARGE A COUNT
         L     R1,TOTCYL           LOAD TOTAL FREE CYL
         C     R1,=F'9999999'      SEE IF TOTAL FREE CYL GT 9,999,999
         BH    DOTOTAL3            YES, BRANCH
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   EDWORK3,=X'4020202020202120' SET EDIT MASK
         ED    EDWORK3,DOUBLE+4    EDIT FIELD
         MVC   OUTFCYL1,EDWORK3+1  CYL (TOTAL)
DOTOTAL3 MVC   OUTFTRK1,=C'*****'  ASSUME TOO LARGE A COUNT
         L     R1,TOTTRK           LOAD TOTAL EXTRA FREE TRK
         C     R1,=F'99999'        SEE IF TOTAL FREE TRK GT 99,999
         BH    DOTOTAL4            YES, BRANCH
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   EDWORK2,=X'402020202120' SET EDIT MASK
         ED    EDWORK2,DOUBLE+5    EDIT FIELD
         MVC   OUTFTRK1,EDWORK2+1  TRK (TOTAL)
DOTOTAL4 MVC   OUTFAR1,=C'*****'   ASSUME TOO LARGE A COUNT
         L     R1,TOTNEXT          LOAD TOTAL EXTENTS
         C     R1,=F'99999'        SEE IF TOTAL FREE EXT GT 99,999
         BH    DOTOTAL5            YES, BRANCH
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   EDWORK2,=X'402020202120' SET EDIT MASK
         ED    EDWORK2,DOUBLE+5    EDIT FIELD
         MVC   OUTFAR1,EDWORK2+1   EXTENTS (TOTAL)
DOTOTAL5 L     R1,LARGECYL         LOAD LARGEST FREE CYL
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   EDWORK2,=X'402020202120' SET EDIT MASK
         ED    EDWORK2,DOUBLE+5    EDIT FIELD
         MVC   OUTLCYL1,EDWORK2+1  CYL (LARGEST)
         L     R1,LARGETRK         LOAD LARGEST EXTRA FREE TRK
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   EDWORK2,=X'402020202120' SET EDIT MASK
         ED    EDWORK2,DOUBLE+5    EDIT FIELD
         MVC   OUTLTRK1,EDWORK2+1  TRK (LARGEST)
DOTOTAL6 MVC   MSG(79),DETAIL1     MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         MVC   DETAIL1,BLANKS      BLANK DETAIL LINE
         L     R14,SAVETOT         RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        FORMAT INFORMATION FROM TABLE RECORD                         *
*                                                                     *
***********************************************************************
FORMAT   ST    R14,SAVEFORM        SAVE RETURN ADDRESS
         MVC   DETAIL1,BLANKS      CLEAR THE DETAIL LINE
         MVC   OUTVOL1,TBLVOL      SET VOLSER
         MVC   OUTVOL2,TBLVOL      SET VOLSER
         MVC   OUTADDR1,TBLADDR    SET DEVICE ADDRESS
         MVC   OUTADDR2,TBLADDR    SET DEVICE ADDRESS
         CLC   TBLERROR,=F'1'      SEE IF ERROR MESSAGE 1
         BNE   FORMAT1             NO, BRANCH
         MVC   OUTFCYL1(40),=CL40'ERROR IN VTOC'
         MVC   MSG(79),DETAIL1     MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         MVC   DETAIL1,BLANKS      BLANK DETAIL LINE
         MVC   DETAIL2,BLANKS      BLANK DETAIL LINE
         B     FORMAT3             GO ACCUMULATE TOTALS
FORMAT1  MVC   OUTDEVT1,TBLDEVT    SET DEVICE TYPE
         MVC   OUTDEVT2,TBLDEVT    SET DEVICE TYPE
         MVC   OUTSMSI1,TBLSMSIN   SET SMS INDICATOR
         MVC   OUTSMSI2,TBLSMSIN   SET SMS INDICATOR
         MVC   OUTIXIN1,TBLIXIN    SET INDEX VTOC INDICATOR
         MVC   OUTIXIN2,TBLIXIN    SET INDEX VTOC INDICATOR
         MVC   OUTCL1,TBLCLASS     SET SPECIAL CLASS
         MVC   OUTCL2,TBLCLASS     SET SPECIAL CLASS
         AIF   ('&SMS' NE 'YES').NOSMS07
         MVC   OUTSG1,TBLSG        SET STORAGE GROUP
         MVC   OUTSG2,TBLSG        SET STORAGE GROUP
         MVC   OUTSGST1,TBLSGST    SET STORAGE GROUP STATUS
         MVC   OUTSGST2,TBLSGST    SET STORAGE GROUP STATUS
         AGO   .NOSMS08
.NOSMS07 ANOP
         MVC   OUTMNT1A,TBLMNT1    SET 1ST MOUNT ATTR
         MVC   OUTMNT2A,TBLMNT1    SET 1ST MOUNT ATTR
         MVI   OUTSLAS1,C'/'       SET SLASH CONSTANT
         MVI   OUTSLAS2,C'/'       SET SLASH CONSTANT
         MVC   OUTMNT1B,TBLMNT2    SET 2ND MOUNT ATTR
         MVC   OUTMNT2B,TBLMNT2    SET 2ND MOUNT ATTR
.NOSMS08 ANOP
         MVC   OUTUCNT1,=C'***'    SET TO INDICATE GT 999
         L     R1,TBLUCNT          LOAD USE COUNT
         C     R1,=F'999'          SEE IF GT 999
         BH    FORMAT1A            YES, BRANCH
         CVD   R1,DOUBLE           CONVERT USE COUNT TO PACKED
         MVC   EDWORK2,=X'402020202120' SET EDIT MASK
         ED    EDWORK2,DOUBLE+5    EDIT FIELD
         MVC   OUTUCNT1,EDWORK2+3  USE COUNT
FORMAT1A L     R1,TBLFCYL          LOAD TOTAL FREE CYL
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   EDWORK3,=X'4020202020202120' SET EDIT MASK
         ED    EDWORK3,DOUBLE+4    EDIT FIELD
         MVC   OUTFCYL1,EDWORK3+1  CYL (TOTAL)
         L     R1,TBLFTRK          LOAD TOTAL EXTRA FREE TRK
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   EDWORK2,=X'402020202120' SET EDIT MASK
         ED    EDWORK2,DOUBLE+5    EDIT FIELD
         MVC   OUTFTRK1,EDWORK2+1  TRK (TOTAL)
         L     R1,TBLFAREA         LOAD NUMBER OF FREE EXTENTS
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   EDWORK2,=X'402020202120' SET EDIT MASK
         ED    EDWORK2,DOUBLE+5    EDIT FIELD
         MVC   OUTFAR1,EDWORK2+1   NUM (OF AREAS)
         MVC   OUTDSCB1,=C'****'   SET TO INDICATE GT 9999
         L     R1,TBLDSCB          LOAD NUMBER OF FREE DSCBS
         C     R1,=F'9999'         SEE IF GT 9999
         BH    FORMAT1B            YES, BRANCH
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   EDWORK2,=X'402020202120' SET EDIT MASK
         ED    EDWORK2,DOUBLE+5    EDIT FIELD
         MVC   OUTDSCB1,EDWORK2+2  NUMBER OF FMT0S
FORMAT1B L     R1,TBLLCYL          LOAD LARGEST FREE CYL
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   EDWORK2,=X'402020202120' SET EDIT MASK
         ED    EDWORK2,DOUBLE+5    EDIT FIELD
         MVC   OUTLCYL1,EDWORK2+1  CYL (LARGEST)
         L     R1,TBLLTRK          LOAD LARGEST EXTRA FREE TRK
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   EDWORK2,=X'402020202120' SET EDIT MASK
         ED    EDWORK2,DOUBLE+5    EDIT FIELD
         MVC   OUTLTRK1,EDWORK2+1  TRK (LARGEST)
FORMAT1C SLR   R1,R1               CLEAR REG
         ICM   R1,B'0001',TBLACYL  LOAD ALTERNATE CYL COUNT
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   EDWORK1,=X'40202020' SET EDIT MASK
         ED    EDWORK1,DOUBLE+6    EDIT FIELD
         MVC   OUTACYL2,EDWORK1+1  SET ALTERNATE CYL COUNT
         L     R1,TBLTCYL          LOAD TOTAL CYL COUNT
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   EDWORK5,=X'4020202020206B2020206B202120' SET EDIT MASK
         ED    EDWORK5,DOUBLE+2    EDIT FIELD
         MVC   OUTTCYL2,EDWORK5+2  SET TOTAL CYL COUNT
***********************************************************************
*                                                                     *
*        WRITE THE DETAIL LINE                                        *
*                                                                     *
***********************************************************************
FORMAT2  TM    SWITCH,DOHARD       SEE IF REQUESTING HARDWARE INTO
         BO    FORMAT2A            YES, BRANCH
         MVC   MSG(79),DETAIL1     MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         B     FORMAT2B            BRANCH
FORMAT2A MVC   MSG(79),DETAIL2     MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
FORMAT2B MVC   DETAIL1,BLANKS      BLANK DETAIL LINE
         MVC   DETAIL2,BLANKS      BLANK DETAIL LINE
***********************************************************************
*                                                                     *
*        ACCUMULATE TOTALS AND SAVE SIZE OF LARGEST EXTENT            *
*                                                                     *
***********************************************************************
FORMAT3  L     R1,TOTVOLS          LOAD TOTAL VOLUME COUNT
         LA    R1,1(,R1)           ADD 1 TO COUNT
         ST    R1,TOTVOLS          SAVE NEW VOLUME COUNT
         CLC   TBLERROR,=F'0'      SEE IF ANY ERRORS ON THIS VOLUME
         BNE   FORMAT5             YES, DO NOT ACCUMULATE TOTALS
         L     R1,TOTCYL           LOAD TOTAL CYL COUNT
         A     R1,TBLFCYL          ADD NEW FREE CYL COUNT
         ST    R1,TOTCYL           SAVE NEW FREE CYL COUNT
         L     R1,TOTTRK           LOAD TOTAL ADDITIONAL TRK COUNT
         A     R1,TBLFTRK          ADD NEW FREE ADDITIONAL TRK COUNT
         ST    R1,TOTTRK           SAVE NEW FREE ADDITIONAL TRK COUNT
         L     R1,TOTNEXT          LOAD TOTAL EXTENT COUNT
         A     R1,TBLFAREA         ADD NEW EXTENT COUNT
         ST    R1,TOTNEXT          SAVE NEW TOTAL EXTENT COUNT
         L     R1,TOTCYLA          LOAD TOTAL CYLINDERS AVAIL
         A     R1,TBLTCYL          ADD CYLINDERS ON THIS VOL
         ST    R1,TOTCYLA          SAVE NEW TOTAL CYLINDERS AVAIL
         CLC   TBLLCYL,LARGECYL    SEE IF EXTENT LARGER THAN PREV
         BL    FORMAT5             NO, BRANCH
         BH    FORMAT4             YES, BRANCH
         CLC   TBLLTRK,LARGETRK    SEE IF EXTENT LARGER THAN PREV
         BL    FORMAT5             NO, BRANCH
FORMAT4  MVC   LARGECYL,TBLLCYL    SAVE NEW LARGEST EXTENT CYL
         MVC   LARGETRK,TBLLTRK    SAVE NEW LARGEST EXTENT TRK
FORMAT5  L     R14,SAVEFORM        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         AIF   ('&SMS' NE 'YES').NOSMS09
         EJECT
***********************************************************************
*                                                                     *
*        GET SMS BASE INFORMATION                                     *
*                                                                     *
***********************************************************************
GETSMSB  ST    R14,SAVESMSB        SAVE RETURN ADDRESS
         L     R8,CVTPTR           LOAD CVT ADDRESS
         SH    R8,=Y(CVTMAP-CVTFIX) SUBTRACT PREFIX LENGTH
         USING CVTFIX,R8           SET ADDRESSABILITY TO CVT PREFIX
***********************************************************************
*                                                                     *
*        GET GRS SYSTEM NAME                                          *
*                                                                     *
***********************************************************************
SYSNAME1 MVC   GRSSYSNM,BLANKS     BLANK THE GRS SYSTEM NAME
         ICM   R15,B'1111',CVTGVT  LOAD ADDRESS OF GRS VECTOR TBL
         BZ    SYSNAME2            ZERO, NO GRS
         USING GVT,R15             SET ADDRESSABILITY TO GVT
         MVC   GRSSYSNM,GVTSYSNM   SAVE SYSTEM NAME
         DROP  R15                 DROP ADDRESSABILITY TO GVT
***********************************************************************
*                                                                     *
*        GET SYSPLEX SYSTEM NAME                                      *
*                                                                     *
***********************************************************************
SYSNAME2 MVC   PLXSYSNM,BLANKS     BLANK THE SYSPLEX SYSTEM NAME
         ICM   R15,B'1111',CVTECVT LOAD ADDRESS OF EXTENDED CVT
         BZ    SYSNAME3            ZERO, NO ECVT
         USING ECVT,R15            SET ADDRESSABILITY TO ECVT
         CLI   ECVTSPLX,X'40'      SEE IF IN A SYSPLEX
         BNH   SYSNAME3            NO, BRANCH
         MVC   PLXSYSNM,ECVTSPLX   SAVE SYSTEM NAME
         DROP  R15                 DROP ADDRESSABILITY TO ECVT
***********************************************************************
*                                                                     *
*        GET SYSPLEX SYSTEM NAME                                      *
*                                                                     *
***********************************************************************
SYSNAME3 MVC   CVTSYSNM,CVTSNAME   SAVE THE SYSTEM NAME FROM THE CVT
***********************************************************************
*                                                                     *
*        ALLOCATE AN UN-PROTECTED WORK AREA FOR THE READ ROUTINE      *
*                                                                     *
***********************************************************************
         L     R2,=A(SMSWORKL)     LOAD LENGTH OF SMS WORK AREA
         GETMAIN RU,LV=(R2)        ALLOCATE SMS WORK AREA
         STM   R1,R2,SMSSSOB       SAVE ADDR FOR IEFSSREQ CALLS
         OI    SMSSSOB,X'80'       SSOB PTR
         L     R3,SMSSSOB          POINT TO THE WORK AREA
         USING SMSWORK,R3          SET ADDRESSABILITY TO WORK AREA
         XC    SMSWORK(256),SMSWORK CLEAR 256 BYTES
***********************************************************************
*                                                                     *
*        GET THE SMS SMS BASE CONFIGURATION INFORMATION               *
*                                                                     *
***********************************************************************
         L     R1,CVTJESCT         JES COMM TABLE
         L     R1,JESCTEXT-JESCT(,R1)  JESCT EXTENSION
         ICM   R5,B'1111',JESSMSIB-JESPEXT(R1) SMS SSIB
         BZ    NOSMS               SMS NOT ACTIVE, EXIT
         MVC   IGDSSIVT,SSIBSUSE-SSIB(R5)
         LA    R4,SSOBWRK          POINT TO WORK AREA
         USING SSOB,R4             SET ADDRESSABILITY TO SSOB
         MVI   SSOBLEN+1,SSOBHSIZ  SET SSOB LENGTH
         MVC   SSOBID,=C'SSOB'     SET SSOB EYECATCHER
         MVI   SSOBFUNC+1,SSOBSSMS SET FUNCTION
         ST    R5,SSOBSSIB         SET SMS SSIB
         LA    R5,SSSAWRK          LOAD ADDRESS OF SSSA WORK AREA
         ST    R5,SSOBINDV         SAVE ADDR IN FUNCTION-DEPENDENT AREA
         USING IEFSSSA,R5          SET ADDRESSABILITY TO SSSA WORK AREA
         LA    R0,SSSALN+SSSA1LN   SET LENGTH
         STH   R0,SSSALEN              OF SSSA
         MVC   SSSAID,=C'SSSA'     SET SSSA EYECATCHER
         MVI   SSSAVER+1,SSOBSSVR  SET VERSION
         MVI   SSSASFN+1,SSSAACTV  SET SUB-FUNCTION CODE
         MVI   SSSAIFLG,SSSANAUT   SET NON-AUTHORIZED CALLER IND
         LH    R0,=Y(SMSSFWAL)     SET LENGTH
         ST    R0,SSSA1LEN             OF WORK AREA
         LA    R6,SMSSFWA          SET ADDRESS
         ST    R6,SSSA1PTR             OF WORK AREA
         USING IGDBCD,R6           SET ADDRESSABILITY TO BCD IN WORK
         MVI   SSSA1TYP,SSSA1CON   SET TO RETURN ACTIVE CONFIGURATION
         LA    R1,SMSSSOB          SET SSOB_PTR
         IEFSSREQ                  CALL SMS
         LTR   R1,R15              SEE IF SMS ACTIVE?
         BNZ   NOSMS               NO, EXIT
         ICM   R0,B'1111',SSOBRETN TEST RETURN CODE
         BZ    SMSOK               OK, CONTINUE
         B     NOSMS               NO, TREAT LIKE NO SMS
         EJECT
***********************************************************************
*                                                                     *
*        DETERMINE THE SMS SYSTEM NUMBER FROM THE SMS BASE            *
*        CONFIGURATION                                                *
*                                                                     *
*        ORDER OF SEARCH:                                             *
*                                                                     *
*            1)  GRS SYSTEM NAME                                      *
*            2)  CVT SYSTEM NAME                                      *
*            3)  SYSPLEX SYSTEM NAME                                  *
*            4)  SET TO 1                                             *
*                                                                     *
***********************************************************************
SMSOK    OI    SWITCH,SMSACT       TURN ON SMS ACTIVE INDICATOR
         LA    R1,BCDFSYSN         POINT TO FIRST SYSTEM NAME
         LA    R2,1                SET SYSTEM NUMBER TO 1
         LA    R3,8                SET MAX NO OF SYSTEM NAMES
SMSOK1   CLC   GRSSYSNM,0(R1)      SEE IF SMS MATCH GRS SYSTEM NAME
         BE    SMSOK99             YES, GET OUT
         LA    R1,L'BCDFSYSN(,R1)  POINT TO NEXT SYSTEM NAME
         LA    R2,1(,R2)           ADD 1 TO SYSTEM NUMBER
         BCT   R3,SMSOK1           LOOP THROUGH SMS SYSTEM NAMES
SMSOK2   LA    R1,BCDFSYSN         POINT TO FIRST SYSTEM NAME
         LA    R2,1                SET SYSTEM NUMBER TO 1
         LA    R3,8                SET MAX NO OF SYSTEM NAMES
SMSOK2A  CLC   CVTSYSNM,0(R1)      SEE IF SMS MATCH CVT SYSTEM NAME
         BE    SMSOK99             YES, GET OUT
         LA    R1,L'BCDFSYSN(,R1)  POINT TO NEXT SYSTEM NAME
         LA    R2,1(,R2)           ADD 1 TO SYSTEM NUMBER
         BCT   R3,SMSOK2A          LOOP THROUGH SMS SYSTEM NAMES
SMSOK3   LA    R1,BCDFSYSN         POINT TO FIRST SYSTEM NAME
         LA    R2,1                SET SYSTEM NUMBER TO 1
         LA    R3,8                SET MAX NO OF SYSTEM NAMES
SMSOK3A  CLC   PLXSYSNM,0(R1)      SEE IF MATCH SYSPLEX SYSTEM NAME
         BE    SMSOK99             YES, GET OUT
         LA    R1,L'BCDFSYSN(,R1)  POINT TO NEXT SYSTEM NAME
         LA    R2,1(,R2)           ADD 1 TO SYSTEM NUMBER
         BCT   R3,SMSOK3A          LOOP THROUGH SMS SYSTEM NAMES
SMSOK4   LA    R2,1                NO MATCH, SET SYSTEM NUMBER TO 1
         B     SMSOK99             GET OUT
NOSMS    LA    R2,0                NO SMS, SET SYSTEM NUMBER TO 0
SMSOK99  STH   R2,OWNSMS           REMEMBER SYSTEM NUMBER
         DROP  R3                  DROP ADDRESSABILITY TO SMS WORK
         DROP  R4                  DROP ADDRESSABILITY TO SSOB
         DROP  R5                  DROP ADDRESSABILITY TO SSSA
         DROP  R6                  DROP ADDRESSABILITY TO BCD
         L     R14,SAVESMSB        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        GET THE SMS VOLUME RECORD FOR THIS VOLUME                    *
*                                                                     *
***********************************************************************
GETSMSV  ST    R14,SAVESMSV        SAVE RETURN ADDRESS
         MVC   STORGRP,BLANKS      BLANK THE STORAGE GROUP NAME
         MVC   STORSTAT,BLANKS     BLANK THE STORAGE GROUP STATUS
         TM    SWITCH,SMSACT       SEE IF SMS IS ACTIVE
         BNO   SMSDONE             NO, SKIP ALL OF THIS STUFF
         L     R3,SMSSSOB          POINT TO THE WORK AREA
         USING SMSWORK,R3          SET ADDRESSABILITY TO WORK AREA
         XC    SMSWORK(256),SMSWORK CLEAR 256 BYTES
         LA    R2,SSOBWRK          POINT TO WORK AREA
         USING SSOB,R2             SET ADDRESSABILITY TO SSOB
         MVI   SSOBLEN+1,SSOBHSIZ  SET SSOB LENGTH
         MVC   SSOBID,=C'SSOB'     SET SSOB EYECATCHER
         MVI   SSOBFUNC+1,SSOBSSMS SET FUNCTION
         L     R1,CVTPTR           LOAD ADDRESS OF CVT
         L     R1,CVTJESCT-CVTMAP(,R1) LOAD ADDRESS OF JES COMM TABLE
         L     R1,JESCTEXT-JESCT(,R1)  LOAD ADDRESS OF JESCT EXTENSION
         MVC   SSOBSSIB,JESSMSIB-JESPEXT(R1) SET SMS SSIB
         LA    R5,SSSAWRK          LOAD ADDRESS OF SSSA WORK AREA
         ST    R5,SSOBINDV         SAVE ADDR OF FUNCTION-DEPENDENT AREA
         USING IEFSSSA,R5          SET ADDRESSABILITY TO SSSA WORK AREA
         LA    R0,SSSALN+SSSA1LN   SET LENGTH
         STH   R0,SSSALEN              OF SSSA
         MVC   SSSAID,=C'SSSA'     SET SSSA EYECATCHER
         MVI   SSSAVER+1,SSOBSSVR  SET VERSION
         MVI   SSSASFN+1,SSSAACTV  SET SUB-FUNCTION CODE
         MVI   SSSAIFLG,SSSANAUT   SET NON-AUTHORIZED CALLER IND
         MVI   SSSA1TYP,SSSA1VOL   SET TO GET VLD BACK FOR VOLSER
         MVI   SSSA1CNT+3,1        SET ONE CONSTRUCT PASSED
         MVI   SSSA1NML+1,6        SET LENGTH OF VOLSER
         MVC   SSSA1NAM(6),SMSVOL  SER VOLSER
         LH    R0,=Y(SMSSFWAL)     SET LENGTH
         ST    R0,SSSA1LEN             OF WORK AREA
         LA    R6,SMSSFWA          SET ADDRESS
         ST    R6,SSSA1PTR             OF WORK AREA
         USING VLD,R6              SET ADDRESSABILITY TO VLD IN WORK
         LA    R1,SMSSSOB          SET SSOB PTR
         IEFSSREQ                  CALL SMS
         LTR   R15,R15             SSI OK?
         BNZ   SMSDONE             NO, EXIT
         ICM   R15,B'1111',SSOBRETN-SSOB+SSOBWRK TEST RETURN CODE
         BNZ   SMSDONE             BAD, TREAT LIKE NO SMS
         DROP  R2                  DROP ADDRESSABILITY TO SSOB
         DROP  R3                  DROP ADDRESSABILITY TO SMS WORK
         DROP  R5                  DROP ADDRESSABILITY TO SSSA
         EJECT
***********************************************************************
*                                                                     *
*        GET THE SMS STORAGE GROUP NAME FOR THIS VOLUME               *
*                                                                     *
***********************************************************************
VALSGRP  SLR   R15,R15             CLEAR REG FOR ICM
         ICM   R15,B'0011',VLDSGLEN LOAD LEN OF STORAGE GROUP NAME
         BZ    SMSDONE             ZERO, NO STORAGE GROUP
         CH    R15,=H'8'           SEE IF EXCEEDS MAX
         BNH   VALSGRP1            NO,  BRANCH
         LA    R15,8               YES, SET TO MAX
VALSGRP1 BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,SAVESG          SAVE STORAGE GROUP
         B     VALSTAT             CONTINUE
SAVESG   MVC   STORGRP(0),VLDSTGRP **** EXECUTE ONLY ****
***********************************************************************
*                                                                     *
*        GET THE SMS VOLUME STATUS FOR THIS VOLUME ON MY SYSTEM       *
*                                                                     *
***********************************************************************
VALSTAT  LH    R15,OWNSMS          LOAD SYSTEM NUMBER
         BCTR  R15,0               MAKE IT RELATIVE TO ZERO
         SLL   R15,3               MULT BY LENGTH OF EACH ENTRY
         LA    R2,VLDEF            POINT TO ARRAY OF VOLUMES
         A     R2,VLDSYSOF         POINT TO START OF SYSTEM DATA
         AR    R2,R15              POINT TO MY SYSTEM DATA
         MVC   STORSTAT,=CL2'  '   ASSUME ENABLED
         CLI   0(R2),1             SEE IF ENABLED
         BE    SMSDONE             YES, DONE
         MVC   STORSTAT,=CL2'QA'   ASSUME QUIESCED/ALL
         CLI   0(R2),2             SEE IF QUIESCED/ALL
         BE    SMSDONE             YES, DONE
         MVC   STORSTAT,=CL2'QN'   ASSUME QUIESCED/NEW
         CLI   0(R2),3             SEE IF QUIESCED/NEW
         BE    SMSDONE             YES, DONE
         MVC   STORSTAT,=CL2'DA'   ASSUME DISABLED/ALL
         CLI   0(R2),4             SEE IF DISABLED/ALL
         BE    SMSDONE             YES, DONE
         MVC   STORSTAT,=CL2'DN'   ASSUME DISABLED/NEW
         CLI   0(R2),5             SEE IF DISABLED/NEW
         BE    SMSDONE             YES, DONE
         MVC   STORSTAT,=CL2'??'   NO VALID STATUS
SMSDONE  L     R14,SAVESMSV        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
.NOSMS09 ANOP
         EJECT
***********************************************************************
*                                                                     *
*        ERROR IN LSPACE                                              *
*                                                                     *
***********************************************************************
ERROR01  MVC   TBLERROR,=F'1'      SET ERROR NUMBER IN VOLUME RECORD
         B     PUTTBL              GO MOVE VOLUME RECORD INTO TABLE
         SPACE 3
***********************************************************************
*                                                                     *
*        ERROR IN PARSE                                               *
*                                                                     *
***********************************************************************
ERROR02  MVC   MSG,=CL120'RETURN CODE XXXXX FROM PARSE'
         CVD   R15,DOUBLE          CONVERT RETURN CODE TO PACKED
         OI    DOUBLE+7,X'0F'      SET SIGN PRINTABLE
         UNPK  MSG+12(5),DOUBLE+5  UNPACK RETURN CODE INTO MSG
         BAL   R14,PUTMSG          GO WRITE ERROR MESSAGE
         B     EXIT
         SPACE 3
***********************************************************************
*                                                                     *
*        MAXIMUM VOLUMES EXCEEDED                                     *
*                                                                     *
***********************************************************************
ERROR03  MVC   MSG,=CL120'MAXIMUM OF X,XXX,XXX VOLUMES EXCEEDED'
         MVC   MSG+10(10),=X'40206B2020206B202120'
         CVD   R15,DOUBLE          CONVERT RETURN CODE TO PACKED
         ED    MSG+10(10),DOUBLE+4 EDIT MAX VOLUMES TO MSG
         BAL   R14,PUTMSG          GO WRITE ERROR MESSAGE
         MVC   MSG,=CL120'PROCESSING CONTINUES WITH FIRST VOLUMES'
         BAL   R14,PUTMSG          GO WRITE ERROR MESSAGE
         B     ENDVOLS             GO PROCESS CURRENT TABLE
         SPACE 3
***********************************************************************
*                                                                     *
*        NO VOLUMES FOUND                                             *
*                                                                     *
***********************************************************************
ERROR04  MVC   DETAIL1,BLANKS      CLEAR THE DETAIL LINE
         MVC   OUTVOL1,VOLSER      MOVE VOLSER FIELD TO DETAIL LINE
         MVC   OUTADDR1(40),=CL40'NO VOLUMES FOUND MATCHING CRITERIA'
         MVC   MSG(79),DETAIL1     MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         B     EXIT                GET OUT
         EJECT
         PUSH  USING
         DROP  R11,R12
***********************************************************************
*                                                                     *
*        VALIDITY CHECK ROUTINES FOR PARSE                            *
*                                                                     *
***********************************************************************
***********************************************************************
*                                                                     *
*        THE FIRST POSITIONAL PARAMETER IS EITHER A 1-6 CHARACTER     *
*        VOLSER OR A 1-4 CHARACTER DEVICE NUMBER PRECEDED BY '@'.     *
*        BOTH THE VOLSER AND DEVICE ADDRESS MAY BE MASKED.            *
*                                                                     *
*        THIS FIELD CAN BE:                                           *
*                                                                     *
*          1)  A SINGLE CHARACTER '-' INDICATING ALL VOLUMES ARE      *
*              ELIGIBLE FOR SELECTING DEPENDING ON OTHER SELECTION    *
*              CRITERIA.                                              *
*                                                                     *
*          2)  A 1 TO 4 CHARACTER UNIT ADDRESS PRECEDED BY '@'.       *
*              THE UNIT ADDRESS MUST CONTAIN VALID HEXADECIMAL        *
*              CHARACTERS.  IT IS ASSUMED THAT IT IS GENERIC.         *
*              IT MAY OPTIONALLY BE ENDED IN AN ASTERISK '*'          *
*              BUT IF AN ASTERISK IS SPECIFIED IT MUST BE THE         *
*              LAST (OR ONLY) CHARACTER.                              *
*                                                                     *
*          3)  A 1 TO 6 CHARACTER VOLSER.  IT IS ASSUMED THAT         *
*              IT IS GENERIC.  IT MAY OPTIONALLY BE ENDED IN AN       *
*              ASTERISK '*' BUT IF AN ASTERISK IS SPECIFIED IT        *
*              MUST BE THE LAST (OR ONLY) CHARACTER.                  *
*                                                                     *
*          4)  THE VOLSER MAY BE MASKED IN THAT A PLACEHOLDER         *
*              CHARACTER OF '?' MAY BE SPECIFIED INDICATING THAT      *
*              THIS CHARACTER OF THE VOLSER MAY BE ANY CHARACTER.     *
*                                                                     *
*          5)  THE UNIT ADDRESS MAY ALSO BE MASKED IN THAT A          *
*              PLACEHOLDER CHARACTER OF '?' MAY BE SPECIFIED          *
*              INDICATING THAT THIS CHARACTER OF THE UNIT ADDRESS     *
*              MAY BE ANY CHARACTER.                                  *
*                                                                     *
***********************************************************************
VALRTN1  SAVE  (14,12)             SAVE INPUT REGISTERS
         LR    R10,R15             SET FIRST BASE REGISTER
         LA    R11,4095(R10)       SET SECOND
         LA    R11,1(,R11)             BASE REGISTER
         LA    R12,4095(R11)       SET THIRD
         LA    R12,1(,R12)             BASE REGISTER
         USING VALRTN1,R10,R11,R12 SET ADDRESSABILITY TO CSECT
         LR    R5,R1               SAVE REGISTER 1
         L     R2,0(R5)            LOAD ADDRESS OF PDL FOR THIS OPERAND
         L     R3,0(R2)            LOAD ADDRESS OF PARAMETER
         LH    R4,4(R2)            LOAD LENGTH OF PARAMETER
         TM    6(R2),X'80'         SEE IF PARAMETER IS PRESENT
         BZ    VALRTN1X            ZERO, NOT PRESENT, GET OUT
         LTR   R4,R4               TEST LENGTH
         BNP   VALRTN1X            ZERO, NOT PRESENT, GET OUT
         CH    R4,=H'1'            SEE IF LENGTH = 1
         BNE   VALRTN1A            NO BRANCH
         CLI   0(R3),C'*'          SEE IF '*'
         BE    VALRTN1X            YES, OK
         CLI   0(R3),C'-'          SEE IF '-'
         BE    VALRTN1X            YES, OK
VALRTN1A CLI   0(R3),C'@'          SEE IF '@'
         BE    VALRTN1T            YES, UNIT ADDRESS
         LR    R14,R3              POINT TO START OF VOLSER
VALRTN1B TRT   0(1,R14),CHECKAN    SEE IF VALID ALPHANUMERIC CHARACTER
         BZ    VALRTN1D            YES, GO TO NEXT CHARACTER
         CLI   0(R14),C'*'         SEE IF '*' CHARACTER
         BNE   VALRTN1C            NO, CONTINUE
         CH    R4,=H'1'            YES, SEE IF LAST CHARACTER OF VOLSER
         BE    VALRTN1D            YES, CONTINUE
         B     VALRTN11            NO, VALRTN1 ERROR 1
VALRTN1C CLI   0(R14),C'?'         SEE IF PLACEHOLDER
         BE    VALRTN1D            YES, VALID CHARACTER
         B     VALRTN12            NO, VALRTN1 ERROR 3
VALRTN1D LA    R14,1(,R14)         POINT TO NEXT CHAR OF VOLSER
         BCT   R4,VALRTN1B         LOOP
VALRTN1X RETURN (14,12),RC=0       RETURN TO CALLER WITH RC=0
VALRTN1T CH    R4,=H'1'            SEE IF NULL UNIT ADDRESS
         BE    VALRTN1X            YES, SELECT ALL UNIT ADDRESSES
         CH    R4,=H'5'            SEE IF EXCEEDS MAX LENGTH OF 5
         BH    VALRTN13            YES, VALRTN1 ERROR 4
         SH    R4,=H'1'            SUBTRACT 1 FROM LENGTH FOR '@'
         LA    R14,1(,R3)          POINT PAST '@' TO UNIT ADDRESS
VALRTN1U TRT   0(1,R14),CHECKHEX   SEE IF VALID HEX CHARACTER
         BZ    VALRTN1W            YES, GO TO NEXT CHARACTER
         CLI   0(R14),C'*'         SEE IF '*' CHARACTER
         BNE   VALRTN1V            NO, CONTINUE
         CH    R4,=H'1'            YES, SEE IF LAST CHARACTER OF VOLSER
         BE    VALRTN1W            YES, CONTINUE
         B     VALRTN14            NO, VALRTN1 ERROR 4
VALRTN1V CLI   0(R14),C'?'         SEE IF PLACEHOLDER
         BE    VALRTN1W            YES, VALID CHARACTER
         BNZ   VALRTN15            NO, VALRTN1 ERROR 5
VALRTN1W LA    R14,1(,R14)         POINT TO NEXT CHAR OF UNIT ADDRESS
         BCT   R4,VALRTN1U         LOOP
         B     VALRTN1X            UNIT ADDRESS VALID, GET OUT
VALRTN11 LA    R15,MSG011          POINT TO MESSAGE
         ST    R15,8(R5)           SAVE SECOND LEVEL MESSAGE ADDRESS
         RETURN (14,12),RC=4       RETURN TO CALLER WITH RC=4
MSG011   DC    AL2(90),AL2(0)
         DC    CL11'LISTFMSG11'
         DC    CL75'THE VOLSER CANNOT CONTAIN AN ''*'' OTHER THAN IN THX
               E LAST CHARACTER'
VALRTN12 LA    R15,MSG012          POINT TO MESSAGE
         ST    R15,8(R5)           SAVE SECOND LEVEL MESSAGE ADDRESS
         RETURN (14,12),RC=4       RETURN TO CALLER WITH RC=4
MSG012   DC    AL2(90),AL2(0)
         DC    CL11'LISTFMSG12'
         DC    CL75'THE VOLSER MUST BE ALPHANUMERIC OR CONTAIN A MASKINX
               G CHARACTER OF ''?'''
VALRTN13 LA    R15,MSG013          POINT TO MESSAGE
         ST    R15,8(R5)           SAVE SECOND LEVEL MESSAGE ADDRESS
         RETURN (14,12),RC=4       RETURN TO CALLER WITH RC=4
MSG013   DC    AL2(90),AL2(0)
         DC    CL11'LISTFMSG13'
         DC    CL75'THE UNIT ADDRESS CANNOT EXCEED 4 CHARACTERS IN LENGX
               TH'
VALRTN14 LA    R15,MSG014          POINT TO MESSAGE
         ST    R15,8(R5)           SAVE SECOND LEVEL MESSAGE ADDRESS
         RETURN (14,12),RC=4       RETURN TO CALLER WITH RC=4
MSG014   DC    AL2(90),AL2(0)
         DC    CL11'LISTFMSG14'
         DC    CL75'THE UNIT ADDRESS CANNOT CONTAIN AN ''*'' OTHER THANX
                IN THE LAST CHARACTER'
VALRTN15 LA    R15,MSG015          POINT TO MESSAGE
         ST    R15,8(R5)           SAVE SECOND LEVEL MESSAGE ADDRESS
         RETURN (14,12),RC=4       RETURN TO CALLER WITH RC=4
MSG015   DC    AL2(90),AL2(0)
         DC    CL11'LISTFMSG15'
         DC    CL75'THE UNIT ADDRESS MUST CONTAIN HEXADECIMAL CHARACTERX
               S OR A MASKING CHARACTER OF ''?'''
         DROP  R10,R11,R12
***********************************************************************
*                                                                     *
*        THE SORT OPTION ALLOWS FIELD NAMES TO BE SPECIFIED ALONG     *
*        WITH 'A' OR 'D' FOR ASCENDING AND DESCENDING.  THIS ROUTINE  *
*        VALIDATES THE FIELD NAME.                                    *
*                                                                     *
***********************************************************************
VALRTN2  SAVE  (14,12)             SAVE INPUT REGISTERS
         LR    R10,R15             SET FIRST BASE REGISTER
         LA    R11,4095(R10)       SET SECOND
         LA    R11,1(,R11)             BASE REGISTER
         LA    R12,4095(R11)       SET THIRD
         LA    R12,1(,R12)             BASE REGISTER
         USING VALRTN2,R10,R11,R12 SET ADDRESSABILITY TO CSECT
         L     R2,0(R1)            LOAD ADDRESS OF PDL FOR THIS OPERAND
         L     R3,0(R2)            LOAD ADDRESS OF PARAMETER
         LH    R4,4(R2)            LOAD LENGTH OF PARAMETER
         TM    6(R2),X'80'         SEE IF PARAMETER IS PRESENT
         BZ    VALRTN2X            ZERO, NOT PRESENT, GET OUT
         LTR   R4,R4               TEST LENGTH
         BNP   VALRTN2X            ZERO, NOT PRESENT, GET OUT
         BCTR  R4,0                MAKE MACHINE LENGTH
         LA    R14,OPTNTBL         LOAD ADDRESS OF OPTION TABLE
VALRTN2A CLI   0(R14),X'FF'        SEE IF END OF OPTION TABLE
         BE    VALRTN21            YES, ERROR
         CH    R4,0(R14)           SEE IF LENGTH GE MIN LENGTH
         BL    VALRTN2B            NO, BYPASS THIS OPTION
         EX    R4,COMPOPT1         SEE IF MATCH ON OPTION
         BE    VALRTN2X            YES, GET OUT
VALRTN2B LA    R14,20(,R14)        INCREMENT TO NEXT TABLE ENTRY
         B     VALRTN2A            LOOP
VALRTN21 LA    R15,MSG021          POINT TO MESSAGE
         ST    R15,8(R1)           SAVE SECOND LEVEL MESSAGE ADDRESS
         RETURN (14,12),RC=4       RETURN TO CALLER WITH RC=4
VALRTN2X RETURN (14,12),RC=0       RETURN TO CALLER WITH RC=0
MSG021   DC    AL2(54),AL2(0)
         DC    CL11'LISTFMSG21'
         DC    CL40'THIS FIELD MUST BE ''UNIT'' OR ''VOLSER'''
COMPOPT1 CLC   0(0,R3),2(R14)      **** EXECUTE ONLY ****
         DROP  R10,R11,R12
***********************************************************************
*                                                                     *
*        THE SORT OPTION ALLOWS FIELD NAMES TO BE SPECIFIED ALONG     *
*        WITH 'A' OR 'D' FOR ASCENDING AND DESCENDING.  THIS ROUTINE  *
*        VALIDATES THE ASCENDING OR DESCENDING SPECIFICATION.         *
*                                                                     *
***********************************************************************
VALRTN3  SAVE  (14,12)             SAVE INPUT REGISTERS
         LR    R10,R15             SET FIRST BASE REGISTER
         LA    R11,4095(R10)       SET SECOND
         LA    R11,1(,R11)             BASE REGISTER
         LA    R12,4095(R11)       SET THIRD
         LA    R12,1(,R12)             BASE REGISTER
         USING VALRTN3,R10,R11,R12 SET ADDRESSABILITY TO CSECT
         L     R2,0(R1)            LOAD ADDRESS OF PDL FOR THIS OPERAND
         L     R3,0(R2)            LOAD ADDRESS OF PARAMETER
         LH    R4,4(R2)            LOAD LENGTH OF PARAMETER
         TM    6(R2),X'80'         SEE IF PARAMETER IS PRESENT
         BZ    VALRTN3X            ZERO, NOT PRESENT, GET OUT
         CH    R4,=H'1'            TEST LENGTH
         BNE   VALRTN31            NOT 1, ERROR
         CLI   0(R3),C'A'          SEE IF ASCENDING OPTION
         BE    VALRTN3X            YES, OK
         CLI   0(R3),C'D'          SEE IF DESCENDING OPTION
         BE    VALRTN3X            YES, OK
VALRTN31 LA    R15,MSG031          POINT TO MESSAGE
         ST    R15,8(R1)           SAVE SECOND LEVEL MESSAGE ADDRESS
         RETURN (14,12),RC=4       RETURN TO CALLER WITH RC=4
VALRTN3X RETURN (14,12),RC=0       RETURN TO CALLER WITH RC=0
MSG031   DC    AL2(90),AL2(0)
         DC    CL11'LISTFMSG31'
         DC    CL75'THIS FIELD MUST BE ''A'' OR ''D'' TO INDICATE ASCENX
               DING OR DESCENDING SEQUENCE'
         DROP  R10,R11,R12
***********************************************************************
*                                                                     *
*        THE UNITADDRESS OPTION ALLOW THE UNIT ADDRESS TO BE          *
*        SPECIFIED FOR SELECTION.  IT CAN BE 1 TO 4 HEXIDECIMAL       *
*        CHARACTERS.  IT IS ASSUMED THAT IT IS GENERIC.  IT MAY       *
*        OPTIONALLY BE ENDED IN AN ASTERISK '*' BUT IF AN ASTERISK    *
*        IS SPECIFIED IT MUST BE THE LAST (OR ONLY) CHARACTER.        *
*                                                                     *
*        1)  A 1 TO 4 CHARACTER UNIT ADDRESS MAY BE SPECIFIED.        *
*            THE UNIT ADDRESS MUST CONTAIN VALID HEXADECIMAL          *
*            CHARACTERS.  IT IS ASSUMED THAT IT IS GENERIC.           *
*            IT MAY OPTIONALLY BE ENDED IN AN ASTERISK '*'            *
*            BUT IF AN ASTERISK IS SPECIFIED IT MUST BE THE           *
*            LAST (OR ONLY) CHARACTER.                                *
*                                                                     *
*        2)  THE UNIT ADDRESS MAY BE MASKED IN THAT A PLACEHOLDER     *
*            CHARACTER OF '?' MAY BE SPECIFIED INDICATING THAT        *
*            THIS CHARACTER OF THE UNIT ADDRESS MAY BE ANY            *
*            CHARACTER.                                               *
*                                                                     *
***********************************************************************
VALRTN4  SAVE  (14,12)             SAVE INPUT REGISTERS
         LR    R10,R15             SET FIRST BASE REGISTER
         LA    R11,4095(R10)       SET SECOND
         LA    R11,1(,R11)             BASE REGISTER
         LA    R12,4095(R11)       SET THIRD
         LA    R12,1(,R12)             BASE REGISTER
         USING VALRTN4,R10,R11,R12 SET ADDRESSABILITY TO CSECT
         LR    R5,R1               SAVE REGISTER 1
         L     R2,0(R5)            LOAD ADDRESS OF PDL FOR THIS OPERAND
         L     R3,0(R2)            LOAD ADDRESS OF PARAMETER
         LH    R4,4(R2)            LOAD LENGTH OF PARAMETER
         TM    6(R2),X'80'         SEE IF PARAMETER IS PRESENT
         BZ    VALRTN4X            ZERO, NOT PRESENT, GET OUT
         LTR   R4,R4               TEST LENGTH
         BZ    VALRTN4X            ZERO, NOT PRESENT, GET OUT
         LR    R14,R3              SET START ADDRESS
VALRTN4U TRT   0(1,R14),CHECKHEX   SEE IF VALID HEX CHARACTER
         BZ    VALRTN4W            YES, GO TO NEXT CHARACTER
         CLI   0(R14),C'*'         SEE IF '*' CHARACTER
         BNE   VALRTN4V            NO, CONTINUE
         CH    R4,=H'1'            YES, SEE IF LAST CHARACTER OF VOLSER
         BE    VALRTN4W            YES, CONTINUE
         B     VALRTN41            NO, VALRTN4 ERROR 1
VALRTN4V CLI   0(R14),C'?'         SEE IF PLACEHOLDER
         BE    VALRTN4W            YES, VALID CHARACTER
         BNZ   VALRTN42            NO, VALRTN4 ERROR 2
VALRTN4W LA    R14,1(,R14)         POINT TO NEXT CHAR OF UNIT ADDRESS
         BCT   R4,VALRTN4U         LOOP
         B     VALRTN4X            UNIT ADDRESS VALID, GET OUT
VALRTN41 LA    R15,MSG041          POINT TO MESSAGE
         ST    R15,8(R5)           SAVE SECOND LEVEL MESSAGE ADDRESS
         RETURN (14,12),RC=4       RETURN TO CALLER WITH RC=4
MSG041   DC    AL2(90),AL2(0)
         DC    CL11'LISTFMSG41'
         DC    CL75'THE UNIT ADDRESS CANNOT CONTAIN AN ''*'' OTHER THANX
                IN THE LAST CHARACTER'
VALRTN42 LA    R15,MSG042          POINT TO MESSAGE
         ST    R15,8(R5)           SAVE SECOND LEVEL MESSAGE ADDRESS
         RETURN (14,12),RC=4       RETURN TO CALLER WITH RC=4
MSG042   DC    AL2(90),AL2(0)
         DC    CL11'LISTFMSG42'
         DC    CL75'THE UNIT ADDRESS MUST CONTAIN HEXADECIMAL CHARACTERX
               S OR A MASKING CHARACTER OF ''?'''
VALRTN4X RETURN (14,12),RC=0       RETURN TO CALLER WITH RC=0
         DROP  R10,R11,R12
***********************************************************************
*                                                                     *
*        THE VOLSER OPTION ALLOWS THE 1-6 CHARACTER GENERIC           *
*        OR MASKED VOLSER TO BE SPECIFIED.                            *
*                                                                     *
*        THIS FIELD CAN BE:                                           *
*                                                                     *
*          1)  A SINGLE CHARACTER '-' INDICATING ALL VOLUMES ARE      *
*              ELIGIBLE FOR SELECTING DEPENDING ON OTHER SELECTION    *
*              CRITERIA.                                              *
*                                                                     *
*          2)  A 1 TO 6 CHARACTER VOLSER.  IT IS ASSUMED THAT         *
*              IT IS GENERIC.  IT MAY OPTIONALLY BE ENDED IN AN       *
*              ASTERISK '*' BUT IF AN ASTERISK IS SPECIFIED IT        *
*              MUST BE THE LAST (OR ONLY) CHARACTER.                  *
*                                                                     *
*          3)  THE VOLSER MAY BE MASKED IN THAT A PLACEHOLDER         *
*              CHARACTER OF '?' MAY BE SPECIFIED INDICATING THAT      *
*              THIS CHARACTER OF THE VOLSER MAY BE ANY CHARACTER.     *
*                                                                     *
***********************************************************************
VALRTN5  SAVE  (14,12)             SAVE INPUT REGISTERS
         LR    R10,R15             SET FIRST BASE REGISTER
         LA    R11,4095(R10)       SET SECOND
         LA    R11,1(,R11)             BASE REGISTER
         LA    R12,4095(R11)       SET THIRD
         LA    R12,1(,R12)             BASE REGISTER
         USING VALRTN5,R10,R11,R12 SET ADDRESSABILITY TO CSECT
         LR    R5,R1               SAVE REGISTER 1
         L     R2,0(R5)            LOAD ADDRESS OF PDL FOR THIS OPERAND
         L     R3,0(R2)            LOAD ADDRESS OF PARAMETER
         LH    R4,4(R2)            LOAD LENGTH OF PARAMETER
         TM    6(R2),X'80'         SEE IF PARAMETER IS PRESENT
         BZ    VALRTN5X            ZERO, NOT PRESENT, GET OUT
         LTR   R4,R4               TEST LENGTH
         BZ    VALRTN5X            ZERO, NOT PRESENT, GET OUT
         LR    R14,R3              SET START ADDRESS
VALRTN5U TRT   0(1,R14),CHECKAN    SEE IF VALID ALPHANUMERIC CHARACTER
         BZ    VALRTN5D            YES, GO TO NEXT CHARACTER
         CLI   0(R14),C'*'         SEE IF '*' CHARACTER
         BNE   VALRTN5C            NO, CONTINUE
         CH    R4,=H'1'            YES, SEE IF LAST CHARACTER OF VOLSER
         BE    VALRTN5D            YES, CONTINUE
         B     VALRTN51            NO, VALRTN5 ERROR 2
VALRTN5C CLI   0(R14),C'?'         SEE IF PLACEHOLDER
         BE    VALRTN5D            YES, VALID CHARACTER
         B     VALRTN52            NO, VALRTN5 ERROR 3
VALRTN5D LA    R14,1(,R14)         POINT TO NEXT CHAR OF VOLSER
         BCT   R4,VALRTN5U         LOOP
VALRTN5X RETURN (14,12),RC=0       RETURN TO CALLER WITH RC=0
VALRTN51 LA    R15,MSG051          POINT TO MESSAGE
         ST    R15,8(R5)           SAVE SECOND LEVEL MESSAGE ADDRESS
         RETURN (14,12),RC=4       RETURN TO CALLER WITH RC=4
MSG051   DC    AL2(90),AL2(0)
         DC    CL11'LISTFMSG51'
         DC    CL75'THE VOLSER CANNOT CONTAIN AN ''*'' OTHER THAN IN THX
               E LAST CHARACTER'
VALRTN52 LA    R15,MSG052          POINT TO MESSAGE
         ST    R15,8(R5)           SAVE SECOND LEVEL MESSAGE ADDRESS
         RETURN (14,12),RC=4       RETURN TO CALLER WITH RC=4
MSG052   DC    AL2(90),AL2(0)
         DC    CL11'LISTFMSG52'
         DC    CL75'THE VOLSER MUST BE ALPHANUMERIC OR CONTAIN A MASKINX
               G CHARACTER OF ''?'''
         DROP  R10,R11,R12
         POP   USING
***********************************************************************
*                                                                     *
*        CONSTANTS USED BY THIS PROGRAM                               *
*                                                                     *
***********************************************************************
         SPACE 3
MYDCELEN DC    H'72'               LENGTH OF COPY OF DCE
LSPC     LSPACE MF=L
LSPCL    EQU   *-LSPC
GETL     EQU   2048*2048           1024K GETMAIN  (55188 ENTRIES)
MAXENT   DC    A(GETL/76)          MAXIMUM ENTRIES IN GETMAIN AREA
TBLINIT  DS    0CL76               TABLE INITIALIZATION RECORD
         DC    F'0'                CHAIN TO NEXT RECORD
         DC    CL6' '              VOLSER
         DC    CL4' '              DEVICE ADDRESS
         DC    H'0'                DEVICE ADDRESS (HEX)
         DC    CL2' '              FILLER
         DC    CL8' '              DEVICE TYPE
         DC    CL1' '              SMS INDICATOR
         DC    CL1' '              IXVTOC INDICATOR
         DC    CL1' '              SPECIAL CLASS
         DC    CL3' '              FIRST MOUNT ATTRIBUTE
         DC    CL1' '              CONSTANT '/'
         DC    CL3' '              SECOND MOUNT ATTRIBUTE
         DC    CL3' '              FILLER
         DC    AL1(0)              TOTAL ALTERNATE CYLS ON VOL
         DC    F'0'                TOTAL CYLS ON VOL
         DC    F'0'                USE COUNT
         DC    F'0'                TOTAL FREE CYLS
         DC    F'0'                TOTAL FREE TRKS
         DC    F'0'                TOTAL FREE AREAS
         DC    F'0'                NUMBER OF FREE DSCBS
         DC    F'0'                LARGEST FREE CYLS
         DC    F'0'                LARGEST FREE TRKS
         DC    F'0'                ERROR NUMBER
         SPACE 3
***********************************************************************
*                                                                     *
*        SORT OPTIONS TABLE                                           *
*                                                                     *
*         2 DIGIT MINIMUM MACHINE LENGTH OF KEYWORD                   *
*        14 DIGIT KEYWORD                                             *
*         2 DIGIT OFFSET OF DATA WITHIN TABLE RECORD                  *
*         2 DIGIT MACHINE LENGTH OF DATA WITHIN TABLE RECORD          *
*                                                                     *
***********************************************************************
OPTNTBL  DS    0F                  SORT KEYWORD OPTIONS TABLE
         DC    H'00',CL14'VOLSER        ',AL2(04),AL2(5)
         DC    H'01',CL14'UNITADDRESS   ',AL2(14),AL2(1)
         DC    H'00',CL14'ADDRESS       ',AL2(14),AL2(1)
         DC    H'00',CL14'DEVICETYPE    ',AL2(18),AL2(7)
         DC    H'00',CL14'DEVTYPE       ',AL2(18),AL2(7)
         DC    H'00',CL14'DTYPE         ',AL2(18),AL2(7)
         DC    H'01',CL14'SMSINDICATOR  ',AL2(26),AL2(0)
         DC    H'00',CL14'INDEXVTOCIND  ',AL2(27),AL2(0)
         DC    H'00',CL14'IXVTOCIND     ',AL2(27),AL2(0)
         DC    H'01',CL14'SPECIALIND    ',AL2(28),AL2(0)
         DC    H'01',CL14'SPECIALTYPE   ',AL2(28),AL2(0)
         DC    H'01',CL14'TYPE          ',AL2(28),AL2(0)
         DC    H'00',CL14'CLASS         ',AL2(28),AL2(0)
         AIF   ('&SMS' NE 'YES').NOSMS10
         DC    H'02',CL14'STORAGEGROUP  ',AL2(29),AL2(7)
         DC    H'02',CL14'STORGROUP     ',AL2(29),AL2(7)
         DC    H'02',CL14'SGROUP        ',AL2(29),AL2(7)
         DC    H'02',CL14'SGSTATUS      ',AL2(37),AL2(1)
         AGO   .NOSMS11
.NOSMS10 ANOP
         DC    H'00',CL14'MOUNT         ',AL2(29),AL2(6)
         DC    H'00',CL14'MOUNT1        ',AL2(29),AL2(2)
         DC    H'00',CL14'MOUNT2        ',AL2(33),AL2(2)
.NOSMS11 ANOP
         DC    H'05',CL14'TOTALCYL      ',AL2(40),AL2(3)
         DC    H'03',CL14'TOTCYL        ',AL2(40),AL2(3)
         DC    H'01',CL14'USECOUNT      ',AL2(44),AL2(3)
         DC    H'01',CL14'USERS         ',AL2(44),AL2(3)
         DC    H'05',CL14'TOTALFREE     ',AL2(48),AL2(7)
         DC    H'03',CL14'TOTFREE       ',AL2(48),AL2(7)
         DC    H'09',CL14'TOTALFREEEXT  ',AL2(56),AL2(3)
         DC    H'07',CL14'TOTFREEEXT    ',AL2(56),AL2(3)
         DC    H'09',CL14'TOTALFREEAREAS',AL2(56),AL2(3)
         DC    H'07',CL14'TOTFREEAREAS  ',AL2(56),AL2(3)
         DC    H'06',CL14'TOTALFEXTENTS ',AL2(56),AL2(3)
         DC    H'04',CL14'TOTFEXTENTS   ',AL2(56),AL2(3)
         DC    H'06',CL14'TOTALFAREAS   ',AL2(56),AL2(3)
         DC    H'04',CL14'TOTFAREAS     ',AL2(56),AL2(3)
         DC    H'04',CL14'FREEEXTENTS   ',AL2(56),AL2(3)
         DC    H'01',CL14'FEXTENTS      ',AL2(56),AL2(3)
         DC    H'09',CL14'TOTALFREEDSCBS',AL2(60),AL2(3)
         DC    H'07',CL14'TOTFREEDSCBS  ',AL2(60),AL2(3)
         DC    H'06',CL14'TOTALFDSCBS   ',AL2(60),AL2(3)
         DC    H'04',CL14'TOTFDSCBS     ',AL2(60),AL2(3)
         DC    H'04',CL14'FREEDSCBS     ',AL2(60),AL2(3)
         DC    H'01',CL14'FDSCBS        ',AL2(60),AL2(3)
         DC    H'07',CL14'LARGESTFREE   ',AL2(64),AL2(7)
         DC    H'01',CL14'LFREE         ',AL2(64),AL2(7)
         DC    H'03',CL14'NONE          ',X'FFFF',X'FFFF'
         DC    X'FFFF'
***********************************************************************
*                                                                     *
*        UNITNAME TO VOLSER PREFIX TABLE                              *
*                                                                     *
***********************************************************************
UNITABLE DS    0H
         DC    CL8'SYSALLDA',CL6'*'
         DC    CL8'SYSDA   ',CL6'*'
         DC    CL8'DISK    ',CL6'*'
         DC    CL8'SYSTS   ',CL6'TS'
         DC    CL8'SYSPG   ',CL6'PG'
         DC    CL8'SYSOP   ',CL6'OP'
         DC    X'FF'
         SPACE 3
BLANKS   DC    CL120' '            CHARACTER STRING OF BLANKS
         AIF   ('&SMS' NE 'YES').NOSMS12
HEAD1A   DC    CL120' '
         ORG   HEAD1A
         DC    C'VOLUME  DEV DEVICE   S I   STORAGE  SG '
         DC    C'USE   ----- T'
         DC    C'OTAL FREE ----- -- LARGE --'
         ORG
HEAD2A   DC    CL120' '
         ORG   HEAD2A
         DC    C' NAME   ADR  TYPE    M X    GROUP   ST '
         DC    C'CNT     CYL   T'
         DC    C'RK   NUM DSCB   CYL   TRK'
         ORG
HEAD1B   DC    CL120' '
         ORG   HEAD1B
         DC    C'VOLUME  DEV DEVICE   S I   STORAGE  SG '
         DC    C'ALT     TOTAL'
         ORG
HEAD2B   DC    CL120' '
         ORG   HEAD2B
         DC    C' NAME   ADR  TYPE    M X    GROUP   ST '
         DC    C'CYLS     CYLS'
         ORG
         AGO   .NOSMS13
.NOSMS12 ANOP
HEAD1A DC      CL120' '
         ORG   HEAD1A
         DC    C'VOLUME  DEV DEVICE   S I               '
         DC    C'USE   ----- T'
         DC    C'OTAL FREE ----- -- LARGE --'
         ORG
HEAD2A DC      CL120' '
         ORG   HEAD2A
         DC    C' NAME   ADR  TYPE    M X   MOUNTED     '
         DC    C'CNT     CYL   T'
         DC    C'RK   NUM DSCB   CYL   TRK'
         ORG
HEAD1B DC      CL120' '
         ORG   HEAD1B
         DC    C'VOLUME  DEV DEVICE   S I               '
         DC    C' ALT    TOTAL'
         ORG
HEAD2B DC      CL120' '
         ORG   HEAD2B
         DC    C' NAME   ADR  TYPE    M X   MOUNTED     '
         DC    C'CYLS     CYLS'
         ORG
.NOSMS13 ANOP
DEVTABLE DS    0D                      DEVICE TYPE AS LISTED IN DCE
         DC    X'1E',C'D '             DCEOBRDT      3380/3390
         DC    X'21',C'J '             DCEOBRDT      3380/3390
         DC    X'23',C'K '             DCEOBRDT      3380/3390
         DC    X'2E',C'E '             DCEOBRDT      3380/3390
         DC    X'26',C'-1'             DCEOBRDT      3380/3390
         DC    X'27',C'-2'             DCEOBRDT      3380/3390
         DC    X'24',C'-3'             DCEOBRDT      3380/3390
         DC    X'32',C'-9'             DCEOBRDT      3380/3390
         DC    X'3E',C'-A'             DCEOBRDT      3380/3390
         DC    AL1(00),H'0'            END OF TABLE
CHECKHEX DC    256X'FF'           TRT TABLE TO CHECK FOR VALID HEX
         ORG   CHECKHEX+C'A'
         DC    6X'00'
         ORG   CHECKHEX+C'0'
         DC    10X'00'
         ORG
CHECKAN  DC    256X'FF'           TRT TABLE TO CHECK FOR VALID ALPHANUM
         ORG   CHECKAN+C'$'
         DC    1X'00'
         ORG   CHECKAN+C'#'
         DC    1X'00'
         ORG   CHECKAN+C'@'
         DC    1X'00'
         ORG   CHECKAN+C'A'
         DC    9X'00'
         ORG   CHECKAN+C'J'
         DC    9X'00'
         ORG   CHECKAN+C'S'
         DC    8X'00'
         ORG   CHECKAN+C'0'
         DC    10X'00'
         ORG
PUTLINIT PUTLINE MF=L              PUTLINE LIST FORM
         EJECT
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*        PARSE CONTROL BLOCKS                                         *
*                                                                     *
***********************************************************************
LSTFPCL  IKJPARM DSECT=LSTFPDL
PARSSEL  IKJIDENT 'VOLUME/UNIT ADDRESS SEARCH ARGUMENT',               X
               FIRST=ANY,OTHER=ANY,                                    X
               MAXLNTH=6,VALIDCK=VALRTN1,                              X
               HELP='VOLSER OR UNIT ADDRESS WHEN PRECEEDED BY ''@'''
TOTALS   IKJKEYWD DEFAULT='NOTOTALS'
         IKJNAME 'TOTALS'
         IKJNAME 'NOTOTALS'
HARDOPT  IKJKEYWD DEFAULT='NOHARDINFO'
         IKJNAME 'HARDINFO',ALIAS=('HARDWARE','HARDWAREINFO')
         IKJNAME 'NOHARDINFO',ALIAS=('NOHARDWARE','NOHARDWAREINFO')
SMS      IKJKEYWD
         IKJNAME 'SMSONLY'
         IKJNAME 'NOSMS'
IXVTOC   IKJKEYWD
         IKJNAME 'IXVTOCONLY'
         IKJNAME 'NOIXVTOC'
VOL      IKJKEYWD
         IKJNAME 'VOLSER',SUBFLD=SUBVOL,ALIAS=('VOLUME')
UNIT     IKJKEYWD
         IKJNAME 'UNITADDRESS',SUBFLD=SUBUNIT,ALIAS=('ADDRESS')
         AIF   ('&SMS' NE 'YES').NOSMS14
STORG    IKJKEYWD
         IKJNAME 'STORAGEGROUP',SUBFLD=SUBSG,ALIAS=('SG')
.NOSMS14 ANOP
DEVT     IKJKEYWD
         IKJNAME 'DEVICETYPE',SUBFLD=SUBDEVT,                          X
               ALIAS=('DTYPE','DEVTYPE')
SORTK    IKJKEYWD DEFAULT='NOSORT'
         IKJNAME 'SORT',SUBFLD=SUBSORTS
         IKJNAME 'NOSORT'
SUBSORTS IKJSUBF
SUBSRT1A IKJIDENT 'FIRST FIELD TO BE USED FOR SORTING',                X
               DEFAULT='NONE',CHAR,                                    X
               VALIDCK=VALRTN2
SUBSRT1B IKJIDENT 'SEQUENCE INDICATOR FOR FIRST SORT FIELD',           X
               DEFAULT='A',CHAR,                                       X
               VALIDCK=VALRTN3
SUBSRT2A IKJIDENT 'SECOND FIELD TO BE USED FOR SORTING',               X
               DEFAULT='NONE',CHAR,                                    X
               VALIDCK=VALRTN2
SUBSRT2B IKJIDENT 'SEQUENCE INDICATOR FOR SECOND SORT FIELD',          X
               DEFAULT='A',CHAR,                                       X
               VALIDCK=VALRTN3
SUBSRT3A IKJIDENT 'THIRD FIELD TO BE USED FOR SORTING',                X
               DEFAULT='NONE',CHAR,                                    X
               VALIDCK=VALRTN2
SUBSRT3B IKJIDENT 'SEQUENCE INDICATOR FOR THIRD SORT FIELD',           X
               DEFAULT='A',CHAR,                                       X
               VALIDCK=VALRTN3
SUBVOL   IKJSUBF
SUBVOL1  IKJIDENT 'VOLSER TO BE USED FOR SELECTION',                   X
               DEFAULT='NONE',CHAR,                                    X
               MAXLNTH=6,FIRST=ANY,OTHER=ANY,                          X
               VALIDCK=VALRTN5
SUBUNIT  IKJSUBF
SUBUNIT1 IKJIDENT 'UNIT ADDRESS TO BE USED FOR SELECTION',             X
               DEFAULT='NONE',CHAR,                                    X
               MAXLNTH=4,FIRST=ANY,OTHER=ANY,                          X
               VALIDCK=VALRTN4
SUBDEVT  IKJSUBF
SUBDEVT1 IKJIDENT 'DEVICE TYPE TO BE USED FOR SELECTION',              X
               DEFAULT='NONE',CHAR,                                    X
               MAXLNTH=6,FIRST=NONATNUM,OTHER=ANY
         AIF   ('&SMS' NE 'YES').NOSMS15
SUBSG    IKJSUBF
SUBSG1   IKJIDENT 'STORAGE GROUP TO BE USED FOR SELECTION',            X
               DEFAULT='NONE',CHAR,                                    X
               MAXLNTH=8,FIRST=NONATNUM,OTHER=ANY
.NOSMS15 ANOP
         IKJENDP
         EJECT
***********************************************************************
*                                                                     *
*        DYNAMIC WORK AREA                                            *
*                                                                     *
***********************************************************************
WORKA    DSECT
         DS    18F                 PROGRAM SAVE AREA
SAVERET  DS    F                   REGISTER SAVE AREA FOR PUTMSG   RTN
SAVETOT  DS    F                   REGISTER SAVE AREA FOR DOTOTALS RTN
SAVEFORM DS    F                   REGISTER SAVE AREA FOR FORMAT   RTN
SAVESMSB DS    F                   REGISTER SAVE AREA FOR GETSMSB  RTN
SAVESMSV DS    F                   REGISTER SAVE AREA FOR GETSMSV  RTN
DOUBLE   DS    D                   DOUBLE WORD WORK AREA
VOLTBL   DS    F                   ADDRESS OF VOLUME TABLE
VOLENTS  DS    F                   NUMBER OF ENTRIES IN VOLUME TABLE
TBLFIRST DS    F                   ADDRESS OF FIRST ENTRY IN VOLUME TBL
TBLLAST  DS    F                   ADDRESS OF LOAD ENTRY IN VOLUME TBL
TOTVOLS  DS    F                   TOTAL VOLUMES FOUND
TOTCYL   DS    F                   TOTAL CYL FREE SPACE
TOTTRK   DS    F                   TOTAL ADDITIONAL TRK FREE SPACE
TOTNEXT  DS    F                   TOTAL NUMBER OF EXTENTS
TOTCYLA  DS    F                   TOTAL CYL AVAILABLE
LARGECYL DS    F                   LARGEST EXTENT IN CYL
LARGETRK DS    F                   LARGEST EXTENT IN ADDITIONAL TRK
SORT1OFF DS    H                   TABLE RECORD OFFSET OF SORT FIELD 1
SORT2OFF DS    H                   TABLE RECORD OFFSET OF SORT FIELD 2
SORT3OFF DS    H                   TABLE RECORD OFFSET OF SORT FIELD 3
SORT1LEN DS    H                   TABLE RECORD LENGTH OF SORT FIELD 1
SORT2LEN DS    H                   TABLE RECORD LENGTH OF SORT FIELD 2
SORT3LEN DS    H                   TABLE RECORD LENGTH OF SORT FIELD 3
SORT1SEQ DS    C                   SEQUENCE FOR SORT FIELD 1
SORT2SEQ DS    C                   SEQUENCE FOR SORT FIELD 2
SORT3SEQ DS    C                   SEQUENCE FOR SORT FIELD 3
EDWORK1  DS    CL4                 EDIT WORK AREA
EDWORK2  DS    CL6                 EDIT WORK AREA
EDWORK3  DS    CL8                 EDIT WORK AREA
EDWORK4  DS    CL9                 EDIT WORK AREA
EDWORK5  DS    CL14                EDIT WORK AREA
LSPWORK  LSPACE MF=(L,DATA)        LSPACE RETURN DATA AREA
         UCBSCAN MF=(L,UCBSCN)     UCBSCAN LIST FORM
UNITNAME DS    CL8                 UNITNAME FOR TSO USER
*
VOLSER   DS    CL6                 VOLSER FOR SEARCH
VOLSERL  DS    H                   LENGTH OF VOLSER FOR SEARCH
UNITADD  DS    CL4                 UNIT ADDRESS FOR SEARCH
UNITADDL DS    H                   LENGTH OF UNIT ADDRESS FOR SEARCH
DEVTYPE  DS    CL8                 DEVICE TYPE FOR SEARCH
DEVTYPEL DS    H                   LENGTH OF DEVICE TYPE FOR SEARCH
SG       DS    CL8                 STORAGE GROUP FOR SEARCH
SGL      DS    H                   LENGTH OF STORAGE GROUP FOR SEARCH
*
CPPL     DS    0F                  COMMAND PROCESSOR PARAMETER LIST
CPPLCBUF DS    F                   COMMAND BUFFER
CPPLUPT  DS    F                   USER PROFILE TABLE
CPPLPSCB DS    F                   PROTECTED STEP CONTROL BLOCK
CPPLECT  DS    F                   ENVIRONMENT CONTROL TABLE
*
PPL      DS    0F                  PARSE PARAMETER LIST
PPLUPT   DS    F                   USER PROFILE TABLE
PPLECT   DS    F                   EVIRONMENT CONTROL TABLE
PPLECB   DS    F                   MY ECB
PPLPCL   DS    F                   PARSE CONTROL LIST
PPLPDL   DS    F                   POINTER TO PARSE DESCRIPTOR LIST
PPLBUFF  DS    F                   COMMAND BUFFER ADDRESS
PPLWORK  DS    F                   USER WORK AREA ADDRESS
*
PDLPOINT DS    F                   ADDRESS OF PARSE DESCRIPTOR LIST
*
PUTLINE  PUTLINE MF=L              PUTLINE LIST FORM
LPUTLINE EQU   *-PUTLINE           LENGTH OF PUTLINE LIST FORM
*
IOPL     DS    4F                  IOPL
*
ECB      DS    F                   MY ECB
*
MSGOUT   DS    2F                  PUTLINE MSG POINTER
MSGLINE  DS    0CL125              PUTLINE MSG AREA
         DS    AL2(121)            LENGTH OF MSG
         DS    AL2(0)              RESERVED
MSGPREF  DS    C                   START WITH BLANK CHAR
MSG      DS    CL120               ACTUAL MESSAGE
*
DETAIL1  DS    0CL79               DETAIL LINE FOR STANDARD OUTPUT
OUTVOL1  DS    CL6                 OUTPUT VOLSER
         DS    CL1
OUTADDR1 DS    CL4                 OUTPUT DEVICE ADDRESS
         DS    CL1
OUTDEVT1 DS    CL8                 OUTPUT DEVICE TYPE
         DS    CL1
OUTSMSI1 DS    CL1                 OUTPUT SMS INDICATOR
         DS    CL1
OUTIXIN1 DS    CL1                 OUTPUT IXVTOC INDICATOR
         DS    CL1
OUTCL1   DS    CL1                 OUTPUT SPECIAL CLASS
         DS    CL1
OUTMNT1A DS    CL3                 FIRST MOUNT ATTRIBUTE
OUTSLAS1 DS    CL1                 CONSTANT '/'
OUTMNT1B DS    CL3                 SECOND MOUNT ATTRIBUTE
         DS    CL3
         DS    CL1
         ORG   OUTMNT1A
OUTSG1   DS    CL8                 OUTPUT STORAGE GROUP
         DS    CL1
OUTSGST1 DS    CL2                 OUTPUT STORAGE GROUP STATUS
         ORG
         DS    CL1
OUTUCNT1 DS    CL3                 OUTPUT USE COUNT
         DS    CL1
OUTFCYL1 DS    CL7                 OUTPUT TOTAL FREE CYLS
         DS    C
OUTFTRK1 DS    CL5                 OUTPUT TOTAL FREE TRKS
         DS    C
OUTFAR1  DS    CL5                 OUTPUT TOTAL FREE AREAS
         DS    C
OUTDSCB1 DS    CL4                 OUTPUT NUMBER OF FREE DSCBS
         DS    C
OUTLCYL1 DS    CL5                 OUTPUT LARGEST FREE CYLS
         DS    C
OUTLTRK1 DS    CL5                 OUTPUT LARGEST FREE TRKS
*
DETAIL2  DS    0CL79               DETAIL LINE FOR HEADWARE INFO
OUTVOL2  DS    CL6                 OUTPUT VOLSER
         DS    CL1
OUTADDR2 DS    CL4                 OUTPUT DEVICE ADDRESS
         DS    CL1
OUTDEVT2 DS    CL8                 OUTPUT DEVICE TYPE
         DS    CL1
OUTSMSI2 DS    CL1                 OUTPUT SMS INDICATOR
         DS    CL1
OUTIXIN2 DS    CL1                 OUTPUT IXVTOC INDICATOR
         DS    CL1
OUTCL2   DS    CL1                 OUTPUT SPECIAL CLASS
         DS    CL1
OUTMNT2A DS    CL3                 FIRST MOUNT ATTRIBUTE
OUTSLAS2 DS    CL1                 CONSTANT '/'
OUTMNT2B DS    CL3                 SECOND MOUNT ATTRIBUTE
         DS    CL3
         DS    CL1
         ORG   OUTMNT2A
OUTSG2   DS    CL8                 OUTPUT STORAGE GROUP
         DS    CL1
OUTSGST2 DS    CL2                 OUTPUT STORAGE GROUP STATUS
         ORG
         DS    CL1
OUTACYL2 DS    CL3                 OUTPUT ALTERNATE CYLS FOR DEVICE
         DS    CL1
OUTTCYL2 DS    CL12                OUTPUT TOTAL CYLS FOR DEVICE
         DS    CL24
*
         CNOP  0,4
TBLREC   DS    0CL76               TABLE RECORD
TBLCHAIN DS    F         00        TABLE CHAIN TO NEXT RECORD
TBLVOL   DS    CL6       04        TABLE VOLSER
TBLADDR  DS    CL4       10        TABLE DEVICE ADDRESS
TBLADDRX DS    H         14        TABLE DEVICE ADDRESS HEX
         DS    CL2       16        FILLER
TBLDEVT  DS    CL8       18        TABLE DEVICE TYPE
TBLSMSIN DS    CL1       26        TABLE SMS INDICATOR
TBLIXIN  DS    CL1       27        TABLE IXVTOC INDICATOR
TBLCLASS DS    CL1       28        TABLE SPECIAL CLASS
TBLMNT1  DS    CL3       29        FIRST MOUNT ATTRIBUTE
TBLSLASH DS    CL1       32        CONSTANT '/'
TBLMNT2  DS    CL3       33        SECOND MOUNT ATTRIBUTE
         DS    CL3       36        FILLER
         ORG   TBLMNT1
TBLSG    DS    CL8       29        TABLE STORAGE GROUP
TBLSGST  DS    CL2       37        TABLE STORAGE GROUP STATUS
         ORG
TBLACYL  DS    AL1       39        TABLE ALTERNATE CYLS ON VOL
TBLTCYL  DS    F         40        TABLE TOTAL CYLS ON VOL
TBLUCNT  DS    F         44        TABLE USE COUNT
TBLFCYL  DS    F         48        TABLE TOTAL FREE CYLS
TBLFTRK  DS    F         52        TABLE TOTAL FREE TRKS
TBLFAREA DS    F         56        TABLE TOTAL FREE AREAS
TBLDSCB  DS    F         60        TABLE NUMBER OF FREE DSCBS
TBLLCYL  DS    F         64        TABLE LARGEST FREE CYLS
TBLLTRK  DS    F         68        TABLE LARGEST FREE TRKS
TBLERROR DS    F         72        TABLE ERROR MESSAGE NUMBER
*
SELECT   DS    CL6                 SELECT FIELD FOR SEARCH
LEN      DS    X                   LENGTH OF SELECT FIELD
SWITCH   DS    X                   MISCELLANEOUS BIT SWITCHES
FOUND    EQU   X'80'               A VOLUME HAS BEEN FOUND
DOTOTALS EQU   X'40'               REQUEST MADE FOR TOTALS
DOSORT   EQU   X'20'               REQUEST MADE FOR SORTING
SMSACT   EQU   X'10'               SMS IS ACTIVE INDICATOR
DOHARD   EQU   X'08'               REQUEST MADE FOR HARDWARE INFO
SWITCH1  DS    X                   MISCELLANEOUS BIT SWITCHES
DOSMS    EQU   X'80'               REQUEST FOR SMSONLY VOLUMES
DONOSMS  EQU   X'40'               REQUEST FOR NONSMS ONLY VOLUMES
DOIX     EQU   X'20'               REQUEST FOR IXVTOC ONLY VOLUMES
DONOIX   EQU   X'10'               REQUEST FOR NON INXVTOC ONLY VOL
*
SCANWORK DS    CL100               IOSVSUCB SCAN WORK AREA
UCBAREA  DS    CL48                COPY OF UCB
DCEAREA  DS    CL72                COPY OF DCE
DEVADDR  DS    CL4                 4 DIGIT DEVICE NUMBER
*
DSCB4    DS    0F                  WORK AREA FOR FORMAT 4 DSCB
         IECSDSL1 4
*
LSPACE   LSPACE MF=L
SMSVOL   DS    CL6                 VOLSER USED FOR SMS SEARCH
OWNSMS   DS    H                   SMS SYSTEM NUMBER
STORGRP  DS    CL8                 STORAGE GROUP FROM SMS
STORSTAT DS    CL2                 STORAGE GROUP STATUS FROM SMS
CVTSYSNM DS    CL8                 SYSTEM NAME FROM CVT
GRSSYSNM DS    CL8                 GRS SYSTEM NAME
PLXSYSNM DS    CL8                 SYSPLEX SYSTEM NAME
IGDSSIVT DS    F                   SMS IVT
SMSSSOB  DS    A,F                 SSOBWRK (SMS ONLY)
IOSDCSAV DS    4F                  IOSDCXR MACRO REGISTER SAVE AREA
LDSA     EQU   *-WORKA             LENGTH OF WORK AREA
         AIF   ('&SMS' NE 'YES').NOSMS16
         EJECT
***********************************************************************
*                                                                     *
*        WORK AREA FOR SMS INQUIRIES (POINTED TO BY SMSSSOB)          *
*                                                                     *
***********************************************************************
SMSWORK  DSECT
SSOBWRK  DS    XL(SSOBHSIZ)        SSOB
SSSAWRK  DS    XL(SSSALN+SSSA1LN)  SSSA (HDR)
         DS    0D
SMSSFWA  DS    XL(16384)           16K WORK AREA
SMSSFWAL EQU *-SMSSFWA
SMSWORKL EQU *-SMSWORK
.NOSMS16 ANOP
         EJECT
***********************************************************************
*                                                                     *
*        MAPPING MACROS                                               *
*                                                                     *
***********************************************************************
         IKJUPT
         EJECT
         IKJPSCB
         EJECT
UCB      DSECT
         IEFUCBOB LIST=YES
         EJECT
         LSPACE MF=(D,DATA)
         AIF   ('&SMS' NE 'YES').NOSMS17
         EJECT
         IGDVLD
         EJECT
         CVT   DSECT=YES,PREFIX=YES,LIST=YES
         EJECT
         IEFJESCT
         EJECT
         IEFJSSIB
         EJECT
         IHAECVT LIST=YES
         EJECT
         ISGGVT
         EJECT
         IEFJSSOB ,                SSOB HEADER
         EJECT
         IEFSSSA                   SSOB EXTENSION FOR SMS
         EJECT
         IECDDCE                   DASD CLASS EXTENSION
         EJECT
IGDBCD   DSECT                     BASE CONFIG DEFINITION
BCDP     DS    0CL24               BASE CONFIGURATION DEF PREFIX
BCDPID   DS    CL8                 ID = 'IGDBCD'
         DS    CL2                 UNUSED
BCDPVER  DS    H                   VERSION OF MACRO
BCDCNT   DS    F                   COUNT  MUST BE 1
BCDPTYP  DS    H                   TYPE OF ITEM FOLLOWING HEADER
         DS    CL2                 RESERVED
BCDPLEN  DS    F                   LENGTH OF BCDEF
BCDEF    DS    0CL384              BASE CONFIGURATION DEF
         DS    CL32                RESERVED
BCDFUSER DS    CL8                 USERID OF LAST UPDATER
BCDFDATE DS    CL10                DATE OF LAST UPDATE
         DS    CL6                 RESERVED
BCDFTIME DS    CL8                 TIME OF LAST UPDATE
BCDFDESC DS    CL120               DESCRIPTION
BCDSUBDF DS    0CL192              SUB DEFINITION
BCDFLAGS DS    CL4                 RESERVED FOR FLAGS, ETC
BCDDEFMC DS    0CL32               DEFAULT MANAGEMENT CLASS
BCDMCLEN DS    H                   DEFAULT MC LENGTH OF NAME
BCDMCNAM DS    CL30                DEFAULT MANAGEMENT CLASS NAME
BCDDGEOM DS    0CL8                DEFAULT DEVICE GEOMETRY
BCDTRKSZ DS    F                   TRACK SIZE IN BYTES
BCDCYLCP DS    F                   CYL CAPACITY (TRK/CYL)
BCDDUNIT DS    CL8                 DEFAULT UNIT
BCDSRST  DS    CL8                 SMS RESOURCE STATUS TOKEN
BCDSTAT  DS    AL1                 DATA SET STATUS SEE CONSTS
         DS    CL3                 RESERVED
BCDFSYSN DS    8CL8 DIMENSION=(8)  SYSTEM NAMES
BCDSCDSN DS    CL44                FOR ACDS ONLY  NAME OF SCDS
*                                  FROM WHICH IT WAS ACTIVATED
BCDSFEAT DS    8CL2 DIMENSION=(8)  SUPPORTED SYSTEM FEATURES
         DS    X'00010100'         ?
         DS    XL8                 ?
         DS    XL4                 ?
BCDSYSOF DS    A(BCDEND-BCDEF)     OFFSET TO SYSTEM DATA
BCDSYSLN DS    A(BCDEND2-BCDSYSDT) LENGTH OF SYSTEM DATA
         DS    A(BCDEND-BCDEF)     ?
         DS    XL16                RESERVED
BCDEND   DS    0D                  ROUND TO DWORD BOUNDARY
BCDSYSDT DSECT                     SYSTEM RELATED DATA
BCDSSTAT DS    256CL16             ONE ENTRY PER SYSTEM
BCDEND2  DS    0D                  ROUND TO DWORD BOUNDARY
BCDVALID EQU   1                   DATA SET IS VALID
BCDINVAL EQU   2                   DATA SET IS INVALID
BCDUNKWN EQU   3                   DATA SET STATUS IS UNKNOWN
BCDTYP   EQU   10                  CONSTANT TYPE OF LIST
BCDVER0  EQU   0                   IGDBCD VERSION           HDP3310
BCDVER1  EQU   1                   IGDBCD VERSION           HDZ11B0
BCDVER2  EQU   2                   IGDBCD VERSION           HDZ11C0
BCDVER   EQU   2                   IGDBCD VERSION (CURRENT)
.NOSMS17 ANOP
         END
